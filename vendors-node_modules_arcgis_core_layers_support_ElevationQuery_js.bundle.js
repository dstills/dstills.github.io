"use strict";
(self["webpackChunksynview"] = self["webpackChunksynview"] || []).push([["vendors-node_modules_arcgis_core_layers_support_ElevationQuery_js"],{

/***/ "./node_modules/@arcgis/core/layers/support/ElevationQuery.js":
/*!********************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationQuery.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationQuery: () => (/* binding */ T),
/* harmony export */   GeometryDescriptor: () => (/* binding */ v),
/* harmony export */   getFinestLodIndex: () => (/* binding */ E)
/* harmony export */ });
/* harmony import */ var _core_asyncUtils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/asyncUtils.js */ "./node_modules/@arcgis/core/core/asyncUtils.js");
/* harmony import */ var _core_Error_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/Error.js */ "./node_modules/@arcgis/core/core/Error.js");
/* harmony import */ var _core_maybe_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/maybe.js */ "./node_modules/@arcgis/core/core/maybe.js");
/* harmony import */ var _core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/promiseUtils.js */ "./node_modules/@arcgis/core/core/promiseUtils.js");
/* harmony import */ var _core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/unitUtils.js */ "./node_modules/@arcgis/core/core/unitUtils.js");
/* harmony import */ var _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../geometry/Multipoint.js */ "./node_modules/@arcgis/core/geometry/Multipoint.js");
/* harmony import */ var _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../geometry/Point.js */ "./node_modules/@arcgis/core/geometry/Point.js");
/* harmony import */ var _geometry_Polyline_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../geometry/Polyline.js */ "./node_modules/@arcgis/core/geometry/Polyline.js");
/* harmony import */ var _geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../geometry/projection.js */ "./node_modules/@arcgis/core/geometry/projection.js");
/* harmony import */ var _geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../geometry/support/aaBoundingRect.js */ "./node_modules/@arcgis/core/geometry/support/aaBoundingRect.js");
/* harmony import */ var _ElevationSampler_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ElevationSampler.js */ "./node_modules/@arcgis/core/layers/support/ElevationSampler.js");
/* harmony import */ var _ElevationTile_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ElevationTile.js */ "./node_modules/@arcgis/core/layers/support/ElevationTile.js");
/* harmony import */ var _TileKey_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./TileKey.js */ "./node_modules/@arcgis/core/layers/support/TileKey.js");
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
class T{async queryAll(e,i,n){if(!(e=n&&n.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");const l=v.fromGeometry(i);let s=!1;n&&n.returnSampleInfo||(s=!0);const o={...R,...n,returnSampleInfo:!0},a=await this.query(e[e.length-1],l,o),r=await this._queryAllContinue(e,a,o);return r.geometry=r.geometry.export(),s&&delete r.sampleInfo,r}async query(e,i,n){if(!e)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!i||!(i instanceof v)&&"point"!==i.type&&"multipoint"!==i.type&&"polyline"!==i.type)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-geometry","Only point, polyline and multipoint geometries can be used to query elevation");const l={...R,...n},s=new x(e,i.spatialReference,l),o=l.signal;return await e.load({signal:o}),await this._createGeometryDescriptor(s,i,o),await this._selectTiles(s,o),await this._populateElevationTiles(s,o),this._sampleGeometryWithElevation(s),this._createQueryResult(s,o)}async createSampler(e,i,n){if(!e)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!i||"extent"!==i.type)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-extent","Invalid or undefined extent");const l={...R,...n};return this._createSampler(e,i,l)}async createSamplerAll(e,i,n){if(!(e=n&&n.ignoreInvisibleLayers?e.filter((e=>e.visible)):e.slice()).length)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");if(!i||"extent"!==i.type)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-extent","Invalid or undefined extent");const l={...R,...n,returnSampleInfo:!0},s=await this._createSampler(e[e.length-1],i,l);return this._createSamplerAllContinue(e,i,s,l)}async _createSampler(e,t,i,n){const l=i.signal;await e.load({signal:l});const s=t.spatialReference,o=e.tileInfo.spatialReference;s.equals(o)||(await (0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.initializeProjection)([{source:s,dest:o}],{signal:l}),t=(0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.project)(t,o));const a=new _(e,t,i,n);return await this._selectTiles(a,l),await this._populateElevationTiles(a,l),new _ElevationSampler_js__WEBPACK_IMPORTED_MODULE_10__.MultiTileElevationSampler(a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,n){if(e.pop(),!e.length)return i;const l=i.samplers.map((e=>(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.fromExtent)(e.extent))),s=await this._createSampler(e[e.length-1],t,n,l);if(0===s.samplers.length)return i;const o=i.samplers.concat(s.samplers),a=new _ElevationSampler_js__WEBPACK_IMPORTED_MODULE_10__.MultiTileElevationSampler(o,n.noDataValue);return this._createSamplerAllContinue(e,t,a,n)}async _queryAllContinue(e,t,n){const l=e.pop(),s=t.geometry.coordinates,o=t.sampleInfo;(0,_core_maybe_js__WEBPACK_IMPORTED_MODULE_2__.assertIsSome)(o);const a=[],r=[];for(let i=0;i<s.length;i++){const t=o[i];t.demResolution>=0?t.source||(t.source=l):e.length&&(a.push(s[i]),r.push(i))}if(!e.length||0===a.length)return t;const c=t.geometry.clone(a),u=await this.query(e[e.length-1],c,n),h=u.sampleInfo;if(!h)throw new Error("no sampleInfo");return r.forEach(((e,t)=>{s[e].z=u.geometry.coordinates[t].z,o[e].demResolution=h[t].demResolution})),this._queryAllContinue(e,t,n)}async _createQueryResult(e,t){const n=await e.geometry.project(e.outSpatialReference,t);(0,_core_maybe_js__WEBPACK_IMPORTED_MODULE_2__.assertIsSome)(n);const l={geometry:n.export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(l.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach((e=>{e.tile=null,e.elevationTile=null})),l}async _createGeometryDescriptor(e,i,n){let l;const s=e.layer.tileInfo.spatialReference;if(i instanceof v?l=await i.project(s,n):(await (0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.initializeProjection)([{source:i.spatialReference,dest:s}],{signal:n}),l=(0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.project)(i,s)),!l)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:spatial-reference-mismatch",`Cannot query elevation in '${i.spatialReference.wkid}' on an elevation service in '${s.wkid}'`);e.geometry=v.fromGeometry(l)}async _selectTiles(e,i){"geometry"===e.type&&this._preselectOutsideLayerExtent(e);const n=e.options.demResolution;if("number"==typeof n)this._selectTilesClosestResolution(e,n);else if("finest-contiguous"===n)await this._selectTilesFinestContiguous(e,i);else{if("auto"!==n)throw new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:invalid-dem-resolution",`Invalid dem resolution value '${n}', expected a number, "finest-contiguous" or "auto"`);await this._selectTilesAuto(e,i)}}_preselectOutsideLayerExtent(e){if(null==e.layer.fullExtent)return;const t=new _ElevationTile_js__WEBPACK_IMPORTED_MODULE_11__.ElevationTile(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach((e=>{const n=e.x,l=e.y;(n<i.xmin||n>i.xmax||l<i.ymin||l>i.ymax)&&(e.elevationTile=t)}))}_selectTilesClosestResolution(e,t){const i=this._findNearestDemResolutionLODIndex(e,t);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const{tileInfo:i,tilemapCache:n}=e.layer,l=t/(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__.getMetersPerUnitForSR)(i.spatialReference),o=q(i,n);let a=o[0],r=0;for(let s=1;s<o.length;s++){const e=o[s];Math.abs(e.resolution-l)<Math.abs(a.resolution-l)&&(a=e,r=s)}return r}async _selectTilesFinestContiguous(e,t){const{tileInfo:i,tilemapCache:n}=e.layer,l=E(i,n,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,l,t)}async _selectTilesFinestContiguousAt(e,i,s){const o=e.layer;if(e.selectTilesAtLOD(i),i<0)return;const a=o.tilemapCache,r=e.getTilesToFetch();try{if(a&&!I(a))await (0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.whenOrAbort)(Promise.all(r.map((e=>a.fetchAvailability(e.level,e.row,e.col,{signal:s})))),s);else if(await this._populateElevationTiles(e,s),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new _core_Error_js__WEBPACK_IMPORTED_MODULE_1__["default"]("elevation-query:has-unavailable-tiles")}catch(c){(0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.throwIfAbortError)(c),await this._selectTilesFinestContiguousAt(e,i-1,s)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),l={},s=e.options.cache,o=e.options.noDataValue,a=i.map((async i=>{if(null==i.id)return;const n=`${e.layer.uid}:${i.id}:${o}`,a=null!=s?s.get(n):null,r=null!=a?a:await e.layer.fetchTile(i.level,i.row,i.col,{noDataValue:o,signal:t});null!=s&&s.put(n,r),l[i.id]=new _ElevationTile_js__WEBPACK_IMPORTED_MODULE_11__.ElevationTile(i,r)}));await (0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.whenOrAbort)(Promise.allSettled(a),t),e.populateElevationTiles(l)}async _selectTilesAuto(t,i){this._selectTilesAutoFinest(t),this._reduceTilesForMaximumRequests(t);const s=t.layer.tilemapCache;if(!s||I(s))return this._selectTilesAutoPrefetchUpsample(t,i);const o=t.getTilesToFetch(),a={},r=o.map((async t=>{const n=new _TileKey_js__WEBPACK_IMPORTED_MODULE_12__.TileKey(null,0,0,0,(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.create)()),o=await (0,_core_asyncUtils_js__WEBPACK_IMPORTED_MODULE_0__.result)(s.fetchAvailabilityUpsample(t.level,t.row,t.col,n,{signal:i}));!1!==o.ok?null!=t.id&&(a[t.id]=n):(0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.throwIfAbortError)(o.error)}));await (0,_core_promiseUtils_js__WEBPACK_IMPORTED_MODULE_3__.whenOrAbort)(Promise.all(r),i),t.remapTiles(a)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const n={},l=e=>{null!=e.id&&(e.id in n?n[e.id]++:(n[e.id]=1,i++))},s=e=>{if(null==e.id)return;const t=n[e.id];1===t?(delete n[e.id],i--):n[e.id]=t-1};e.forEachTileToFetch(l,s);let o=!0;for(;o&&(o=!1,e.forEachTileToFetch((n=>{i<=e.options.maximumAutoTileRequests||(s(n),t.upsampleTile(n)&&(o=!0),l(n))}),s),o););}_selectTilesAutoFinest(e){const{tileInfo:t,tilemapCache:i}=e.layer,n=E(t,i,e.options.minDemResolution);e.selectTilesAtLOD(n,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let n=!1;e.forEachTileToFetch(((e,t)=>{i.upsampleTile(e)?n=!0:t()})),n&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach((t=>{const i=t.elevationTile;let n=e.options.noDataValue;if(i){const e=i.sample(t.x,t.y);null!=e?n=e:t.elevationTile=null}t.z=n}))}_extractSampleInfo(e){const t=e.layer.tileInfo,i=(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__.getMetersPerUnitForSR)(t.spatialReference);return e.geometry.coordinates.map((n=>{let l=-1;if(n.elevationTile&&n.elevationTile!==e.outsideExtentTile){l=t.lodAt(n.elevationTile.tile.level).resolution*i}return{demResolution:l}}))}}class v{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new v;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map((e=>e.clone())),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await (0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.initializeProjection)([{source:this.spatialReference,dest:e}],{signal:t});const i=new _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__["default"]({spatialReference:this.spatialReference,points:this.coordinates.map((e=>[e.x,e.y]))}),n=(0,_geometry_projection_js__WEBPACK_IMPORTED_MODULE_8__.project)(i,e);if(!n)return null;const l=this.coordinates.map(((e,t)=>{const i=e.clone(),l=n.points[t];return i.x=l[0],i.y=l[1],i})),s=this.clone(l);return s.spatialReference=e,s}static fromGeometry(e){const t=new v;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof v)t.coordinates=e.coordinates.map((e=>e.clone())),t._exporter=(t,i)=>{const n=e.clone(t);return n.spatialReference=i,n};else switch(e.type){case"point":{const i=e,{hasZ:n,hasM:l}=i;t.coordinates=n&&l?[new w(i.x,i.y,i.z,i.m)]:n?[new w(i.x,i.y,i.z)]:l?[new w(i.x,i.y,null,i.m)]:[new w(i.x,i.y)],t._exporter=(t,i)=>e.hasM?new _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__["default"](t[0].x,t[0].y,t[0].z,t[0].m,i):new _geometry_Point_js__WEBPACK_IMPORTED_MODULE_6__["default"](t[0].x,t[0].y,t[0].z,i);break}case"multipoint":{const i=e,{hasZ:n,hasM:l}=i;t.coordinates=n&&l?i.points.map((e=>new w(e[0],e[1],e[2],e[3]))):n?i.points.map((e=>new w(e[0],e[1],e[2]))):l?i.points.map((e=>new w(e[0],e[1],null,e[2]))):i.points.map((e=>new w(e[0],e[1]))),t._exporter=(t,i)=>e.hasM?new _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__["default"]({points:t.map((e=>[e.x,e.y,e.z,e.m])),hasZ:!0,hasM:!0,spatiaReference:i}):new _geometry_Multipoint_js__WEBPACK_IMPORTED_MODULE_5__["default"](t.map((e=>[e.x,e.y,e.z])),i);break}case"polyline":{const i=e,n=[],l=[],{hasZ:s,hasM:o}=e;let a=0;for(const e of i.paths)if(l.push([a,a+e.length]),a+=e.length,s&&o)for(const t of e)n.push(new w(t[0],t[1],t[2],t[3]));else if(s)for(const t of e)n.push(new w(t[0],t[1],t[2]));else if(o)for(const t of e)n.push(new w(t[0],t[1],null,t[2]));else for(const t of e)n.push(new w(t[0],t[1]));t.coordinates=n,t._exporter=(t,i)=>{const n=e.hasM?t.map((e=>[e.x,e.y,e.z,e.m])):t.map((e=>[e.x,e.y,e.z])),s=l.map((e=>n.slice(e[0],e[1])));return new _geometry_Polyline_js__WEBPACK_IMPORTED_MODULE_7__["default"]({paths:s,hasM:e.hasM,hasZ:!0,spatialReference:i})};break}}return t}}class w{constructor(e,t,i=null,n=null,l=null,s=null){this.x=e,this.y=t,this.z=i,this.m=n,this.tile=l,this.elevationTile=s}clone(){return new w(this.x,this.y,this.z,this.m)}}class g{constructor(e,t){this.layer=e,this.options=t}}class x extends g{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type="geometry"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach((e=>e.tile=null));else{const{tileInfo:t,tilemapCache:i}=this.layer,n=q(t,i)[e].level;this.geometry.coordinates.forEach((e=>e.tile=t.tileAt(n,e.x,e.y)))}}allElevationTilesFetched(){return!this.geometry.coordinates.some((e=>!e.elevationTile))}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){for(const t of this.geometry.coordinates)!t.elevationTile&&t.tile?.id&&(t.elevationTile=e[t.tile.id])}remapTiles(e){for(const t of this.geometry.coordinates){const i=t.tile?.id;t.tile=i?e[i]:null}}getTilesToFetch(){const e={},t=[];for(const i of this.geometry.coordinates){const n=i.tile;if(!n)continue;const l=i.tile?.id;i.elevationTile||!l||e[l]||(e[l]=n,t.push(n))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,(()=>{t.tile=null}))}}class _ extends g{constructor(e,t,i,n){super(e,i),this.type="extent",this.elevationTiles=[],this._candidateTiles=[],this._fetchedCandidates=new Set,this.extent=t.intersection(e.fullExtent),this.maskExtents=n}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),n=Math.min(i,e);n<0?this._candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(n)}_maximumLodForRequests(e){const{tileInfo:t,tilemapCache:i}=this.layer,n=q(t,i);if(!e)return n.length-1;const l=this.extent;if(null==l)return-1;for(let s=n.length-1;s>=0;s--){const i=n[s],o=i.resolution*t.size[0],a=i.resolution*t.size[1];if(Math.ceil(l.width/o)*Math.ceil(l.height/a)<=e)return s}return-1}allElevationTilesFetched(){return this._candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this._fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this._candidateTiles){const i=t.id&&e[t.id];i&&(this._fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles.map((t=>e[t.id])))}getTilesToFetch(){return this._candidateTiles}forEachTileToFetch(e,t){const i=this._candidateTiles;this._candidateTiles=[],i.forEach((i=>{if(this._fetchedCandidates.has(i))return void(t&&t(i));let n=!1;e(i,(()=>n=!0)),n?t&&t(i):this._candidateTiles.push(i)})),this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},n=[];for(const s of e){const e=s.id;e&&!i[e]?(i[e]=s,n.push(s)):t&&t(s)}const l=n.sort(((e,t)=>e.level-t.level));return l.filter(((e,i)=>{for(let n=0;n<i;n++){const i=l[n].extent;if(i&&e.extent&&(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.contains)(i,e.extent))return t&&t(e),!1}return!0}))}_selectCandidateTilesCoveringExtentAt(e){this._candidateTiles.length=0;const t=this.extent;if(null==t)return;const{tileInfo:i,tilemapCache:n}=this.layer,l=q(i,n)[e],s=i.tileAt(l.level,t.xmin,t.ymin),o=s.extent;if(null==o)return;const a=l.resolution*i.size[0],r=l.resolution*i.size[1],c=Math.ceil((t.xmax-o[0])/a),u=Math.ceil((t.ymax-o[1])/r);for(let h=0;h<u;h++)for(let e=0;e<c;e++){const t=new _TileKey_js__WEBPACK_IMPORTED_MODULE_12__.TileKey(null,s.level,s.row-h,s.col+e);i.updateTileInfo(t),this._tileIsMasked(t)||this._candidateTiles.push(t)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some((t=>e.extent&&(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_9__.contains)(t,e.extent)))}}function E(e,t,i=0){const n=q(e,t);let l=n.length-1;if(i>0){const t=i/(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__.getMetersPerUnitForSR)(e.spatialReference),o=n.findIndex((e=>e.resolution<t));0===o?l=0:o>0&&(l=o-1)}return l}const R={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:"auto",minDemResolution:0};function q(e,t){const i=e.lods;if(I(t)){const{effectiveMinLOD:e,effectiveMaxLOD:n}=t;return i.filter((t=>t.level>=e&&t.level<=n))}return i}function I(e){return null!=e?.tileInfo}


/***/ }),

/***/ "./node_modules/@arcgis/core/layers/support/ElevationSampler.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationSampler.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationSamplerBase: () => (/* binding */ m),
/* harmony export */   MultiTileElevationSampler: () => (/* binding */ u),
/* harmony export */   TileElevationSampler: () => (/* binding */ c),
/* harmony export */   updateGeometryElevation: () => (/* binding */ p)
/* harmony export */ });
/* harmony import */ var _geometry_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../geometry.js */ "./node_modules/@arcgis/core/geometry.js");
/* harmony import */ var _core_has_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/has.js */ "./node_modules/@arcgis/core/core/has.js");
/* harmony import */ var _core_handleUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/handleUtils.js */ "./node_modules/@arcgis/core/core/handleUtils.js");
/* harmony import */ var _core_Logger_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/Logger.js */ "./node_modules/@arcgis/core/core/Logger.js");
/* harmony import */ var _core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/unitUtils.js */ "./node_modules/@arcgis/core/core/unitUtils.js");
/* harmony import */ var _geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../geometry/support/aaBoundingRect.js */ "./node_modules/@arcgis/core/geometry/support/aaBoundingRect.js");
/* harmony import */ var _geometry_support_webMercatorUtils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../geometry/support/webMercatorUtils.js */ "./node_modules/@arcgis/core/geometry/support/webMercatorUtils.js");
/* harmony import */ var _geometry_Point_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../geometry/Point.js */ "./node_modules/@arcgis/core/geometry/Point.js");
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
const l=_core_Logger_js__WEBPACK_IMPORTED_MODULE_3__["default"].getLogger("esri.layers.support.ElevationSampler");class m{queryElevation(e){return p(e.clone(),this)}on(){return (0,_core_handleUtils_js__WEBPACK_IMPORTED_MODULE_2__.makeHandle)()}projectIfRequired(e,t){return h(e,t)}}class c extends m{get spatialReference(){return this.extent.spatialReference}constructor(e,t,i){super(),this.tile=e,this.noDataValue=i;const o=e.tile.extent;this.extent=(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_5__.toExtent)(o,t.spatialReference),this.extent.zmin=e.zmin,this.extent.zmax=e.zmax,this._aaExtent=o;const a=(0,_core_unitUtils_js__WEBPACK_IMPORTED_MODULE_4__.getMetersPerUnitForSR)(t.spatialReference),r=t.lodAt(e.tile.level).resolution*a;this.demResolution={min:r,max:r}}contains(e){const t=this.projectIfRequired(e,this.spatialReference);return null!=t&&this.containsAt(t.x,t.y)}containsAt(e,t){return (0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_5__.containsXY)(this._aaExtent,e,t)}elevationAt(e,t){if(!this.containsAt(e,t)){const n=this.extent,s=`${n.xmin}, ${n.ymin}, ${n.xmax}, ${n.ymax}`;return l.warn("#elevationAt()",`Point used to sample elevation (${e}, ${t}) is outside of the sampler extent (${s})`),this.noDataValue}return this.tile.sample(e,t)??this.noDataValue}}class u extends m{get spatialReference(){return this.extent.spatialReference}constructor(e,t,n){let i;super(),"number"==typeof t?(this.noDataValue=t,i=null):(i=t,this.noDataValue=n),this.samplers=i?e.map((e=>new c(e,i,this.noDataValue))):e;const a=this.samplers[0];if(a){this.extent=a.extent.clone();const{min:e,max:t}=a.demResolution;this.demResolution={min:e,max:t};for(let n=1;n<this.samplers.length;n++){const e=this.samplers[n];this.extent.union(e.extent),this.demResolution.min=Math.min(this.demResolution.min,e.demResolution.min),this.demResolution.max=Math.max(this.demResolution.max,e.demResolution.max)}}else this.extent=(0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_5__.toExtent)((0,_geometry_support_aaBoundingRect_js__WEBPACK_IMPORTED_MODULE_5__.create)(),i.spatialReference),this.demResolution={min:0,max:0}}elevationAt(e,t){for(const n of this.samplers)if(n.containsAt(e,t))return n.elevationAt(e,t);return l.warn("#elevationAt()",`Point used to sample elevation (${e}, ${t}) is outside of the sampler`),this.noDataValue}}function p(e,t){const n=h(e,t.spatialReference);if(!n)return null;switch(e.type){case"point":f(e,n,t);break;case"polyline":x(e,n,t);break;case"multipoint":R(e,n,t)}return e}function h(e,t){if(null==e)return null;const n=e.spatialReference;if(n.equals(t))return e;const s=(0,_geometry_support_webMercatorUtils_js__WEBPACK_IMPORTED_MODULE_6__.project)(e,t);return s||l.error(`Cannot project geometry spatial reference (wkid:${n.wkid}) to elevation sampler spatial reference (wkid:${t.wkid})`),s}function f(e,t,n){e.z=n.elevationAt(t.x,t.y)}function x(e,t,n){d.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.paths.length;i++){const o=e.paths[i],a=t.paths[i];for(let e=0;e<o.length;e++){const t=o[e],i=a[e];d.x=i[0],d.y=i[1],s&&(t[3]=t[2]),t[2]=n.elevationAt(d.x,d.y)}}e.hasZ=!0}function R(e,t,n){d.spatialReference=t.spatialReference;const s=e.hasM&&!e.hasZ;for(let i=0;i<e.points.length;i++){const o=e.points[i],a=t.points[i];d.x=a[0],d.y=a[1],s&&(o[3]=o[2]),o[2]=n.elevationAt(d.x,d.y)}e.hasZ=!0}const d=new _geometry_Point_js__WEBPACK_IMPORTED_MODULE_7__["default"];


/***/ }),

/***/ "./node_modules/@arcgis/core/layers/support/ElevationSamplerData.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationSamplerData.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationSamplerData: () => (/* binding */ t)
/* harmony export */ });
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
class t{constructor(t,h){this.data=t,this.safeWidth=.99999999*(t.width-1),this.dx=(t.width-1)/(h[2]-h[0]),this.dy=(t.width-1)/(h[3]-h[1]),this.x0=h[0],this.y1=h[3]}}


/***/ }),

/***/ "./node_modules/@arcgis/core/layers/support/ElevationTile.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@arcgis/core/layers/support/ElevationTile.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ElevationTile: () => (/* binding */ t)
/* harmony export */ });
/* harmony import */ var _ElevationSamplerData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ElevationSamplerData.js */ "./node_modules/@arcgis/core/layers/support/ElevationSamplerData.js");
/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.28/esri/copyright.txt for details.
*/
class t{constructor(t,l=null){if(this.tile=t,null!=l&&null!=t){const e=t.extent;this._samplerData=new _ElevationSamplerData_js__WEBPACK_IMPORTED_MODULE_0__.ElevationSamplerData(l,e)}}get zmin(){return null!=this._samplerData?this._samplerData.data.minValue:0}get zmax(){return null!=this._samplerData?this._samplerData.data.maxValue:0}sample(a,t){if(null==this._samplerData)return;const{safeWidth:e,data:r,dx:s,dy:n,y1:i,x0:u}=this._samplerData,{width:m,values:o,noDataValue:h}=r,p=l(n*(i-t),0,e),D=l(s*(a-u),0,e),f=Math.floor(p),c=Math.floor(D),d=f*m+c,_=d+m,x=o[d],V=o[_],g=o[d+1],v=o[_+1];if(x!==h&&V!==h&&g!==h&&v!==h){const a=D-c,t=x+(g-x)*a;return t+(V+(v-V)*a-t)*(p-f)}}}function l(a,t,l){return a<t?t:a>l?l:a}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfYXJjZ2lzX2NvcmVfbGF5ZXJzX3N1cHBvcnRfRWxldmF0aW9uUXVlcnlfanMuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNrdUIsUUFBUSxzQkFBc0IsdUZBQXVGLHNEQUFDLCtHQUErRywwQkFBMEIsU0FBUyw4QkFBOEIsU0FBUyw4QkFBOEIsNkVBQTZFLCtEQUErRCxtQkFBbUIsZ0JBQWdCLHNEQUFDLHFHQUFxRyxpR0FBaUcsc0RBQUMscUhBQXFILFNBQVMsVUFBVSw0Q0FBNEMscUJBQXFCLFNBQVMscUxBQXFMLDJCQUEyQixnQkFBZ0Isc0RBQUMscUdBQXFHLG1DQUFtQyxzREFBQyxpRUFBaUUsU0FBUyxXQUFXLGtDQUFrQyw4QkFBOEIsdUZBQXVGLHNEQUFDLCtHQUErRyxtQ0FBbUMsc0RBQUMsaUVBQWlFLFNBQVMsOEJBQThCLGdEQUFnRCwrQ0FBK0MsOEJBQThCLGlCQUFpQixjQUFjLFNBQVMsRUFBRSx5REFBeUQsb0JBQW9CLDZFQUFDLEdBQUcsZ0JBQWdCLEdBQUcsU0FBUyxJQUFJLGdFQUFDLE9BQU8sdUJBQXVCLGdGQUFnRiw0RUFBQywwREFBMEQseUNBQXlDLDhCQUE4QiwyQkFBMkIsK0VBQUMsOERBQThELGtDQUFrQyw0Q0FBNEMsNEVBQUMsa0JBQWtCLCtDQUErQywrQkFBK0Isd0RBQXdELDREQUFDLElBQUksZ0JBQWdCLFlBQVksV0FBVyxLQUFLLGFBQWEsNkVBQTZFLG9DQUFvQyxpRkFBaUYsdUNBQXVDLDBCQUEwQix5RUFBeUUsaUNBQWlDLDhCQUE4QiwwREFBMEQsNERBQUMsSUFBSSxTQUFTLHVEQUF1RCxpSEFBaUgsaUNBQWlDLEtBQUssdUNBQXVDLE1BQU0sMENBQTBDLGdEQUFnRCw2RUFBQyxHQUFHLGlDQUFpQyxHQUFHLFNBQVMsSUFBSSxnRUFBQyxvQkFBb0Isc0RBQUMsNEVBQTRFLHdCQUF3QixnQ0FBZ0Ms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QkFBNkIsTUFBTSxZQUFZLGlCQUFpQixvQkFBb0IsYUFBYSxZQUFZLHVCQUF1QixLQUFLLHlCQUF5QixxTEFBcUwsaUJBQWlCLDZFQUFDLENBQUMsMkVBQUMsMkNBQTJDLGFBQWEsaUJBQWlCLDRFQUE0RSxrRUFBa0UsRUFBRSxJQUFJLEVBQUUsZ0RBQWdELGdCQUFnQixnQ0FBZ0Msa0JBQWtCLGVBQWUscUJBQXFCLE1BQU0sd0JBQXdCLE1BQU0sMEJBQTBCLFNBQVMsZ0JBQWdCLHVCQUF1QiwyQkFBMkIsd0JBQXdCLFFBQVEsOEVBQUMsTUFBTSxxRUFBcUUsT0FBTyxpREFBaUQsT0FBTyxNQUFNLGtCQUFrQiwyQkFBMkIsa0JBQWtCLHNDQUFzQyx3QkFBd0IsWUFBWSxpQkFBaUIsS0FBSyxnQ0FBZ0MsWUFBWSxXQUFXLEtBQUssb0JBQW9CLDhEQUE4RCxVQUFVLGtCQUFrQixzQ0FBc0Msd0JBQXdCLFlBQVksa0JBQWtCLEtBQUssa0NBQWtDLDZEQUE2RCxVQUFVLFlBQVksMERBQUMsQ0FBeUg7Ozs7Ozs7Ozs7Ozs7OztBQ0p2eUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlCQUFpQiw0SUFBOEs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNKdk07QUFDQTtBQUNBO0FBQ0E7QUFDaUUsUUFBUSxzQkFBc0IsaUNBQWlDLGlCQUFpQixzQkFBc0IsMEVBQUMsT0FBTyxXQUFXLGlFQUFpRSxXQUFXLGlFQUFpRSxZQUFZLGtDQUFrQyxNQUFNLHVDQUF1QyxvQkFBb0IsK0JBQStCLG1IQUFtSCwrQkFBK0Isd0JBQXdCLCtCQUErQixrQkFBa0IscUJBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3ludmlldy8uL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2NvcmUvbGF5ZXJzL3N1cHBvcnQvRWxldmF0aW9uUXVlcnkuanMiLCJ3ZWJwYWNrOi8vc3ludmlldy8uL25vZGVfbW9kdWxlcy9AYXJjZ2lzL2NvcmUvbGF5ZXJzL3N1cHBvcnQvRWxldmF0aW9uU2FtcGxlci5qcyIsIndlYnBhY2s6Ly9zeW52aWV3Ly4vbm9kZV9tb2R1bGVzL0BhcmNnaXMvY29yZS9sYXllcnMvc3VwcG9ydC9FbGV2YXRpb25TYW1wbGVyRGF0YS5qcyIsIndlYnBhY2s6Ly9zeW52aWV3Ly4vbm9kZV9tb2R1bGVzL0BhcmNnaXMvY29yZS9sYXllcnMvc3VwcG9ydC9FbGV2YXRpb25UaWxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG5BbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuU2VlIGh0dHBzOi8vanMuYXJjZ2lzLmNvbS80LjI4L2VzcmkvY29weXJpZ2h0LnR4dCBmb3IgZGV0YWlscy5cbiovXG5pbXBvcnR7cmVzdWx0IGFzIGV9ZnJvbVwiLi4vLi4vY29yZS9hc3luY1V0aWxzLmpzXCI7aW1wb3J0IHQgZnJvbVwiLi4vLi4vY29yZS9FcnJvci5qc1wiO2ltcG9ydHthc3NlcnRJc1NvbWUgYXMgaX1mcm9tXCIuLi8uLi9jb3JlL21heWJlLmpzXCI7aW1wb3J0e3doZW5PckFib3J0IGFzIG4sdGhyb3dJZkFib3J0RXJyb3IgYXMgbH1mcm9tXCIuLi8uLi9jb3JlL3Byb21pc2VVdGlscy5qc1wiO2ltcG9ydHtnZXRNZXRlcnNQZXJVbml0Rm9yU1IgYXMgc31mcm9tXCIuLi8uLi9jb3JlL3VuaXRVdGlscy5qc1wiO2ltcG9ydCBvIGZyb21cIi4uLy4uL2dlb21ldHJ5L011bHRpcG9pbnQuanNcIjtpbXBvcnQgYSBmcm9tXCIuLi8uLi9nZW9tZXRyeS9Qb2ludC5qc1wiO2ltcG9ydCByIGZyb21cIi4uLy4uL2dlb21ldHJ5L1BvbHlsaW5lLmpzXCI7aW1wb3J0e2luaXRpYWxpemVQcm9qZWN0aW9uIGFzIGMscHJvamVjdCBhcyB1fWZyb21cIi4uLy4uL2dlb21ldHJ5L3Byb2plY3Rpb24uanNcIjtpbXBvcnR7ZnJvbUV4dGVudCBhcyBoLGNyZWF0ZSBhcyBwLGNvbnRhaW5zIGFzIG19ZnJvbVwiLi4vLi4vZ2VvbWV0cnkvc3VwcG9ydC9hYUJvdW5kaW5nUmVjdC5qc1wiO2ltcG9ydHtNdWx0aVRpbGVFbGV2YXRpb25TYW1wbGVyIGFzIGZ9ZnJvbVwiLi9FbGV2YXRpb25TYW1wbGVyLmpzXCI7aW1wb3J0e0VsZXZhdGlvblRpbGUgYXMgZH1mcm9tXCIuL0VsZXZhdGlvblRpbGUuanNcIjtpbXBvcnR7VGlsZUtleSBhcyB5fWZyb21cIi4vVGlsZUtleS5qc1wiO2NsYXNzIFR7YXN5bmMgcXVlcnlBbGwoZSxpLG4pe2lmKCEoZT1uJiZuLmlnbm9yZUludmlzaWJsZUxheWVycz9lLmZpbHRlcigoZT0+ZS52aXNpYmxlKSk6ZS5zbGljZSgpKS5sZW5ndGgpdGhyb3cgbmV3IHQoXCJlbGV2YXRpb24tcXVlcnk6aW52YWxpZC1sYXllclwiLFwiRWxldmF0aW9uIHF1ZXJpZXMgcmVxdWlyZSBhdCBsZWFzdCBvbmUgZWxldmF0aW9uIGxheWVyIHRvIGZldGNoIHRpbGVzIGZyb21cIik7Y29uc3QgbD12LmZyb21HZW9tZXRyeShpKTtsZXQgcz0hMTtuJiZuLnJldHVyblNhbXBsZUluZm98fChzPSEwKTtjb25zdCBvPXsuLi5SLC4uLm4scmV0dXJuU2FtcGxlSW5mbzohMH0sYT1hd2FpdCB0aGlzLnF1ZXJ5KGVbZS5sZW5ndGgtMV0sbCxvKSxyPWF3YWl0IHRoaXMuX3F1ZXJ5QWxsQ29udGludWUoZSxhLG8pO3JldHVybiByLmdlb21ldHJ5PXIuZ2VvbWV0cnkuZXhwb3J0KCkscyYmZGVsZXRlIHIuc2FtcGxlSW5mbyxyfWFzeW5jIHF1ZXJ5KGUsaSxuKXtpZighZSl0aHJvdyBuZXcgdChcImVsZXZhdGlvbi1xdWVyeTppbnZhbGlkLWxheWVyXCIsXCJFbGV2YXRpb24gcXVlcmllcyByZXF1aXJlIGFuIGVsZXZhdGlvbiBsYXllciB0byBmZXRjaCB0aWxlcyBmcm9tXCIpO2lmKCFpfHwhKGkgaW5zdGFuY2VvZiB2KSYmXCJwb2ludFwiIT09aS50eXBlJiZcIm11bHRpcG9pbnRcIiE9PWkudHlwZSYmXCJwb2x5bGluZVwiIT09aS50eXBlKXRocm93IG5ldyB0KFwiZWxldmF0aW9uLXF1ZXJ5OmludmFsaWQtZ2VvbWV0cnlcIixcIk9ubHkgcG9pbnQsIHBvbHlsaW5lIGFuZCBtdWx0aXBvaW50IGdlb21ldHJpZXMgY2FuIGJlIHVzZWQgdG8gcXVlcnkgZWxldmF0aW9uXCIpO2NvbnN0IGw9ey4uLlIsLi4ubn0scz1uZXcgeChlLGkuc3BhdGlhbFJlZmVyZW5jZSxsKSxvPWwuc2lnbmFsO3JldHVybiBhd2FpdCBlLmxvYWQoe3NpZ25hbDpvfSksYXdhaXQgdGhpcy5fY3JlYXRlR2VvbWV0cnlEZXNjcmlwdG9yKHMsaSxvKSxhd2FpdCB0aGlzLl9zZWxlY3RUaWxlcyhzLG8pLGF3YWl0IHRoaXMuX3BvcHVsYXRlRWxldmF0aW9uVGlsZXMocyxvKSx0aGlzLl9zYW1wbGVHZW9tZXRyeVdpdGhFbGV2YXRpb24ocyksdGhpcy5fY3JlYXRlUXVlcnlSZXN1bHQocyxvKX1hc3luYyBjcmVhdGVTYW1wbGVyKGUsaSxuKXtpZighZSl0aHJvdyBuZXcgdChcImVsZXZhdGlvbi1xdWVyeTppbnZhbGlkLWxheWVyXCIsXCJFbGV2YXRpb24gcXVlcmllcyByZXF1aXJlIGFuIGVsZXZhdGlvbiBsYXllciB0byBmZXRjaCB0aWxlcyBmcm9tXCIpO2lmKCFpfHxcImV4dGVudFwiIT09aS50eXBlKXRocm93IG5ldyB0KFwiZWxldmF0aW9uLXF1ZXJ5OmludmFsaWQtZXh0ZW50XCIsXCJJbnZhbGlkIG9yIHVuZGVmaW5lZCBleHRlbnRcIik7Y29uc3QgbD17Li4uUiwuLi5ufTtyZXR1cm4gdGhpcy5fY3JlYXRlU2FtcGxlcihlLGksbCl9YXN5bmMgY3JlYXRlU2FtcGxlckFsbChlLGksbil7aWYoIShlPW4mJm4uaWdub3JlSW52aXNpYmxlTGF5ZXJzP2UuZmlsdGVyKChlPT5lLnZpc2libGUpKTplLnNsaWNlKCkpLmxlbmd0aCl0aHJvdyBuZXcgdChcImVsZXZhdGlvbi1xdWVyeTppbnZhbGlkLWxheWVyXCIsXCJFbGV2YXRpb24gcXVlcmllcyByZXF1aXJlIGF0IGxlYXN0IG9uZSBlbGV2YXRpb24gbGF5ZXIgdG8gZmV0Y2ggdGlsZXMgZnJvbVwiKTtpZighaXx8XCJleHRlbnRcIiE9PWkudHlwZSl0aHJvdyBuZXcgdChcImVsZXZhdGlvbi1xdWVyeTppbnZhbGlkLWV4dGVudFwiLFwiSW52YWxpZCBvciB1bmRlZmluZWQgZXh0ZW50XCIpO2NvbnN0IGw9ey4uLlIsLi4ubixyZXR1cm5TYW1wbGVJbmZvOiEwfSxzPWF3YWl0IHRoaXMuX2NyZWF0ZVNhbXBsZXIoZVtlLmxlbmd0aC0xXSxpLGwpO3JldHVybiB0aGlzLl9jcmVhdGVTYW1wbGVyQWxsQ29udGludWUoZSxpLHMsbCl9YXN5bmMgX2NyZWF0ZVNhbXBsZXIoZSx0LGksbil7Y29uc3QgbD1pLnNpZ25hbDthd2FpdCBlLmxvYWQoe3NpZ25hbDpsfSk7Y29uc3Qgcz10LnNwYXRpYWxSZWZlcmVuY2Usbz1lLnRpbGVJbmZvLnNwYXRpYWxSZWZlcmVuY2U7cy5lcXVhbHMobyl8fChhd2FpdCBjKFt7c291cmNlOnMsZGVzdDpvfV0se3NpZ25hbDpsfSksdD11KHQsbykpO2NvbnN0IGE9bmV3IF8oZSx0LGksbik7cmV0dXJuIGF3YWl0IHRoaXMuX3NlbGVjdFRpbGVzKGEsbCksYXdhaXQgdGhpcy5fcG9wdWxhdGVFbGV2YXRpb25UaWxlcyhhLGwpLG5ldyBmKGEuZWxldmF0aW9uVGlsZXMsYS5sYXllci50aWxlSW5mbyxhLm9wdGlvbnMubm9EYXRhVmFsdWUpfWFzeW5jIF9jcmVhdGVTYW1wbGVyQWxsQ29udGludWUoZSx0LGksbil7aWYoZS5wb3AoKSwhZS5sZW5ndGgpcmV0dXJuIGk7Y29uc3QgbD1pLnNhbXBsZXJzLm1hcCgoZT0+aChlLmV4dGVudCkpKSxzPWF3YWl0IHRoaXMuX2NyZWF0ZVNhbXBsZXIoZVtlLmxlbmd0aC0xXSx0LG4sbCk7aWYoMD09PXMuc2FtcGxlcnMubGVuZ3RoKXJldHVybiBpO2NvbnN0IG89aS5zYW1wbGVycy5jb25jYXQocy5zYW1wbGVycyksYT1uZXcgZihvLG4ubm9EYXRhVmFsdWUpO3JldHVybiB0aGlzLl9jcmVhdGVTYW1wbGVyQWxsQ29udGludWUoZSx0LGEsbil9YXN5bmMgX3F1ZXJ5QWxsQ29udGludWUoZSx0LG4pe2NvbnN0IGw9ZS5wb3AoKSxzPXQuZ2VvbWV0cnkuY29vcmRpbmF0ZXMsbz10LnNhbXBsZUluZm87aShvKTtjb25zdCBhPVtdLHI9W107Zm9yKGxldCBpPTA7aTxzLmxlbmd0aDtpKyspe2NvbnN0IHQ9b1tpXTt0LmRlbVJlc29sdXRpb24+PTA/dC5zb3VyY2V8fCh0LnNvdXJjZT1sKTplLmxlbmd0aCYmKGEucHVzaChzW2ldKSxyLnB1c2goaSkpfWlmKCFlLmxlbmd0aHx8MD09PWEubGVuZ3RoKXJldHVybiB0O2NvbnN0IGM9dC5nZW9tZXRyeS5jbG9uZShhKSx1PWF3YWl0IHRoaXMucXVlcnkoZVtlLmxlbmd0aC0xXSxjLG4pLGg9dS5zYW1wbGVJbmZvO2lmKCFoKXRocm93IG5ldyBFcnJvcihcIm5vIHNhbXBsZUluZm9cIik7cmV0dXJuIHIuZm9yRWFjaCgoKGUsdCk9PntzW2VdLno9dS5nZW9tZXRyeS5jb29yZGluYXRlc1t0XS56LG9bZV0uZGVtUmVzb2x1dGlvbj1oW3RdLmRlbVJlc29sdXRpb259KSksdGhpcy5fcXVlcnlBbGxDb250aW51ZShlLHQsbil9YXN5bmMgX2NyZWF0ZVF1ZXJ5UmVzdWx0KGUsdCl7Y29uc3Qgbj1hd2FpdCBlLmdlb21ldHJ5LnByb2plY3QoZS5vdXRTcGF0aWFsUmVmZXJlbmNlLHQpO2kobik7Y29uc3QgbD17Z2VvbWV0cnk6bi5leHBvcnQoKSxub0RhdGFWYWx1ZTplLm9wdGlvbnMubm9EYXRhVmFsdWV9O3JldHVybiBlLm9wdGlvbnMucmV0dXJuU2FtcGxlSW5mbyYmKGwuc2FtcGxlSW5mbz10aGlzLl9leHRyYWN0U2FtcGxlSW5mbyhlKSksZS5nZW9tZXRyeS5jb29yZGluYXRlcy5mb3JFYWNoKChlPT57ZS50aWxlPW51bGwsZS5lbGV2YXRpb25UaWxlPW51bGx9KSksbH1hc3luYyBfY3JlYXRlR2VvbWV0cnlEZXNjcmlwdG9yKGUsaSxuKXtsZXQgbDtjb25zdCBzPWUubGF5ZXIudGlsZUluZm8uc3BhdGlhbFJlZmVyZW5jZTtpZihpIGluc3RhbmNlb2Ygdj9sPWF3YWl0IGkucHJvamVjdChzLG4pOihhd2FpdCBjKFt7c291cmNlOmkuc3BhdGlhbFJlZmVyZW5jZSxkZXN0OnN9XSx7c2lnbmFsOm59KSxsPXUoaSxzKSksIWwpdGhyb3cgbmV3IHQoXCJlbGV2YXRpb24tcXVlcnk6c3BhdGlhbC1yZWZlcmVuY2UtbWlzbWF0Y2hcIixgQ2Fubm90IHF1ZXJ5IGVsZXZhdGlvbiBpbiAnJHtpLnNwYXRpYWxSZWZlcmVuY2Uud2tpZH0nIG9uIGFuIGVsZXZhdGlvbiBzZXJ2aWNlIGluICcke3Mud2tpZH0nYCk7ZS5nZW9tZXRyeT12LmZyb21HZW9tZXRyeShsKX1hc3luYyBfc2VsZWN0VGlsZXMoZSxpKXtcImdlb21ldHJ5XCI9PT1lLnR5cGUmJnRoaXMuX3ByZXNlbGVjdE91dHNpZGVMYXllckV4dGVudChlKTtjb25zdCBuPWUub3B0aW9ucy5kZW1SZXNvbHV0aW9uO2lmKFwibnVtYmVyXCI9PXR5cGVvZiBuKXRoaXMuX3NlbGVjdFRpbGVzQ2xvc2VzdFJlc29sdXRpb24oZSxuKTtlbHNlIGlmKFwiZmluZXN0LWNvbnRpZ3VvdXNcIj09PW4pYXdhaXQgdGhpcy5fc2VsZWN0VGlsZXNGaW5lc3RDb250aWd1b3VzKGUsaSk7ZWxzZXtpZihcImF1dG9cIiE9PW4pdGhyb3cgbmV3IHQoXCJlbGV2YXRpb24tcXVlcnk6aW52YWxpZC1kZW0tcmVzb2x1dGlvblwiLGBJbnZhbGlkIGRlbSByZXNvbHV0aW9uIHZhbHVlICcke259JywgZXhwZWN0ZWQgYSBudW1iZXIsIFwiZmluZXN0LWNvbnRpZ3VvdXNcIiBvciBcImF1dG9cImApO2F3YWl0IHRoaXMuX3NlbGVjdFRpbGVzQXV0byhlLGkpfX1fcHJlc2VsZWN0T3V0c2lkZUxheWVyRXh0ZW50KGUpe2lmKG51bGw9PWUubGF5ZXIuZnVsbEV4dGVudClyZXR1cm47Y29uc3QgdD1uZXcgZChudWxsKTt0LnNhbXBsZT0oKT0+ZS5vcHRpb25zLm5vRGF0YVZhbHVlLGUub3V0c2lkZUV4dGVudFRpbGU9dDtjb25zdCBpPWUubGF5ZXIuZnVsbEV4dGVudDtlLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2goKGU9Pntjb25zdCBuPWUueCxsPWUueTsobjxpLnhtaW58fG4+aS54bWF4fHxsPGkueW1pbnx8bD5pLnltYXgpJiYoZS5lbGV2YXRpb25UaWxlPXQpfSkpfV9zZWxlY3RUaWxlc0Nsb3Nlc3RSZXNvbHV0aW9uKGUsdCl7Y29uc3QgaT10aGlzLl9maW5kTmVhcmVzdERlbVJlc29sdXRpb25MT0RJbmRleChlLHQpO2Uuc2VsZWN0VGlsZXNBdExPRChpKX1fZmluZE5lYXJlc3REZW1SZXNvbHV0aW9uTE9ESW5kZXgoZSx0KXtjb25zdHt0aWxlSW5mbzppLHRpbGVtYXBDYWNoZTpufT1lLmxheWVyLGw9dC9zKGkuc3BhdGlhbFJlZmVyZW5jZSksbz1xKGksbik7bGV0IGE9b1swXSxyPTA7Zm9yKGxldCBzPTE7czxvLmxlbmd0aDtzKyspe2NvbnN0IGU9b1tzXTtNYXRoLmFicyhlLnJlc29sdXRpb24tbCk8TWF0aC5hYnMoYS5yZXNvbHV0aW9uLWwpJiYoYT1lLHI9cyl9cmV0dXJuIHJ9YXN5bmMgX3NlbGVjdFRpbGVzRmluZXN0Q29udGlndW91cyhlLHQpe2NvbnN0e3RpbGVJbmZvOmksdGlsZW1hcENhY2hlOm59PWUubGF5ZXIsbD1FKGksbixlLm9wdGlvbnMubWluRGVtUmVzb2x1dGlvbik7YXdhaXQgdGhpcy5fc2VsZWN0VGlsZXNGaW5lc3RDb250aWd1b3VzQXQoZSxsLHQpfWFzeW5jIF9zZWxlY3RUaWxlc0ZpbmVzdENvbnRpZ3VvdXNBdChlLGkscyl7Y29uc3Qgbz1lLmxheWVyO2lmKGUuc2VsZWN0VGlsZXNBdExPRChpKSxpPDApcmV0dXJuO2NvbnN0IGE9by50aWxlbWFwQ2FjaGUscj1lLmdldFRpbGVzVG9GZXRjaCgpO3RyeXtpZihhJiYhSShhKSlhd2FpdCBuKFByb21pc2UuYWxsKHIubWFwKChlPT5hLmZldGNoQXZhaWxhYmlsaXR5KGUubGV2ZWwsZS5yb3csZS5jb2wse3NpZ25hbDpzfSkpKSkscyk7ZWxzZSBpZihhd2FpdCB0aGlzLl9wb3B1bGF0ZUVsZXZhdGlvblRpbGVzKGUscyksIWUuYWxsRWxldmF0aW9uVGlsZXNGZXRjaGVkKCkpdGhyb3cgZS5jbGVhckVsZXZhdGlvblRpbGVzKCksbmV3IHQoXCJlbGV2YXRpb24tcXVlcnk6aGFzLXVuYXZhaWxhYmxlLXRpbGVzXCIpfWNhdGNoKGMpe2woYyksYXdhaXQgdGhpcy5fc2VsZWN0VGlsZXNGaW5lc3RDb250aWd1b3VzQXQoZSxpLTEscyl9fWFzeW5jIF9wb3B1bGF0ZUVsZXZhdGlvblRpbGVzKGUsdCl7Y29uc3QgaT1lLmdldFRpbGVzVG9GZXRjaCgpLGw9e30scz1lLm9wdGlvbnMuY2FjaGUsbz1lLm9wdGlvbnMubm9EYXRhVmFsdWUsYT1pLm1hcCgoYXN5bmMgaT0+e2lmKG51bGw9PWkuaWQpcmV0dXJuO2NvbnN0IG49YCR7ZS5sYXllci51aWR9OiR7aS5pZH06JHtvfWAsYT1udWxsIT1zP3MuZ2V0KG4pOm51bGwscj1udWxsIT1hP2E6YXdhaXQgZS5sYXllci5mZXRjaFRpbGUoaS5sZXZlbCxpLnJvdyxpLmNvbCx7bm9EYXRhVmFsdWU6byxzaWduYWw6dH0pO251bGwhPXMmJnMucHV0KG4sciksbFtpLmlkXT1uZXcgZChpLHIpfSkpO2F3YWl0IG4oUHJvbWlzZS5hbGxTZXR0bGVkKGEpLHQpLGUucG9wdWxhdGVFbGV2YXRpb25UaWxlcyhsKX1hc3luYyBfc2VsZWN0VGlsZXNBdXRvKHQsaSl7dGhpcy5fc2VsZWN0VGlsZXNBdXRvRmluZXN0KHQpLHRoaXMuX3JlZHVjZVRpbGVzRm9yTWF4aW11bVJlcXVlc3RzKHQpO2NvbnN0IHM9dC5sYXllci50aWxlbWFwQ2FjaGU7aWYoIXN8fEkocykpcmV0dXJuIHRoaXMuX3NlbGVjdFRpbGVzQXV0b1ByZWZldGNoVXBzYW1wbGUodCxpKTtjb25zdCBvPXQuZ2V0VGlsZXNUb0ZldGNoKCksYT17fSxyPW8ubWFwKChhc3luYyB0PT57Y29uc3Qgbj1uZXcgeShudWxsLDAsMCwwLHAoKSksbz1hd2FpdCBlKHMuZmV0Y2hBdmFpbGFiaWxpdHlVcHNhbXBsZSh0LmxldmVsLHQucm93LHQuY29sLG4se3NpZ25hbDppfSkpOyExIT09by5vaz9udWxsIT10LmlkJiYoYVt0LmlkXT1uKTpsKG8uZXJyb3IpfSkpO2F3YWl0IG4oUHJvbWlzZS5hbGwociksaSksdC5yZW1hcFRpbGVzKGEpfV9yZWR1Y2VUaWxlc0Zvck1heGltdW1SZXF1ZXN0cyhlKXtjb25zdCB0PWUubGF5ZXIudGlsZUluZm87bGV0IGk9MDtjb25zdCBuPXt9LGw9ZT0+e251bGwhPWUuaWQmJihlLmlkIGluIG4/bltlLmlkXSsrOihuW2UuaWRdPTEsaSsrKSl9LHM9ZT0+e2lmKG51bGw9PWUuaWQpcmV0dXJuO2NvbnN0IHQ9bltlLmlkXTsxPT09dD8oZGVsZXRlIG5bZS5pZF0saS0tKTpuW2UuaWRdPXQtMX07ZS5mb3JFYWNoVGlsZVRvRmV0Y2gobCxzKTtsZXQgbz0hMDtmb3IoO28mJihvPSExLGUuZm9yRWFjaFRpbGVUb0ZldGNoKChuPT57aTw9ZS5vcHRpb25zLm1heGltdW1BdXRvVGlsZVJlcXVlc3RzfHwocyhuKSx0LnVwc2FtcGxlVGlsZShuKSYmKG89ITApLGwobikpfSkscyksbyk7KTt9X3NlbGVjdFRpbGVzQXV0b0ZpbmVzdChlKXtjb25zdHt0aWxlSW5mbzp0LHRpbGVtYXBDYWNoZTppfT1lLmxheWVyLG49RSh0LGksZS5vcHRpb25zLm1pbkRlbVJlc29sdXRpb24pO2Uuc2VsZWN0VGlsZXNBdExPRChuLGUub3B0aW9ucy5tYXhpbXVtQXV0b1RpbGVSZXF1ZXN0cyl9YXN5bmMgX3NlbGVjdFRpbGVzQXV0b1ByZWZldGNoVXBzYW1wbGUoZSx0KXtjb25zdCBpPWUubGF5ZXIudGlsZUluZm87YXdhaXQgdGhpcy5fcG9wdWxhdGVFbGV2YXRpb25UaWxlcyhlLHQpO2xldCBuPSExO2UuZm9yRWFjaFRpbGVUb0ZldGNoKCgoZSx0KT0+e2kudXBzYW1wbGVUaWxlKGUpP249ITA6dCgpfSkpLG4mJmF3YWl0IHRoaXMuX3NlbGVjdFRpbGVzQXV0b1ByZWZldGNoVXBzYW1wbGUoZSx0KX1fc2FtcGxlR2VvbWV0cnlXaXRoRWxldmF0aW9uKGUpe2UuZ2VvbWV0cnkuY29vcmRpbmF0ZXMuZm9yRWFjaCgodD0+e2NvbnN0IGk9dC5lbGV2YXRpb25UaWxlO2xldCBuPWUub3B0aW9ucy5ub0RhdGFWYWx1ZTtpZihpKXtjb25zdCBlPWkuc2FtcGxlKHQueCx0LnkpO251bGwhPWU/bj1lOnQuZWxldmF0aW9uVGlsZT1udWxsfXQuej1ufSkpfV9leHRyYWN0U2FtcGxlSW5mbyhlKXtjb25zdCB0PWUubGF5ZXIudGlsZUluZm8saT1zKHQuc3BhdGlhbFJlZmVyZW5jZSk7cmV0dXJuIGUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMubWFwKChuPT57bGV0IGw9LTE7aWYobi5lbGV2YXRpb25UaWxlJiZuLmVsZXZhdGlvblRpbGUhPT1lLm91dHNpZGVFeHRlbnRUaWxlKXtsPXQubG9kQXQobi5lbGV2YXRpb25UaWxlLnRpbGUubGV2ZWwpLnJlc29sdXRpb24qaX1yZXR1cm57ZGVtUmVzb2x1dGlvbjpsfX0pKX19Y2xhc3MgdntleHBvcnQoKXtyZXR1cm4gdGhpcy5fZXhwb3J0ZXIodGhpcy5jb29yZGluYXRlcyx0aGlzLnNwYXRpYWxSZWZlcmVuY2UpfWNsb25lKGUpe2NvbnN0IHQ9bmV3IHY7cmV0dXJuIHQuZ2VvbWV0cnk9dGhpcy5nZW9tZXRyeSx0LnNwYXRpYWxSZWZlcmVuY2U9dGhpcy5zcGF0aWFsUmVmZXJlbmNlLHQuY29vcmRpbmF0ZXM9ZXx8dGhpcy5jb29yZGluYXRlcy5tYXAoKGU9PmUuY2xvbmUoKSkpLHQuX2V4cG9ydGVyPXRoaXMuX2V4cG9ydGVyLHR9YXN5bmMgcHJvamVjdChlLHQpe2lmKHRoaXMuc3BhdGlhbFJlZmVyZW5jZS5lcXVhbHMoZSkpcmV0dXJuIHRoaXMuY2xvbmUoKTthd2FpdCBjKFt7c291cmNlOnRoaXMuc3BhdGlhbFJlZmVyZW5jZSxkZXN0OmV9XSx7c2lnbmFsOnR9KTtjb25zdCBpPW5ldyBvKHtzcGF0aWFsUmVmZXJlbmNlOnRoaXMuc3BhdGlhbFJlZmVyZW5jZSxwb2ludHM6dGhpcy5jb29yZGluYXRlcy5tYXAoKGU9PltlLngsZS55XSkpfSksbj11KGksZSk7aWYoIW4pcmV0dXJuIG51bGw7Y29uc3QgbD10aGlzLmNvb3JkaW5hdGVzLm1hcCgoKGUsdCk9Pntjb25zdCBpPWUuY2xvbmUoKSxsPW4ucG9pbnRzW3RdO3JldHVybiBpLng9bFswXSxpLnk9bFsxXSxpfSkpLHM9dGhpcy5jbG9uZShsKTtyZXR1cm4gcy5zcGF0aWFsUmVmZXJlbmNlPWUsc31zdGF0aWMgZnJvbUdlb21ldHJ5KGUpe2NvbnN0IHQ9bmV3IHY7aWYodC5nZW9tZXRyeT1lLHQuc3BhdGlhbFJlZmVyZW5jZT1lLnNwYXRpYWxSZWZlcmVuY2UsZSBpbnN0YW5jZW9mIHYpdC5jb29yZGluYXRlcz1lLmNvb3JkaW5hdGVzLm1hcCgoZT0+ZS5jbG9uZSgpKSksdC5fZXhwb3J0ZXI9KHQsaSk9Pntjb25zdCBuPWUuY2xvbmUodCk7cmV0dXJuIG4uc3BhdGlhbFJlZmVyZW5jZT1pLG59O2Vsc2Ugc3dpdGNoKGUudHlwZSl7Y2FzZVwicG9pbnRcIjp7Y29uc3QgaT1lLHtoYXNaOm4saGFzTTpsfT1pO3QuY29vcmRpbmF0ZXM9biYmbD9bbmV3IHcoaS54LGkueSxpLnosaS5tKV06bj9bbmV3IHcoaS54LGkueSxpLnopXTpsP1tuZXcgdyhpLngsaS55LG51bGwsaS5tKV06W25ldyB3KGkueCxpLnkpXSx0Ll9leHBvcnRlcj0odCxpKT0+ZS5oYXNNP25ldyBhKHRbMF0ueCx0WzBdLnksdFswXS56LHRbMF0ubSxpKTpuZXcgYSh0WzBdLngsdFswXS55LHRbMF0ueixpKTticmVha31jYXNlXCJtdWx0aXBvaW50XCI6e2NvbnN0IGk9ZSx7aGFzWjpuLGhhc006bH09aTt0LmNvb3JkaW5hdGVzPW4mJmw/aS5wb2ludHMubWFwKChlPT5uZXcgdyhlWzBdLGVbMV0sZVsyXSxlWzNdKSkpOm4/aS5wb2ludHMubWFwKChlPT5uZXcgdyhlWzBdLGVbMV0sZVsyXSkpKTpsP2kucG9pbnRzLm1hcCgoZT0+bmV3IHcoZVswXSxlWzFdLG51bGwsZVsyXSkpKTppLnBvaW50cy5tYXAoKGU9Pm5ldyB3KGVbMF0sZVsxXSkpKSx0Ll9leHBvcnRlcj0odCxpKT0+ZS5oYXNNP25ldyBvKHtwb2ludHM6dC5tYXAoKGU9PltlLngsZS55LGUueixlLm1dKSksaGFzWjohMCxoYXNNOiEwLHNwYXRpYVJlZmVyZW5jZTppfSk6bmV3IG8odC5tYXAoKGU9PltlLngsZS55LGUuel0pKSxpKTticmVha31jYXNlXCJwb2x5bGluZVwiOntjb25zdCBpPWUsbj1bXSxsPVtdLHtoYXNaOnMsaGFzTTpvfT1lO2xldCBhPTA7Zm9yKGNvbnN0IGUgb2YgaS5wYXRocylpZihsLnB1c2goW2EsYStlLmxlbmd0aF0pLGErPWUubGVuZ3RoLHMmJm8pZm9yKGNvbnN0IHQgb2YgZSluLnB1c2gobmV3IHcodFswXSx0WzFdLHRbMl0sdFszXSkpO2Vsc2UgaWYocylmb3IoY29uc3QgdCBvZiBlKW4ucHVzaChuZXcgdyh0WzBdLHRbMV0sdFsyXSkpO2Vsc2UgaWYobylmb3IoY29uc3QgdCBvZiBlKW4ucHVzaChuZXcgdyh0WzBdLHRbMV0sbnVsbCx0WzJdKSk7ZWxzZSBmb3IoY29uc3QgdCBvZiBlKW4ucHVzaChuZXcgdyh0WzBdLHRbMV0pKTt0LmNvb3JkaW5hdGVzPW4sdC5fZXhwb3J0ZXI9KHQsaSk9Pntjb25zdCBuPWUuaGFzTT90Lm1hcCgoZT0+W2UueCxlLnksZS56LGUubV0pKTp0Lm1hcCgoZT0+W2UueCxlLnksZS56XSkpLHM9bC5tYXAoKGU9Pm4uc2xpY2UoZVswXSxlWzFdKSkpO3JldHVybiBuZXcgcih7cGF0aHM6cyxoYXNNOmUuaGFzTSxoYXNaOiEwLHNwYXRpYWxSZWZlcmVuY2U6aX0pfTticmVha319cmV0dXJuIHR9fWNsYXNzIHd7Y29uc3RydWN0b3IoZSx0LGk9bnVsbCxuPW51bGwsbD1udWxsLHM9bnVsbCl7dGhpcy54PWUsdGhpcy55PXQsdGhpcy56PWksdGhpcy5tPW4sdGhpcy50aWxlPWwsdGhpcy5lbGV2YXRpb25UaWxlPXN9Y2xvbmUoKXtyZXR1cm4gbmV3IHcodGhpcy54LHRoaXMueSx0aGlzLnosdGhpcy5tKX19Y2xhc3MgZ3tjb25zdHJ1Y3RvcihlLHQpe3RoaXMubGF5ZXI9ZSx0aGlzLm9wdGlvbnM9dH19Y2xhc3MgeCBleHRlbmRzIGd7Y29uc3RydWN0b3IoZSx0LGkpe3N1cGVyKGUsaSksdGhpcy5vdXRTcGF0aWFsUmVmZXJlbmNlPXQsdGhpcy50eXBlPVwiZ2VvbWV0cnlcIn1zZWxlY3RUaWxlc0F0TE9EKGUpe2lmKGU8MCl0aGlzLmdlb21ldHJ5LmNvb3JkaW5hdGVzLmZvckVhY2goKGU9PmUudGlsZT1udWxsKSk7ZWxzZXtjb25zdHt0aWxlSW5mbzp0LHRpbGVtYXBDYWNoZTppfT10aGlzLmxheWVyLG49cSh0LGkpW2VdLmxldmVsO3RoaXMuZ2VvbWV0cnkuY29vcmRpbmF0ZXMuZm9yRWFjaCgoZT0+ZS50aWxlPXQudGlsZUF0KG4sZS54LGUueSkpKX19YWxsRWxldmF0aW9uVGlsZXNGZXRjaGVkKCl7cmV0dXJuIXRoaXMuZ2VvbWV0cnkuY29vcmRpbmF0ZXMuc29tZSgoZT0+IWUuZWxldmF0aW9uVGlsZSkpfWNsZWFyRWxldmF0aW9uVGlsZXMoKXtmb3IoY29uc3QgZSBvZiB0aGlzLmdlb21ldHJ5LmNvb3JkaW5hdGVzKWUuZWxldmF0aW9uVGlsZSE9PXRoaXMub3V0c2lkZUV4dGVudFRpbGUmJihlLmVsZXZhdGlvblRpbGU9bnVsbCl9cG9wdWxhdGVFbGV2YXRpb25UaWxlcyhlKXtmb3IoY29uc3QgdCBvZiB0aGlzLmdlb21ldHJ5LmNvb3JkaW5hdGVzKSF0LmVsZXZhdGlvblRpbGUmJnQudGlsZT8uaWQmJih0LmVsZXZhdGlvblRpbGU9ZVt0LnRpbGUuaWRdKX1yZW1hcFRpbGVzKGUpe2Zvcihjb25zdCB0IG9mIHRoaXMuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpe2NvbnN0IGk9dC50aWxlPy5pZDt0LnRpbGU9aT9lW2ldOm51bGx9fWdldFRpbGVzVG9GZXRjaCgpe2NvbnN0IGU9e30sdD1bXTtmb3IoY29uc3QgaSBvZiB0aGlzLmdlb21ldHJ5LmNvb3JkaW5hdGVzKXtjb25zdCBuPWkudGlsZTtpZighbiljb250aW51ZTtjb25zdCBsPWkudGlsZT8uaWQ7aS5lbGV2YXRpb25UaWxlfHwhbHx8ZVtsXXx8KGVbbF09bix0LnB1c2gobikpfXJldHVybiB0fWZvckVhY2hUaWxlVG9GZXRjaChlKXtmb3IoY29uc3QgdCBvZiB0aGlzLmdlb21ldHJ5LmNvb3JkaW5hdGVzKXQudGlsZSYmIXQuZWxldmF0aW9uVGlsZSYmZSh0LnRpbGUsKCgpPT57dC50aWxlPW51bGx9KSl9fWNsYXNzIF8gZXh0ZW5kcyBne2NvbnN0cnVjdG9yKGUsdCxpLG4pe3N1cGVyKGUsaSksdGhpcy50eXBlPVwiZXh0ZW50XCIsdGhpcy5lbGV2YXRpb25UaWxlcz1bXSx0aGlzLl9jYW5kaWRhdGVUaWxlcz1bXSx0aGlzLl9mZXRjaGVkQ2FuZGlkYXRlcz1uZXcgU2V0LHRoaXMuZXh0ZW50PXQuaW50ZXJzZWN0aW9uKGUuZnVsbEV4dGVudCksdGhpcy5tYXNrRXh0ZW50cz1ufXNlbGVjdFRpbGVzQXRMT0QoZSx0KXtjb25zdCBpPXRoaXMuX21heGltdW1Mb2RGb3JSZXF1ZXN0cyh0KSxuPU1hdGgubWluKGksZSk7bjwwP3RoaXMuX2NhbmRpZGF0ZVRpbGVzLmxlbmd0aD0wOnRoaXMuX3NlbGVjdENhbmRpZGF0ZVRpbGVzQ292ZXJpbmdFeHRlbnRBdChuKX1fbWF4aW11bUxvZEZvclJlcXVlc3RzKGUpe2NvbnN0e3RpbGVJbmZvOnQsdGlsZW1hcENhY2hlOml9PXRoaXMubGF5ZXIsbj1xKHQsaSk7aWYoIWUpcmV0dXJuIG4ubGVuZ3RoLTE7Y29uc3QgbD10aGlzLmV4dGVudDtpZihudWxsPT1sKXJldHVybi0xO2ZvcihsZXQgcz1uLmxlbmd0aC0xO3M+PTA7cy0tKXtjb25zdCBpPW5bc10sbz1pLnJlc29sdXRpb24qdC5zaXplWzBdLGE9aS5yZXNvbHV0aW9uKnQuc2l6ZVsxXTtpZihNYXRoLmNlaWwobC53aWR0aC9vKSpNYXRoLmNlaWwobC5oZWlnaHQvYSk8PWUpcmV0dXJuIHN9cmV0dXJuLTF9YWxsRWxldmF0aW9uVGlsZXNGZXRjaGVkKCl7cmV0dXJuIHRoaXMuX2NhbmRpZGF0ZVRpbGVzLmxlbmd0aD09PXRoaXMuZWxldmF0aW9uVGlsZXMubGVuZ3RofWNsZWFyRWxldmF0aW9uVGlsZXMoKXt0aGlzLmVsZXZhdGlvblRpbGVzLmxlbmd0aD0wLHRoaXMuX2ZldGNoZWRDYW5kaWRhdGVzLmNsZWFyKCl9cG9wdWxhdGVFbGV2YXRpb25UaWxlcyhlKXtmb3IoY29uc3QgdCBvZiB0aGlzLl9jYW5kaWRhdGVUaWxlcyl7Y29uc3QgaT10LmlkJiZlW3QuaWRdO2kmJih0aGlzLl9mZXRjaGVkQ2FuZGlkYXRlcy5hZGQodCksdGhpcy5lbGV2YXRpb25UaWxlcy5wdXNoKGkpKX19cmVtYXBUaWxlcyhlKXt0aGlzLl9jYW5kaWRhdGVUaWxlcz10aGlzLl91bmlxdWVOb25PdmVybGFwcGluZ1RpbGVzKHRoaXMuX2NhbmRpZGF0ZVRpbGVzLm1hcCgodD0+ZVt0LmlkXSkpKX1nZXRUaWxlc1RvRmV0Y2goKXtyZXR1cm4gdGhpcy5fY2FuZGlkYXRlVGlsZXN9Zm9yRWFjaFRpbGVUb0ZldGNoKGUsdCl7Y29uc3QgaT10aGlzLl9jYW5kaWRhdGVUaWxlczt0aGlzLl9jYW5kaWRhdGVUaWxlcz1bXSxpLmZvckVhY2goKGk9PntpZih0aGlzLl9mZXRjaGVkQ2FuZGlkYXRlcy5oYXMoaSkpcmV0dXJuIHZvaWQodCYmdChpKSk7bGV0IG49ITE7ZShpLCgoKT0+bj0hMCkpLG4/dCYmdChpKTp0aGlzLl9jYW5kaWRhdGVUaWxlcy5wdXNoKGkpfSkpLHRoaXMuX2NhbmRpZGF0ZVRpbGVzPXRoaXMuX3VuaXF1ZU5vbk92ZXJsYXBwaW5nVGlsZXModGhpcy5fY2FuZGlkYXRlVGlsZXMsdCl9X3VuaXF1ZU5vbk92ZXJsYXBwaW5nVGlsZXMoZSx0KXtjb25zdCBpPXt9LG49W107Zm9yKGNvbnN0IHMgb2YgZSl7Y29uc3QgZT1zLmlkO2UmJiFpW2VdPyhpW2VdPXMsbi5wdXNoKHMpKTp0JiZ0KHMpfWNvbnN0IGw9bi5zb3J0KCgoZSx0KT0+ZS5sZXZlbC10LmxldmVsKSk7cmV0dXJuIGwuZmlsdGVyKCgoZSxpKT0+e2ZvcihsZXQgbj0wO248aTtuKyspe2NvbnN0IGk9bFtuXS5leHRlbnQ7aWYoaSYmZS5leHRlbnQmJm0oaSxlLmV4dGVudCkpcmV0dXJuIHQmJnQoZSksITF9cmV0dXJuITB9KSl9X3NlbGVjdENhbmRpZGF0ZVRpbGVzQ292ZXJpbmdFeHRlbnRBdChlKXt0aGlzLl9jYW5kaWRhdGVUaWxlcy5sZW5ndGg9MDtjb25zdCB0PXRoaXMuZXh0ZW50O2lmKG51bGw9PXQpcmV0dXJuO2NvbnN0e3RpbGVJbmZvOmksdGlsZW1hcENhY2hlOm59PXRoaXMubGF5ZXIsbD1xKGksbilbZV0scz1pLnRpbGVBdChsLmxldmVsLHQueG1pbix0LnltaW4pLG89cy5leHRlbnQ7aWYobnVsbD09bylyZXR1cm47Y29uc3QgYT1sLnJlc29sdXRpb24qaS5zaXplWzBdLHI9bC5yZXNvbHV0aW9uKmkuc2l6ZVsxXSxjPU1hdGguY2VpbCgodC54bWF4LW9bMF0pL2EpLHU9TWF0aC5jZWlsKCh0LnltYXgtb1sxXSkvcik7Zm9yKGxldCBoPTA7aDx1O2grKylmb3IobGV0IGU9MDtlPGM7ZSsrKXtjb25zdCB0PW5ldyB5KG51bGwscy5sZXZlbCxzLnJvdy1oLHMuY29sK2UpO2kudXBkYXRlVGlsZUluZm8odCksdGhpcy5fdGlsZUlzTWFza2VkKHQpfHx0aGlzLl9jYW5kaWRhdGVUaWxlcy5wdXNoKHQpfX1fdGlsZUlzTWFza2VkKGUpe3JldHVybiEhdGhpcy5tYXNrRXh0ZW50cyYmdGhpcy5tYXNrRXh0ZW50cy5zb21lKCh0PT5lLmV4dGVudCYmbSh0LGUuZXh0ZW50KSkpfX1mdW5jdGlvbiBFKGUsdCxpPTApe2NvbnN0IG49cShlLHQpO2xldCBsPW4ubGVuZ3RoLTE7aWYoaT4wKXtjb25zdCB0PWkvcyhlLnNwYXRpYWxSZWZlcmVuY2UpLG89bi5maW5kSW5kZXgoKGU9PmUucmVzb2x1dGlvbjx0KSk7MD09PW8/bD0wOm8+MCYmKGw9by0xKX1yZXR1cm4gbH1jb25zdCBSPXttYXhpbXVtQXV0b1RpbGVSZXF1ZXN0czoyMCxub0RhdGFWYWx1ZTowLHJldHVyblNhbXBsZUluZm86ITEsZGVtUmVzb2x1dGlvbjpcImF1dG9cIixtaW5EZW1SZXNvbHV0aW9uOjB9O2Z1bmN0aW9uIHEoZSx0KXtjb25zdCBpPWUubG9kcztpZihJKHQpKXtjb25zdHtlZmZlY3RpdmVNaW5MT0Q6ZSxlZmZlY3RpdmVNYXhMT0Q6bn09dDtyZXR1cm4gaS5maWx0ZXIoKHQ9PnQubGV2ZWw+PWUmJnQubGV2ZWw8PW4pKX1yZXR1cm4gaX1mdW5jdGlvbiBJKGUpe3JldHVybiBudWxsIT1lPy50aWxlSW5mb31leHBvcnR7VCBhcyBFbGV2YXRpb25RdWVyeSx2IGFzIEdlb21ldHJ5RGVzY3JpcHRvcixFIGFzIGdldEZpbmVzdExvZEluZGV4fTtcbiIsIi8qXG5BbGwgbWF0ZXJpYWwgY29weXJpZ2h0IEVTUkksIEFsbCBSaWdodHMgUmVzZXJ2ZWQsIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkLlxuU2VlIGh0dHBzOi8vanMuYXJjZ2lzLmNvbS80LjI4L2VzcmkvY29weXJpZ2h0LnR4dCBmb3IgZGV0YWlscy5cbiovXG5pbXBvcnRcIi4uLy4uL2dlb21ldHJ5LmpzXCI7aW1wb3J0XCIuLi8uLi9jb3JlL2hhcy5qc1wiO2ltcG9ydHttYWtlSGFuZGxlIGFzIGV9ZnJvbVwiLi4vLi4vY29yZS9oYW5kbGVVdGlscy5qc1wiO2ltcG9ydCB0IGZyb21cIi4uLy4uL2NvcmUvTG9nZ2VyLmpzXCI7aW1wb3J0e2dldE1ldGVyc1BlclVuaXRGb3JTUiBhcyBufWZyb21cIi4uLy4uL2NvcmUvdW5pdFV0aWxzLmpzXCI7aW1wb3J0e3RvRXh0ZW50IGFzIHMsY29udGFpbnNYWSBhcyBpLGNyZWF0ZSBhcyBvfWZyb21cIi4uLy4uL2dlb21ldHJ5L3N1cHBvcnQvYWFCb3VuZGluZ1JlY3QuanNcIjtpbXBvcnR7cHJvamVjdCBhcyBhfWZyb21cIi4uLy4uL2dlb21ldHJ5L3N1cHBvcnQvd2ViTWVyY2F0b3JVdGlscy5qc1wiO2ltcG9ydCByIGZyb21cIi4uLy4uL2dlb21ldHJ5L1BvaW50LmpzXCI7Y29uc3QgbD10LmdldExvZ2dlcihcImVzcmkubGF5ZXJzLnN1cHBvcnQuRWxldmF0aW9uU2FtcGxlclwiKTtjbGFzcyBte3F1ZXJ5RWxldmF0aW9uKGUpe3JldHVybiBwKGUuY2xvbmUoKSx0aGlzKX1vbigpe3JldHVybiBlKCl9cHJvamVjdElmUmVxdWlyZWQoZSx0KXtyZXR1cm4gaChlLHQpfX1jbGFzcyBjIGV4dGVuZHMgbXtnZXQgc3BhdGlhbFJlZmVyZW5jZSgpe3JldHVybiB0aGlzLmV4dGVudC5zcGF0aWFsUmVmZXJlbmNlfWNvbnN0cnVjdG9yKGUsdCxpKXtzdXBlcigpLHRoaXMudGlsZT1lLHRoaXMubm9EYXRhVmFsdWU9aTtjb25zdCBvPWUudGlsZS5leHRlbnQ7dGhpcy5leHRlbnQ9cyhvLHQuc3BhdGlhbFJlZmVyZW5jZSksdGhpcy5leHRlbnQuem1pbj1lLnptaW4sdGhpcy5leHRlbnQuem1heD1lLnptYXgsdGhpcy5fYWFFeHRlbnQ9bztjb25zdCBhPW4odC5zcGF0aWFsUmVmZXJlbmNlKSxyPXQubG9kQXQoZS50aWxlLmxldmVsKS5yZXNvbHV0aW9uKmE7dGhpcy5kZW1SZXNvbHV0aW9uPXttaW46cixtYXg6cn19Y29udGFpbnMoZSl7Y29uc3QgdD10aGlzLnByb2plY3RJZlJlcXVpcmVkKGUsdGhpcy5zcGF0aWFsUmVmZXJlbmNlKTtyZXR1cm4gbnVsbCE9dCYmdGhpcy5jb250YWluc0F0KHQueCx0LnkpfWNvbnRhaW5zQXQoZSx0KXtyZXR1cm4gaSh0aGlzLl9hYUV4dGVudCxlLHQpfWVsZXZhdGlvbkF0KGUsdCl7aWYoIXRoaXMuY29udGFpbnNBdChlLHQpKXtjb25zdCBuPXRoaXMuZXh0ZW50LHM9YCR7bi54bWlufSwgJHtuLnltaW59LCAke24ueG1heH0sICR7bi55bWF4fWA7cmV0dXJuIGwud2FybihcIiNlbGV2YXRpb25BdCgpXCIsYFBvaW50IHVzZWQgdG8gc2FtcGxlIGVsZXZhdGlvbiAoJHtlfSwgJHt0fSkgaXMgb3V0c2lkZSBvZiB0aGUgc2FtcGxlciBleHRlbnQgKCR7c30pYCksdGhpcy5ub0RhdGFWYWx1ZX1yZXR1cm4gdGhpcy50aWxlLnNhbXBsZShlLHQpPz90aGlzLm5vRGF0YVZhbHVlfX1jbGFzcyB1IGV4dGVuZHMgbXtnZXQgc3BhdGlhbFJlZmVyZW5jZSgpe3JldHVybiB0aGlzLmV4dGVudC5zcGF0aWFsUmVmZXJlbmNlfWNvbnN0cnVjdG9yKGUsdCxuKXtsZXQgaTtzdXBlcigpLFwibnVtYmVyXCI9PXR5cGVvZiB0Pyh0aGlzLm5vRGF0YVZhbHVlPXQsaT1udWxsKTooaT10LHRoaXMubm9EYXRhVmFsdWU9biksdGhpcy5zYW1wbGVycz1pP2UubWFwKChlPT5uZXcgYyhlLGksdGhpcy5ub0RhdGFWYWx1ZSkpKTplO2NvbnN0IGE9dGhpcy5zYW1wbGVyc1swXTtpZihhKXt0aGlzLmV4dGVudD1hLmV4dGVudC5jbG9uZSgpO2NvbnN0e21pbjplLG1heDp0fT1hLmRlbVJlc29sdXRpb247dGhpcy5kZW1SZXNvbHV0aW9uPXttaW46ZSxtYXg6dH07Zm9yKGxldCBuPTE7bjx0aGlzLnNhbXBsZXJzLmxlbmd0aDtuKyspe2NvbnN0IGU9dGhpcy5zYW1wbGVyc1tuXTt0aGlzLmV4dGVudC51bmlvbihlLmV4dGVudCksdGhpcy5kZW1SZXNvbHV0aW9uLm1pbj1NYXRoLm1pbih0aGlzLmRlbVJlc29sdXRpb24ubWluLGUuZGVtUmVzb2x1dGlvbi5taW4pLHRoaXMuZGVtUmVzb2x1dGlvbi5tYXg9TWF0aC5tYXgodGhpcy5kZW1SZXNvbHV0aW9uLm1heCxlLmRlbVJlc29sdXRpb24ubWF4KX19ZWxzZSB0aGlzLmV4dGVudD1zKG8oKSxpLnNwYXRpYWxSZWZlcmVuY2UpLHRoaXMuZGVtUmVzb2x1dGlvbj17bWluOjAsbWF4OjB9fWVsZXZhdGlvbkF0KGUsdCl7Zm9yKGNvbnN0IG4gb2YgdGhpcy5zYW1wbGVycylpZihuLmNvbnRhaW5zQXQoZSx0KSlyZXR1cm4gbi5lbGV2YXRpb25BdChlLHQpO3JldHVybiBsLndhcm4oXCIjZWxldmF0aW9uQXQoKVwiLGBQb2ludCB1c2VkIHRvIHNhbXBsZSBlbGV2YXRpb24gKCR7ZX0sICR7dH0pIGlzIG91dHNpZGUgb2YgdGhlIHNhbXBsZXJgKSx0aGlzLm5vRGF0YVZhbHVlfX1mdW5jdGlvbiBwKGUsdCl7Y29uc3Qgbj1oKGUsdC5zcGF0aWFsUmVmZXJlbmNlKTtpZighbilyZXR1cm4gbnVsbDtzd2l0Y2goZS50eXBlKXtjYXNlXCJwb2ludFwiOmYoZSxuLHQpO2JyZWFrO2Nhc2VcInBvbHlsaW5lXCI6eChlLG4sdCk7YnJlYWs7Y2FzZVwibXVsdGlwb2ludFwiOlIoZSxuLHQpfXJldHVybiBlfWZ1bmN0aW9uIGgoZSx0KXtpZihudWxsPT1lKXJldHVybiBudWxsO2NvbnN0IG49ZS5zcGF0aWFsUmVmZXJlbmNlO2lmKG4uZXF1YWxzKHQpKXJldHVybiBlO2NvbnN0IHM9YShlLHQpO3JldHVybiBzfHxsLmVycm9yKGBDYW5ub3QgcHJvamVjdCBnZW9tZXRyeSBzcGF0aWFsIHJlZmVyZW5jZSAod2tpZDoke24ud2tpZH0pIHRvIGVsZXZhdGlvbiBzYW1wbGVyIHNwYXRpYWwgcmVmZXJlbmNlICh3a2lkOiR7dC53a2lkfSlgKSxzfWZ1bmN0aW9uIGYoZSx0LG4pe2Uuej1uLmVsZXZhdGlvbkF0KHQueCx0LnkpfWZ1bmN0aW9uIHgoZSx0LG4pe2Quc3BhdGlhbFJlZmVyZW5jZT10LnNwYXRpYWxSZWZlcmVuY2U7Y29uc3Qgcz1lLmhhc00mJiFlLmhhc1o7Zm9yKGxldCBpPTA7aTxlLnBhdGhzLmxlbmd0aDtpKyspe2NvbnN0IG89ZS5wYXRoc1tpXSxhPXQucGF0aHNbaV07Zm9yKGxldCBlPTA7ZTxvLmxlbmd0aDtlKyspe2NvbnN0IHQ9b1tlXSxpPWFbZV07ZC54PWlbMF0sZC55PWlbMV0scyYmKHRbM109dFsyXSksdFsyXT1uLmVsZXZhdGlvbkF0KGQueCxkLnkpfX1lLmhhc1o9ITB9ZnVuY3Rpb24gUihlLHQsbil7ZC5zcGF0aWFsUmVmZXJlbmNlPXQuc3BhdGlhbFJlZmVyZW5jZTtjb25zdCBzPWUuaGFzTSYmIWUuaGFzWjtmb3IobGV0IGk9MDtpPGUucG9pbnRzLmxlbmd0aDtpKyspe2NvbnN0IG89ZS5wb2ludHNbaV0sYT10LnBvaW50c1tpXTtkLng9YVswXSxkLnk9YVsxXSxzJiYob1szXT1vWzJdKSxvWzJdPW4uZWxldmF0aW9uQXQoZC54LGQueSl9ZS5oYXNaPSEwfWNvbnN0IGQ9bmV3IHI7ZXhwb3J0e20gYXMgRWxldmF0aW9uU2FtcGxlckJhc2UsdSBhcyBNdWx0aVRpbGVFbGV2YXRpb25TYW1wbGVyLGMgYXMgVGlsZUVsZXZhdGlvblNhbXBsZXIscCBhcyB1cGRhdGVHZW9tZXRyeUVsZXZhdGlvbn07XG4iLCIvKlxuQWxsIG1hdGVyaWFsIGNvcHlyaWdodCBFU1JJLCBBbGwgUmlnaHRzIFJlc2VydmVkLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZC5cblNlZSBodHRwczovL2pzLmFyY2dpcy5jb20vNC4yOC9lc3JpL2NvcHlyaWdodC50eHQgZm9yIGRldGFpbHMuXG4qL1xuY2xhc3MgdHtjb25zdHJ1Y3Rvcih0LGgpe3RoaXMuZGF0YT10LHRoaXMuc2FmZVdpZHRoPS45OTk5OTk5OSoodC53aWR0aC0xKSx0aGlzLmR4PSh0LndpZHRoLTEpLyhoWzJdLWhbMF0pLHRoaXMuZHk9KHQud2lkdGgtMSkvKGhbM10taFsxXSksdGhpcy54MD1oWzBdLHRoaXMueTE9aFszXX19ZXhwb3J0e3QgYXMgRWxldmF0aW9uU2FtcGxlckRhdGF9O1xuIiwiLypcbkFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG5TZWUgaHR0cHM6Ly9qcy5hcmNnaXMuY29tLzQuMjgvZXNyaS9jb3B5cmlnaHQudHh0IGZvciBkZXRhaWxzLlxuKi9cbmltcG9ydHtFbGV2YXRpb25TYW1wbGVyRGF0YSBhcyBhfWZyb21cIi4vRWxldmF0aW9uU2FtcGxlckRhdGEuanNcIjtjbGFzcyB0e2NvbnN0cnVjdG9yKHQsbD1udWxsKXtpZih0aGlzLnRpbGU9dCxudWxsIT1sJiZudWxsIT10KXtjb25zdCBlPXQuZXh0ZW50O3RoaXMuX3NhbXBsZXJEYXRhPW5ldyBhKGwsZSl9fWdldCB6bWluKCl7cmV0dXJuIG51bGwhPXRoaXMuX3NhbXBsZXJEYXRhP3RoaXMuX3NhbXBsZXJEYXRhLmRhdGEubWluVmFsdWU6MH1nZXQgem1heCgpe3JldHVybiBudWxsIT10aGlzLl9zYW1wbGVyRGF0YT90aGlzLl9zYW1wbGVyRGF0YS5kYXRhLm1heFZhbHVlOjB9c2FtcGxlKGEsdCl7aWYobnVsbD09dGhpcy5fc2FtcGxlckRhdGEpcmV0dXJuO2NvbnN0e3NhZmVXaWR0aDplLGRhdGE6cixkeDpzLGR5Om4seTE6aSx4MDp1fT10aGlzLl9zYW1wbGVyRGF0YSx7d2lkdGg6bSx2YWx1ZXM6byxub0RhdGFWYWx1ZTpofT1yLHA9bChuKihpLXQpLDAsZSksRD1sKHMqKGEtdSksMCxlKSxmPU1hdGguZmxvb3IocCksYz1NYXRoLmZsb29yKEQpLGQ9ZiptK2MsXz1kK20seD1vW2RdLFY9b1tfXSxnPW9bZCsxXSx2PW9bXysxXTtpZih4IT09aCYmViE9PWgmJmchPT1oJiZ2IT09aCl7Y29uc3QgYT1ELWMsdD14KyhnLXgpKmE7cmV0dXJuIHQrKFYrKHYtVikqYS10KSoocC1mKX19fWZ1bmN0aW9uIGwoYSx0LGwpe3JldHVybiBhPHQ/dDphPmw/bDphfWV4cG9ydHt0IGFzIEVsZXZhdGlvblRpbGV9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9