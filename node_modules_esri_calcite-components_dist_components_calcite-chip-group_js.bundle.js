"use strict";
(self["webpackChunksynview"] = self["webpackChunksynview"] || []).push([["node_modules_esri_calcite-components_dist_components_calcite-chip-group_js"],{

/***/ "./node_modules/@esri/calcite-components/dist/components/calcite-chip-group.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/components/calcite-chip-group.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CalciteChipGroup: () => (/* binding */ CalciteChipGroup),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@esri/calcite-components/dist/components/dom.js");
/* harmony import */ var _interactive_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interactive.js */ "./node_modules/@esri/calcite-components/dist/components/interactive.js");
/* harmony import */ var _observers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observers.js */ "./node_modules/@esri/calcite-components/dist/components/observers.js");
/* harmony import */ var _loadable_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./loadable.js */ "./node_modules/@esri/calcite-components/dist/components/loadable.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.7.0
 */






const chipGroupCss = ":host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:flex}.container{display:flex;inline-size:100%;flex-wrap:wrap;gap:0.5rem}::slotted(calcite-chip){flex:none}:host([scale=s]) .container{gap:0.25rem}:host([scale=l]) .container{gap:0.75rem}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}:host([hidden]){display:none}[hidden]{display:none}";

const ChipGroup = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteChipGroupSelect = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.createEvent)(this, "calciteChipGroupSelect", 6);
    this.mutationObserver = (0,_observers_js__WEBPACK_IMPORTED_MODULE_2__.c)("mutation", () => this.updateItems());
    this.items = [];
    //--------------------------------------------------------------------------
    //
    //  Private Methods
    //
    //--------------------------------------------------------------------------
    this.updateItems = (event) => {
      const target = event ? event.target : this.slotRefEl;
      this.items = target
        ?.assignedElements({ flatten: true })
        .filter((el) => el?.matches("calcite-chip"));
      this.items?.forEach((el) => {
        el.interactive = true;
        el.scale = this.scale;
        el.selectionMode = this.selectionMode;
      });
      this.setSelectedItems(false);
    };
    this.setSelectedItems = (emit, elToMatch) => {
      if (elToMatch) {
        this.items?.forEach((el) => {
          const matchingEl = elToMatch === el;
          switch (this.selectionMode) {
            case "multiple":
              if (matchingEl) {
                el.selected = !el.selected;
              }
              break;
            case "single":
              el.selected = matchingEl ? !el.selected : false;
              break;
            case "single-persist":
              el.selected = !!matchingEl;
              break;
          }
        });
      }
      this.selectedItems = this.items?.filter((el) => el.selected);
      if (emit) {
        this.calciteChipGroupSelect.emit();
      }
    };
    this.disabled = false;
    this.label = undefined;
    this.scale = "m";
    this.selectionMode = "none";
    this.selectedItems = [];
  }
  onSelectionModeChange() {
    this.updateItems();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_1__.c)(this);
    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });
  }
  componentDidRender() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_1__.d)(this);
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_1__.u)(this);
  }
  componentDidLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_3__.s)(this);
  }
  disconnectedCallback() {
    this.mutationObserver?.disconnect();
  }
  async componentWillLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_3__.a)(this);
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  calciteInternalChipKeyEventListener(event) {
    if (event.composedPath().includes(this.el)) {
      const interactiveItems = this.items?.filter((el) => !el.disabled);
      switch (event.detail.key) {
        case "ArrowRight":
          (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.i)(interactiveItems, event.detail.target, "next");
          break;
        case "ArrowLeft":
          (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.i)(interactiveItems, event.detail.target, "previous");
          break;
        case "Home":
          (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.i)(interactiveItems, event.detail.target, "first");
          break;
        case "End":
          (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.i)(interactiveItems, event.detail.target, "last");
          break;
      }
    }
  }
  calciteChipCloseListener(event) {
    const item = event.target;
    if (this.items?.includes(item)) {
      if (this.items?.indexOf(item) > 0) {
        (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.i)(this.items, item, "previous");
      }
      else if (this.items?.indexOf(item) === 0) {
        (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.i)(this.items, item, "next");
      }
      else {
        (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.i)(this.items, item, "first");
      }
    }
    this.items = this.items?.filter((el) => el !== item);
  }
  calciteChipSelectListener(event) {
    if (event.composedPath().includes(this.el)) {
      this.setSelectedItems(true, event.target);
    }
  }
  // --------------------------------------------------------------------------
  //
  //  Public Methods
  //
  // --------------------------------------------------------------------------
  /**
   * Sets focus on the component's first focusable element.
   */
  async setFocus() {
    await (0,_loadable_js__WEBPACK_IMPORTED_MODULE_3__.c)(this);
    if (!this.disabled) {
      return (this.selectedItems[0] || this.items[0])?.setFocus();
    }
  }
  //--------------------------------------------------------------------------
  //
  //  Render Methods
  //
  //--------------------------------------------------------------------------
  render() {
    const role = this.selectionMode === "none" || this.selectionMode === "multiple" ? "group" : "radiogroup";
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.h)("div", { "aria-disabled": (0,_dom_js__WEBPACK_IMPORTED_MODULE_0__.t)(this.disabled), "aria-label": this.label, class: "container", role: role }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_4__.h)("slot", { onSlotchange: this.updateItems, ref: (el) => (this.slotRefEl = el) })));
  }
  get el() { return this; }
  static get watchers() { return {
    "selectionMode": ["onSelectionModeChange"]
  }; }
  static get style() { return chipGroupCss; }
}, [1, "calcite-chip-group", {
    "disabled": [516],
    "label": [1],
    "scale": [513],
    "selectionMode": [513, "selection-mode"],
    "selectedItems": [1040],
    "setFocus": [64]
  }, [[0, "calciteInternalChipKeyEvent", "calciteInternalChipKeyEventListener"], [0, "calciteChipClose", "calciteChipCloseListener"], [0, "calciteChipSelect", "calciteChipSelectListener"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-chip-group"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-chip-group":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, ChipGroup);
      }
      break;
  } });
}
defineCustomElement$1();

const CalciteChipGroup = ChipGroup;
const defineCustomElement = defineCustomElement$1;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,