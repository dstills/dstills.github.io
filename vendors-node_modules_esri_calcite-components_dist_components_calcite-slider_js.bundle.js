"use strict";
(self["webpackChunksynview"] = self["webpackChunksynview"] || []).push([["vendors-node_modules_esri_calcite-components_dist_components_calcite-slider_js"],{

/***/ "./node_modules/@esri/calcite-components/dist/components/calcite-slider.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/components/calcite-slider.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CalciteSlider: () => (/* binding */ CalciteSlider),
/* harmony export */   defineCustomElement: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _guid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./guid.js */ "./node_modules/@esri/calcite-components/dist/components/guid.js");
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dom.js */ "./node_modules/@esri/calcite-components/dist/components/dom.js");
/* harmony import */ var _form_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./form.js */ "./node_modules/@esri/calcite-components/dist/components/form.js");
/* harmony import */ var _interactive_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interactive.js */ "./node_modules/@esri/calcite-components/dist/components/interactive.js");
/* harmony import */ var _key_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./key.js */ "./node_modules/@esri/calcite-components/dist/components/key.js");
/* harmony import */ var _label2_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./label2.js */ "./node_modules/@esri/calcite-components/dist/components/label2.js");
/* harmony import */ var _loadable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./loadable.js */ "./node_modules/@esri/calcite-components/dist/components/loadable.js");
/* harmony import */ var _locale_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./locale.js */ "./node_modules/@esri/calcite-components/dist/components/locale.js");
/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./math.js */ "./node_modules/@esri/calcite-components/dist/components/math.js");
/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./graph.js */ "./node_modules/@esri/calcite-components/dist/components/graph.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.7.0
 */












const CSS = {
  handleLabel: "handle__label",
  handleLabelMinValue: "handle__label--minValue",
  handleLabelValue: "handle__label--value",
  tickMin: "tick__label--min",
  tickMax: "tick__label--max",
};
const maxTickElementThreshold = 250;

const sliderCss = "@charset \"UTF-8\";:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-ui-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}.scale--s{--calcite-slider-handle-size:0.625rem;--calcite-slider-handle-extension-height:0.4rem;--calcite-slider-container-font-size:var(--calcite-font-size--3)}.scale--s .handle__label,.scale--s .tick__label{line-height:.75rem}.scale--m{--calcite-slider-handle-size:0.875rem;--calcite-slider-handle-extension-height:0.5rem;--calcite-slider-container-font-size:var(--calcite-font-size--2)}.scale--m .handle__label,.scale--m .tick__label{line-height:1rem}.scale--l{--calcite-slider-handle-size:1rem;--calcite-slider-handle-extension-height:0.65rem;--calcite-slider-container-font-size:var(--calcite-font-size--1)}.scale--l .handle__label,.scale--l .tick__label{line-height:1rem}.handle__label,.tick__label{font-weight:var(--calcite-font-weight-medium);color:var(--calcite-ui-text-2);font-size:var(--calcite-slider-container-font-size)}:host{display:block}.container{position:relative;display:block;overflow-wrap:normal;word-break:normal;padding-inline:calc(var(--calcite-slider-handle-size) * 0.5);padding-block:calc(var(--calcite-slider-handle-size) * 0.5);margin-block:calc(var(--calcite-slider-handle-size) * 0.5);margin-inline:0;--calcite-slider-full-handle-height:calc(\n    var(--calcite-slider-handle-size) + var(--calcite-slider-handle-extension-height)\n  );touch-action:none}:host([disabled]) .track__range,:host([disabled]) .tick--active{background-color:var(--calcite-ui-text-3)}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.scale--s .thumb:not(.thumb--precise){--calcite-slider-thumb-y-offset:-0.375rem}.scale--m .thumb:not(.thumb--precise){--calcite-slider-thumb-y-offset:-0.5rem}.scale--l .thumb:not(.thumb--precise){--calcite-slider-thumb-y-offset:-0.55rem}:host([precise]:not([has-histogram])) .container .thumb--value{--calcite-slider-thumb-y-offset:calc(var(--calcite-slider-full-handle-height) * -1)}.thumb-container{position:relative;max-inline-size:100%}.thumb{--calcite-slider-thumb-x-offset:calc(var(--calcite-slider-handle-size) * 0.5);position:absolute;margin:0px;display:flex;cursor:pointer;flex-direction:column;align-items:center;border-style:none;background-color:transparent;padding:0px;font-family:inherit;outline:2px solid transparent;outline-offset:2px;transform:translate(var(--calcite-slider-thumb-x-offset), var(--calcite-slider-thumb-y-offset))}.thumb .handle__label.static,.thumb .handle__label.transformed{position:absolute;inset-block:0px;opacity:0}.thumb .handle__label.hyphen::after{content:\"â€”\";display:inline-block;inline-size:1em}.thumb .handle__label.hyphen--wrap{display:flex}.thumb .handle{box-sizing:border-box;border-radius:9999px;background-color:var(--calcite-ui-foreground-1);outline-color:transparent;block-size:var(--calcite-slider-handle-size);inline-size:var(--calcite-slider-handle-size);box-shadow:0 0 0 2px var(--calcite-ui-text-3) inset;transition:border var(--calcite-internal-animation-timing-medium) ease, background-color var(--calcite-internal-animation-timing-medium) ease, box-shadow var(--calcite-animation-timing) ease}.thumb .handle-extension{inline-size:0.125rem;block-size:var(--calcite-slider-handle-extension-height);background-color:var(--calcite-ui-text-3)}.thumb:hover .handle{box-shadow:0 0 0 3px var(--calcite-ui-brand) inset}.thumb:hover .handle-extension{background-color:var(--calcite-ui-brand)}.thumb:focus .handle{outline:2px solid var(--calcite-ui-focus-color, var(--calcite-ui-brand));outline-offset:calc(\n            2px *\n            calc(\n              1 -\n              2 * clamp(\n                0,\n                var(--calcite-ui-focus-offset-invert),\n                1\n              )\n            )\n          )}.thumb:focus .handle-extension{background-color:var(--calcite-ui-brand)}.thumb.thumb--minValue{transform:translate(calc(var(--calcite-slider-thumb-x-offset) * -1), var(--calcite-slider-thumb-y-offset))}.thumb.thumb--precise{--calcite-slider-thumb-y-offset:-0.125rem}:host([label-handles]) .thumb{--calcite-slider-thumb-x-offset:50%}:host([label-handles]):host(:not([has-histogram])) .scale--s .thumb:not(.thumb--precise){--calcite-slider-thumb-y-offset:-1.4375rem}:host([label-handles]):host(:not([has-histogram])) .scale--m .thumb:not(.thumb--precise){--calcite-slider-thumb-y-offset:-1.875rem}:host([label-handles]):host(:not([has-histogram])) .scale--l .thumb:not(.thumb--precise){--calcite-slider-thumb-y-offset:-2rem}:host([has-histogram][label-handles]) .handle__label,:host([label-handles]:not([has-histogram])) .thumb--minValue.thumb--precise .handle__label{margin-block-start:0.5em}:host(:not([has-histogram]):not([precise])) .handle__label,:host([label-handles]:not([has-histogram])) .thumb--value .handle__label{margin-block-end:0.5em}:host([label-handles][precise]):host(:not([has-histogram])) .scale--s .thumb--value{--calcite-slider-thumb-y-offset:-2.075rem}:host([label-handles][precise]):host(:not([has-histogram])) .scale--m .thumb--value{--calcite-slider-thumb-y-offset:-2.75rem}:host([label-handles][precise]):host(:not([has-histogram])) .scale--l .thumb--value{--calcite-slider-thumb-y-offset:-3.0625rem}.thumb:focus .handle,.thumb--active .handle{background-color:var(--calcite-ui-brand);box-shadow:0 0 8px 0 rgba(0, 0, 0, 0.16)}.thumb:hover.thumb--precise:after,.thumb:focus.thumb--precise:after,.thumb--active.thumb--precise:after{background-color:var(--calcite-ui-brand)}.track{position:relative;block-size:0.125rem;border-radius:0px;background-color:var(--calcite-ui-border-2);transition:all var(--calcite-internal-animation-timing-medium) ease-in}.track__range{position:absolute;inset-block-start:0px;block-size:0.125rem;background-color:var(--calcite-ui-brand)}.container--range .track__range:hover{cursor:ew-resize}.container--range .track__range:after{position:absolute;inline-size:100%;content:\"\";inset-block-start:calc(var(--calcite-slider-full-handle-height) * 0.5 * -1);block-size:calc(var(--calcite-slider-handle-size) + var(--calcite-slider-handle-extension-height))}@media (forced-colors: active){.thumb{outline-width:0;outline-offset:0}.handle{outline:2px solid transparent;outline-offset:2px}.thumb:focus .handle,.thumb .handle-extension,.thumb:hover .handle-extension,.thumb:focus .handle-extension,.thumb:active .handle-extension{background-color:canvasText}.track{background-color:canvasText}.track__range{background-color:highlight}}.tick{position:absolute;block-size:0.25rem;inline-size:0.125rem;border-width:1px;border-style:solid;background-color:var(--calcite-ui-border-input);border-color:var(--calcite-ui-foreground-1);inset-block-start:-2px;pointer-events:none;margin-inline-start:calc(-1 * 0.125rem)}.tick--active{background-color:var(--calcite-ui-brand)}.tick__label{pointer-events:none;margin-block-start:0.875rem;display:flex;justify-content:center}.tick__label--min{transition:opacity var(--calcite-animation-timing)}.tick__label--max{transition:opacity var(--calcite-internal-animation-timing-fast)}:host([has-histogram][label-handles]) .tick__label--min,:host([has-histogram][label-handles]) .tick__label--max,:host([has-histogram][precise]) .tick__label--min,:host([has-histogram][precise]) .tick__label--max{font-weight:var(--calcite-font-weight-normal);color:var(--calcite-ui-text-3)}.graph{color:var(--calcite-ui-foreground-3);block-size:48px}:host([label-ticks][ticks]) .container{padding-block-end:calc(0.875rem + var(--calcite-slider-container-font-size))}:host([has-histogram]):host([precise][label-handles]) .container{padding-block-end:calc(var(--calcite-slider-full-handle-height) + 1em)}:host([has-histogram]):host([label-handles]:not([precise])) .container{padding-block-end:calc(var(--calcite-slider-handle-size) * 0.5 + 1em)}:host([has-histogram]):host([precise]:not([label-handles])) .container{padding-block-end:var(--calcite-slider-full-handle-height)}:host(:not([has-histogram])):host([precise]:not([label-handles])) .container{padding-block-start:var(--calcite-slider-full-handle-height)}:host(:not([has-histogram])):host([precise]:not([label-handles])) .container--range{padding-block-end:var(--calcite-slider-full-handle-height)}:host(:not([has-histogram])):host([label-handles]:not([precise])) .container{padding-block-start:calc(var(--calcite-slider-full-handle-height) + 4px)}:host(:not([has-histogram])):host([label-handles][precise]) .container{padding-block-start:calc(var(--calcite-slider-full-handle-height) + var(--calcite-slider-container-font-size) + 4px)}:host(:not([has-histogram])):host([label-handles][precise]) .container--range{padding-block-end:calc(var(--calcite-slider-full-handle-height) + var(--calcite-slider-container-font-size) + 4px)}::slotted(input[slot=hidden-form-input]){margin:0 !important;opacity:0 !important;outline:none !important;padding:0 !important;position:absolute !important;inset:0 !important;transform:none !important;-webkit-appearance:none !important;z-index:-1 !important}:host([hidden]){display:none}[hidden]{display:none}";

function isRange(value) {
  return Array.isArray(value);
}
const Slider = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.calciteSliderInput = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.createEvent)(this, "calciteSliderInput", 6);
    this.calciteSliderChange = (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.createEvent)(this, "calciteSliderChange", 6);
    this.activeProp = "value";
    this.guid = `calcite-slider-${(0,_guid_js__WEBPACK_IMPORTED_MODULE_0__.g)()}`;
    this.dragUpdate = (event) => {
      if (this.disabled) {
        return;
      }
      event.preventDefault();
      if (this.dragProp) {
        const value = this.translate(event.clientX || event.pageX);
        if (isRange(this.value) && this.dragProp === "minMaxValue") {
          if (this.minValueDragRange && this.maxValueDragRange && this.minMaxValueRange) {
            const newMinValue = value - this.minValueDragRange;
            const newMaxValue = value + this.maxValueDragRange;
            if (newMaxValue <= this.max &&
              newMinValue >= this.min &&
              newMaxValue - newMinValue === this.minMaxValueRange) {
              this.setValue({
                minValue: this.clamp(newMinValue, "minValue"),
                maxValue: this.clamp(newMaxValue, "maxValue"),
              });
            }
          }
          else {
            this.minValueDragRange = value - this.minValue;
            this.maxValueDragRange = this.maxValue - value;
            this.minMaxValueRange = this.maxValue - this.minValue;
          }
        }
        else {
          this.setValue({ [this.dragProp]: this.clamp(value, this.dragProp) });
        }
      }
    };
    this.pointerUpDragEnd = (event) => {
      if (this.disabled || !(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
        return;
      }
      this.dragEnd(event);
    };
    this.dragEnd = (event) => {
      if (this.disabled) {
        return;
      }
      this.removeDragListeners();
      this.focusActiveHandle(event.clientX);
      if (this.lastDragPropValue != this[this.dragProp]) {
        this.emitChange();
      }
      this.dragProp = null;
      this.lastDragPropValue = null;
      this.minValueDragRange = null;
      this.maxValueDragRange = null;
      this.minMaxValueRange = null;
    };
    /**
     * Set the reference of the track Element
     *
     * @internal
     * @param node
     */
    this.storeTrackRef = (node) => {
      this.trackEl = node;
    };
    /**
     * Returns a string representing the localized label value based if the groupSeparator prop is parsed.
     *
     * @param value
     */
    this.determineGroupSeparator = (value) => {
      if (typeof value === "number") {
        _locale_js__WEBPACK_IMPORTED_MODULE_7__.n.numberFormatOptions = {
          locale: this.effectiveLocale,
          numberingSystem: this.numberingSystem,
          useGrouping: this.groupSeparator,
        };
        return _locale_js__WEBPACK_IMPORTED_MODULE_7__.n.localize(value.toString());
      }
    };
    this.disabled = false;
    this.form = undefined;
    this.groupSeparator = false;
    this.hasHistogram = false;
    this.histogram = undefined;
    this.histogramStops = undefined;
    this.labelHandles = false;
    this.labelTicks = false;
    this.max = 100;
    this.maxLabel = undefined;
    this.maxValue = undefined;
    this.min = 0;
    this.minLabel = undefined;
    this.minValue = undefined;
    this.mirrored = false;
    this.name = undefined;
    this.numberingSystem = undefined;
    this.pageStep = undefined;
    this.precise = false;
    this.required = false;
    this.snap = false;
    this.step = 1;
    this.ticks = undefined;
    this.value = 0;
    this.scale = "m";
    this.effectiveLocale = "";
    this.minMaxValueRange = null;
    this.minValueDragRange = null;
    this.maxValueDragRange = null;
    this.tickValues = [];
  }
  histogramWatcher(newHistogram) {
    this.hasHistogram = !!newHistogram;
  }
  ticksWatcher() {
    this.tickValues = this.generateTickValues();
  }
  valueHandler() {
    this.setMinMaxFromValue();
  }
  minMaxValueHandler() {
    this.setValueFromMinMax();
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_3__.c)(this);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.c)(this);
    this.setMinMaxFromValue();
    this.setValueFromMinMax();
    (0,_label2_js__WEBPACK_IMPORTED_MODULE_5__.c)(this);
    (0,_form_js__WEBPACK_IMPORTED_MODULE_2__.c)(this);
  }
  disconnectedCallback() {
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_3__.d)(this);
    (0,_label2_js__WEBPACK_IMPORTED_MODULE_5__.d)(this);
    (0,_form_js__WEBPACK_IMPORTED_MODULE_2__.d)(this);
    (0,_locale_js__WEBPACK_IMPORTED_MODULE_7__.d)(this);
    this.removeDragListeners();
  }
  componentWillLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.a)(this);
    if (!isRange(this.value)) {
      this.value = this.snap ? this.getClosestStep(this.value) : this.clamp(this.value);
    }
    this.ticksWatcher();
    this.histogramWatcher(this.histogram);
    (0,_form_js__WEBPACK_IMPORTED_MODULE_2__.a)(this, this.value);
  }
  componentDidLoad() {
    (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.s)(this);
  }
  componentDidRender() {
    if (this.labelHandles) {
      this.adjustHostObscuredHandleLabel("value");
      if (isRange(this.value)) {
        this.adjustHostObscuredHandleLabel("minValue");
        if (!(this.precise && !this.hasHistogram)) {
          this.hyphenateCollidingRangeHandleLabels();
        }
      }
    }
    this.hideObscuredBoundingTickLabels();
    (0,_interactive_js__WEBPACK_IMPORTED_MODULE_3__.u)(this);
  }
  render() {
    const id = this.el.id || this.guid;
    const maxProp = isRange(this.value) ? "maxValue" : "value";
    const value = isRange(this.value) ? this.maxValue : this.value;
    const displayedValue = this.determineGroupSeparator(value);
    const displayedMinValue = this.determineGroupSeparator(this.minValue);
    const min = this.minValue || this.min;
    const useMinValue = this.shouldUseMinValue();
    const minInterval = this.getUnitInterval(useMinValue ? this.minValue : min) * 100;
    const maxInterval = this.getUnitInterval(value) * 100;
    const mirror = this.shouldMirror();
    const leftThumbOffset = `${mirror ? 100 - minInterval : minInterval}%`;
    const rightThumbOffset = `${mirror ? maxInterval : 100 - maxInterval}%`;
    const valueIsRange = isRange(this.value);
    const handleLabelMinValueClasses = `${CSS.handleLabel} ${CSS.handleLabelMinValue}`;
    const handleLabelValueClasses = `${CSS.handleLabel} ${CSS.handleLabelValue}`;
    const handle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": valueIsRange ? this.maxLabel : this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": value, class: {
        thumb: true,
        "thumb--value": true,
        "thumb--active": this.lastDragProp !== "minMaxValue" && this.dragProp === maxProp,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = maxProp), onPointerDown: (event) => this.pointerDownDragStart(event, maxProp), role: "slider", style: { right: rightThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.maxHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" })));
    const labeledHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": valueIsRange ? this.maxLabel : this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": value, class: {
        thumb: true,
        "thumb--value": true,
        "thumb--active": this.lastDragProp !== "minMaxValue" && this.dragProp === maxProp,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = maxProp), onPointerDown: (event) => this.pointerDownDragStart(event, maxProp), role: "slider", style: { right: rightThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.maxHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: handleLabelValueClasses }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} static` }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} transformed` }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" })));
    const histogramLabeledHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": valueIsRange ? this.maxLabel : this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": value, class: {
        thumb: true,
        "thumb--value": true,
        "thumb--active": this.lastDragProp !== "minMaxValue" && this.dragProp === maxProp,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = maxProp), onPointerDown: (event) => this.pointerDownDragStart(event, maxProp), role: "slider", style: { right: rightThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.maxHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: handleLabelValueClasses }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} static` }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} transformed` }, displayedValue)));
    const preciseHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": valueIsRange ? this.maxLabel : this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": value, class: {
        thumb: true,
        "thumb--value": true,
        "thumb--active": this.lastDragProp !== "minMaxValue" && this.dragProp === maxProp,
        "thumb--precise": true,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = maxProp), onPointerDown: (event) => this.pointerDownDragStart(event, maxProp), role: "slider", style: { right: rightThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.maxHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle-extension" })));
    const histogramPreciseHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": valueIsRange ? this.maxLabel : this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": value, class: {
        thumb: true,
        "thumb--value": true,
        "thumb--active": this.lastDragProp !== "minMaxValue" && this.dragProp === maxProp,
        "thumb--precise": true,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = maxProp), onPointerDown: (event) => this.pointerDownDragStart(event, maxProp), role: "slider", style: { right: rightThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.maxHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle-extension" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" })));
    const labeledPreciseHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": valueIsRange ? this.maxLabel : this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": value, class: {
        thumb: true,
        "thumb--value": true,
        "thumb--active": this.lastDragProp !== "minMaxValue" && this.dragProp === maxProp,
        "thumb--precise": true,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = maxProp), onPointerDown: (event) => this.pointerDownDragStart(event, maxProp), role: "slider", style: { right: rightThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.maxHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: handleLabelValueClasses }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} static` }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} transformed` }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle-extension" })));
    const histogramLabeledPreciseHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": valueIsRange ? this.maxLabel : this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": value, class: {
        thumb: true,
        "thumb--value": true,
        "thumb--active": this.lastDragProp !== "minMaxValue" && this.dragProp === maxProp,
        "thumb--precise": true,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = maxProp), onPointerDown: (event) => this.pointerDownDragStart(event, maxProp), role: "slider", style: { right: rightThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.maxHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle-extension" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: handleLabelValueClasses }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} static` }, displayedValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelValueClasses} transformed` }, displayedValue)));
    const minHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": this.minValue, class: {
        thumb: true,
        "thumb--minValue": true,
        "thumb--active": this.dragProp === "minValue",
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = "minValue"), onPointerDown: (event) => this.pointerDownDragStart(event, "minValue"), role: "slider", style: { left: leftThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.minHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" })));
    const minLabeledHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": this.minValue, class: {
        thumb: true,
        "thumb--minValue": true,
        "thumb--active": this.dragProp === "minValue",
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = "minValue"), onPointerDown: (event) => this.pointerDownDragStart(event, "minValue"), role: "slider", style: { left: leftThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.minHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: handleLabelMinValueClasses }, displayedMinValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelMinValueClasses} static` }, displayedMinValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelMinValueClasses} transformed` }, displayedMinValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" })));
    const minHistogramLabeledHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": this.minValue, class: {
        thumb: true,
        "thumb--minValue": true,
        "thumb--active": this.dragProp === "minValue",
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = "minValue"), onPointerDown: (event) => this.pointerDownDragStart(event, "minValue"), role: "slider", style: { left: leftThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.minHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: handleLabelMinValueClasses }, displayedMinValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelMinValueClasses} static` }, displayedMinValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelMinValueClasses} transformed` }, displayedMinValue)));
    const minPreciseHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": this.minValue, class: {
        thumb: true,
        "thumb--minValue": true,
        "thumb--active": this.dragProp === "minValue",
        "thumb--precise": true,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = "minValue"), onPointerDown: (event) => this.pointerDownDragStart(event, "minValue"), role: "slider", style: { left: leftThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.minHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle-extension" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" })));
    const minLabeledPreciseHandle = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-disabled": this.disabled, "aria-label": this.minLabel, "aria-orientation": "horizontal", "aria-valuemax": this.max, "aria-valuemin": this.min, "aria-valuenow": this.minValue, class: {
        thumb: true,
        "thumb--minValue": true,
        "thumb--active": this.dragProp === "minValue",
        "thumb--precise": true,
      }, onBlur: () => (this.activeProp = null), onFocus: () => (this.activeProp = "minValue"), onPointerDown: (event) => this.pointerDownDragStart(event, "minValue"), role: "slider", style: { left: leftThumbOffset }, tabIndex: 0,
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: (el) => (this.minHandle = el) }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle-extension" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "handle" }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: handleLabelMinValueClasses }, displayedMinValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelMinValueClasses} static` }, displayedMinValue), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { "aria-hidden": "true", class: `${handleLabelMinValueClasses} transformed` }, displayedMinValue)));
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)(_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.Host, { id: id, onTouchStart: this.handleTouchStart }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { "aria-label": (0,_label2_js__WEBPACK_IMPORTED_MODULE_5__.g)(this), class: {
        ["container"]: true,
        ["container--range"]: valueIsRange,
        [`scale--${this.scale}`]: true,
      } }, this.renderGraph(), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "track",
      // eslint-disable-next-line react/jsx-sort-props -- ref should be last so node attrs/props are in sync (see https://github.com/Esri/calcite-design-system/pull/6530)
      ref: this.storeTrackRef }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "track__range", onPointerDown: (event) => this.pointerDownDragStart(event, "minMaxValue"), style: {
        left: `${mirror ? 100 - maxInterval : minInterval}%`,
        right: `${mirror ? minInterval : 100 - maxInterval}%`,
      } }), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "ticks" }, this.tickValues.map((tick) => {
      const tickOffset = `${this.getUnitInterval(tick) * 100}%`;
      let activeTicks = tick >= min && tick <= value;
      if (useMinValue) {
        activeTicks = tick >= this.minValue && tick <= this.maxValue;
      }
      return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { class: {
          tick: true,
          "tick--active": activeTicks,
        }, style: {
          left: mirror ? "" : tickOffset,
          right: mirror ? tickOffset : "",
        } }, this.renderTickLabel(tick)));
    }))), (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("div", { class: "thumb-container" }, !this.precise && !this.labelHandles && valueIsRange && minHandle, !this.hasHistogram &&
      !this.precise &&
      this.labelHandles &&
      valueIsRange &&
      minLabeledHandle, this.precise && !this.labelHandles && valueIsRange && minPreciseHandle, this.precise && this.labelHandles && valueIsRange && minLabeledPreciseHandle, this.hasHistogram &&
      !this.precise &&
      this.labelHandles &&
      valueIsRange &&
      minHistogramLabeledHandle, !this.precise && !this.labelHandles && handle, !this.hasHistogram && !this.precise && this.labelHandles && labeledHandle, !this.hasHistogram && this.precise && !this.labelHandles && preciseHandle, this.hasHistogram && this.precise && !this.labelHandles && histogramPreciseHandle, !this.hasHistogram && this.precise && this.labelHandles && labeledPreciseHandle, this.hasHistogram && !this.precise && this.labelHandles && histogramLabeledHandle, this.hasHistogram &&
      this.precise &&
      this.labelHandles &&
      histogramLabeledPreciseHandle, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)(_form_js__WEBPACK_IMPORTED_MODULE_2__.H, { component: this })))));
  }
  renderGraph() {
    return this.histogram ? ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("calcite-graph", { class: "graph", colorStops: this.histogramStops, data: this.histogram, highlightMax: isRange(this.value) ? this.maxValue : this.value, highlightMin: isRange(this.value) ? this.minValue : this.min, max: this.max, min: this.min })) : null;
  }
  renderTickLabel(tick) {
    const valueIsRange = isRange(this.value);
    const isMinTickLabel = tick === this.min;
    const isMaxTickLabel = tick === this.max;
    const displayedTickValue = this.determineGroupSeparator(tick);
    const tickLabel = ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_10__.h)("span", { class: {
        tick__label: true,
        [CSS.tickMin]: isMinTickLabel,
        [CSS.tickMax]: isMaxTickLabel,
      } }, displayedTickValue));
    if (this.labelTicks && !this.hasHistogram && !valueIsRange) {
      return tickLabel;
    }
    if (this.labelTicks &&
      !this.hasHistogram &&
      valueIsRange &&
      !this.precise &&
      !this.labelHandles) {
      return tickLabel;
    }
    if (this.labelTicks &&
      !this.hasHistogram &&
      valueIsRange &&
      !this.precise &&
      this.labelHandles) {
      return tickLabel;
    }
    if (this.labelTicks &&
      !this.hasHistogram &&
      valueIsRange &&
      this.precise &&
      (isMinTickLabel || isMaxTickLabel)) {
      return tickLabel;
    }
    if (this.labelTicks && this.hasHistogram && !this.precise && !this.labelHandles) {
      return tickLabel;
    }
    if (this.labelTicks &&
      this.hasHistogram &&
      this.precise &&
      !this.labelHandles &&
      (isMinTickLabel || isMaxTickLabel)) {
      return tickLabel;
    }
    if (this.labelTicks &&
      this.hasHistogram &&
      !this.precise &&
      this.labelHandles &&
      (isMinTickLabel || isMaxTickLabel)) {
      return tickLabel;
    }
    if (this.labelTicks &&
      this.hasHistogram &&
      this.precise &&
      this.labelHandles &&
      (isMinTickLabel || isMaxTickLabel)) {
      return tickLabel;
    }
    return null;
  }
  //--------------------------------------------------------------------------
  //
  //  Event Listeners
  //
  //--------------------------------------------------------------------------
  keyDownHandler(event) {
    const mirror = this.shouldMirror();
    const { activeProp, max, min, pageStep, step } = this;
    const value = this[activeProp];
    const { key } = event;
    if ((0,_key_js__WEBPACK_IMPORTED_MODULE_4__.i)(key)) {
      event.preventDefault();
      return;
    }
    let adjustment;
    if (key === "ArrowUp" || key === "ArrowRight") {
      const directionFactor = mirror && key === "ArrowRight" ? -1 : 1;
      adjustment = value + step * directionFactor;
    }
    else if (key === "ArrowDown" || key === "ArrowLeft") {
      const directionFactor = mirror && key === "ArrowLeft" ? -1 : 1;
      adjustment = value - step * directionFactor;
    }
    else if (key === "PageUp") {
      if (pageStep) {
        adjustment = value + pageStep;
      }
    }
    else if (key === "PageDown") {
      if (pageStep) {
        adjustment = value - pageStep;
      }
    }
    else if (key === "Home") {
      adjustment = min;
    }
    else if (key === "End") {
      adjustment = max;
    }
    if (isNaN(adjustment)) {
      return;
    }
    event.preventDefault();
    const fixedDecimalAdjustment = Number(adjustment.toFixed((0,_math_js__WEBPACK_IMPORTED_MODULE_8__.d)(step)));
    this.setValue({
      [activeProp]: this.clamp(fixedDecimalAdjustment, activeProp),
    });
  }
  pointerDownHandler(event) {
    if (this.disabled || !(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
      return;
    }
    const x = event.clientX || event.pageX;
    const position = this.translate(x);
    let prop = "value";
    if (isRange(this.value)) {
      const inRange = position >= this.minValue && position <= this.maxValue;
      if (inRange && this.lastDragProp === "minMaxValue") {
        prop = "minMaxValue";
      }
      else {
        const closerToMax = Math.abs(this.maxValue - position) < Math.abs(this.minValue - position);
        prop = closerToMax || position > this.maxValue ? "maxValue" : "minValue";
      }
    }
    this.lastDragPropValue = this[prop];
    this.dragStart(prop);
    const isThumbActive = this.el.shadowRoot.querySelector(".thumb:active");
    if (!isThumbActive) {
      this.setValue({ [prop]: this.clamp(position, prop) });
    }
    this.focusActiveHandle(x);
  }
  handleTouchStart(event) {
    // needed to prevent extra click at the end of a handle drag
    event.preventDefault();
  }
  //--------------------------------------------------------------------------
  //
  //  Public Methods
  //
  //--------------------------------------------------------------------------
  /** Sets focus on the component. */
  async setFocus() {
    await (0,_loadable_js__WEBPACK_IMPORTED_MODULE_6__.c)(this);
    const handle = this.minHandle ? this.minHandle : this.maxHandle;
    handle?.focus();
  }
  //--------------------------------------------------------------------------
  //
  //  Private Methods
  //
  //--------------------------------------------------------------------------
  setValueFromMinMax() {
    const { minValue, maxValue } = this;
    if (typeof minValue === "number" && typeof maxValue === "number") {
      this.value = [minValue, maxValue];
    }
  }
  setMinMaxFromValue() {
    const { value } = this;
    if (isRange(value)) {
      this.minValue = value[0];
      this.maxValue = value[1];
    }
  }
  onLabelClick() {
    this.setFocus();
  }
  shouldMirror() {
    return this.mirrored && !this.hasHistogram;
  }
  shouldUseMinValue() {
    if (!isRange(this.value)) {
      return false;
    }
    return ((this.hasHistogram && this.maxValue === 0) || (!this.hasHistogram && this.minValue === 0));
  }
  getTickDensity() {
    const density = (this.max - this.min) / this.ticks / maxTickElementThreshold;
    return density < 1 ? 1 : density;
  }
  generateTickValues() {
    const tickInterval = this.ticks ?? 0;
    if (tickInterval <= 0) {
      return [];
    }
    const ticks = [this.min];
    const density = this.getTickDensity();
    const tickOffset = tickInterval * density;
    let current = this.min;
    while (current < this.max) {
      current += tickOffset;
      ticks.push(Math.min(current, this.max));
    }
    if (!ticks.includes(this.max)) {
      ticks.push(this.max);
    }
    return ticks;
  }
  pointerDownDragStart(event, prop) {
    if (!(0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.j)(event)) {
      return;
    }
    this.dragStart(prop);
  }
  dragStart(prop) {
    this.dragProp = prop;
    this.lastDragProp = this.dragProp;
    this.activeProp = prop;
    document.addEventListener("pointermove", this.dragUpdate);
    document.addEventListener("pointerup", this.pointerUpDragEnd);
    document.addEventListener("pointercancel", this.dragEnd);
  }
  focusActiveHandle(valueX) {
    switch (this.dragProp) {
      case "minValue":
        this.minHandle.focus();
        break;
      case "maxValue":
      case "value":
        this.maxHandle.focus();
        break;
      case "minMaxValue":
        this.getClosestHandle(valueX).focus();
        break;
    }
  }
  emitInput() {
    this.calciteSliderInput.emit();
  }
  emitChange() {
    this.calciteSliderChange.emit();
  }
  removeDragListeners() {
    document.removeEventListener("pointermove", this.dragUpdate);
    document.removeEventListener("pointerup", this.pointerUpDragEnd);
    document.removeEventListener("pointercancel", this.dragEnd);
  }
  /**
   * Set prop value(s) if changed at the component level
   *
   * @param {object} values - a set of key/value pairs delineating what properties in the component to update
   */
  setValue(values) {
    let valueChanged;
    Object.keys(values).forEach((propName) => {
      const newValue = values[propName];
      if (!valueChanged) {
        const oldValue = this[propName];
        valueChanged = oldValue !== newValue;
      }
      this[propName] = newValue;
    });
    if (!valueChanged) {
      return;
    }
    const dragging = this.dragProp;
    if (!dragging) {
      this.emitChange();
    }
    this.emitInput();
  }
  /**
   * If number is outside range, constrain to min or max
   *
   * @param value
   * @param prop
   * @internal
   */
  clamp(value, prop) {
    value = (0,_math_js__WEBPACK_IMPORTED_MODULE_8__.c)(value, this.min, this.max);
    // ensure that maxValue and minValue don't swap positions
    if (prop === "maxValue") {
      value = Math.max(value, this.minValue);
    }
    if (prop === "minValue") {
      value = Math.min(value, this.maxValue);
    }
    return value;
  }
  /**
   * Translate a pixel position to value along the range
   *
   * @param x
   * @internal
   */
  translate(x) {
    const range = this.max - this.min;
    const { left, width } = this.trackEl.getBoundingClientRect();
    const percent = (x - left) / width;
    const mirror = this.shouldMirror();
    const clampedValue = this.clamp(this.min + range * (mirror ? 1 - percent : percent));
    let value = Number(clampedValue.toFixed((0,_math_js__WEBPACK_IMPORTED_MODULE_8__.d)(this.step)));
    if (this.snap && this.step) {
      value = this.getClosestStep(value);
    }
    return value;
  }
  /**
   * Get closest allowed value along stepped values
   *
   * @param num
   * @internal
   */
  getClosestStep(num) {
    num = Number(this.clamp(num).toFixed((0,_math_js__WEBPACK_IMPORTED_MODULE_8__.d)(this.step)));
    if (this.step) {
      const step = Math.round(num / this.step) * this.step;
      num = Number(this.clamp(step).toFixed((0,_math_js__WEBPACK_IMPORTED_MODULE_8__.d)(this.step)));
    }
    return num;
  }
  getClosestHandle(valueX) {
    return this.getDistanceX(this.maxHandle, valueX) > this.getDistanceX(this.minHandle, valueX)
      ? this.minHandle
      : this.maxHandle;
  }
  getDistanceX(el, valueX) {
    return Math.abs(el.getBoundingClientRect().left - valueX);
  }
  getFontSizeForElement(element) {
    return Number(window.getComputedStyle(element).getPropertyValue("font-size").match(/\d+/)[0]);
  }
  /**
   * Get position of value along range as fractional value
   *
   * @param num
   * @return {number} number in the unit interval [0,1]
   * @internal
   */
  getUnitInterval(num) {
    num = this.clamp(num);
    const range = this.max - this.min;
    return (num - this.min) / range;
  }
  adjustHostObscuredHandleLabel(name) {
    const label = this.el.shadowRoot.querySelector(`.handle__label--${name}`);
    const labelStatic = this.el.shadowRoot.querySelector(`.handle__label--${name}.static`);
    const labelTransformed = this.el.shadowRoot.querySelector(`.handle__label--${name}.transformed`);
    const labelStaticBounds = labelStatic.getBoundingClientRect();
    const labelStaticOffset = this.getHostOffset(labelStaticBounds.left, labelStaticBounds.right);
    label.style.transform = `translateX(${labelStaticOffset}px)`;
    labelTransformed.style.transform = `translateX(${labelStaticOffset}px)`;
  }
  hyphenateCollidingRangeHandleLabels() {
    const { shadowRoot } = this.el;
    const mirror = this.shouldMirror();
    const leftModifier = mirror ? "value" : "minValue";
    const rightModifier = mirror ? "minValue" : "value";
    const leftValueLabel = shadowRoot.querySelector(`.handle__label--${leftModifier}`);
    const leftValueLabelStatic = shadowRoot.querySelector(`.handle__label--${leftModifier}.static`);
    const leftValueLabelTransformed = shadowRoot.querySelector(`.handle__label--${leftModifier}.transformed`);
    const leftValueLabelStaticHostOffset = this.getHostOffset(leftValueLabelStatic.getBoundingClientRect().left, leftValueLabelStatic.getBoundingClientRect().right);
    const rightValueLabel = shadowRoot.querySelector(`.handle__label--${rightModifier}`);
    const rightValueLabelStatic = shadowRoot.querySelector(`.handle__label--${rightModifier}.static`);
    const rightValueLabelTransformed = shadowRoot.querySelector(`.handle__label--${rightModifier}.transformed`);
    const rightValueLabelStaticHostOffset = this.getHostOffset(rightValueLabelStatic.getBoundingClientRect().left, rightValueLabelStatic.getBoundingClientRect().right);
    const labelFontSize = this.getFontSizeForElement(leftValueLabel);
    const labelTransformedOverlap = this.getRangeLabelOverlap(leftValueLabelTransformed, rightValueLabelTransformed);
    const hyphenLabel = leftValueLabel;
    const labelOffset = labelFontSize / 2;
    if (labelTransformedOverlap > 0) {
      hyphenLabel.classList.add("hyphen", "hyphen--wrap");
      if (rightValueLabelStaticHostOffset === 0 && leftValueLabelStaticHostOffset === 0) {
        // Neither handle overlaps the host boundary
        let leftValueLabelTranslate = labelTransformedOverlap / 2 - labelOffset;
        leftValueLabelTranslate =
          Math.sign(leftValueLabelTranslate) === -1
            ? Math.abs(leftValueLabelTranslate)
            : -leftValueLabelTranslate;
        const leftValueLabelTransformedHostOffset = this.getHostOffset(leftValueLabelTransformed.getBoundingClientRect().left +
          leftValueLabelTranslate -
          labelOffset, leftValueLabelTransformed.getBoundingClientRect().right +
          leftValueLabelTranslate -
          labelOffset);
        let rightValueLabelTranslate = labelTransformedOverlap / 2;
        const rightValueLabelTransformedHostOffset = this.getHostOffset(rightValueLabelTransformed.getBoundingClientRect().left + rightValueLabelTranslate, rightValueLabelTransformed.getBoundingClientRect().right + rightValueLabelTranslate);
        if (leftValueLabelTransformedHostOffset !== 0) {
          leftValueLabelTranslate += leftValueLabelTransformedHostOffset;
          rightValueLabelTranslate += leftValueLabelTransformedHostOffset;
        }
        if (rightValueLabelTransformedHostOffset !== 0) {
          leftValueLabelTranslate += rightValueLabelTransformedHostOffset;
          rightValueLabelTranslate += rightValueLabelTransformedHostOffset;
        }
        leftValueLabel.style.transform = `translateX(${leftValueLabelTranslate}px)`;
        leftValueLabelTransformed.style.transform = `translateX(${leftValueLabelTranslate - labelOffset}px)`;
        rightValueLabel.style.transform = `translateX(${rightValueLabelTranslate}px)`;
        rightValueLabelTransformed.style.transform = `translateX(${rightValueLabelTranslate}px)`;
      }
      else if (leftValueLabelStaticHostOffset > 0 || rightValueLabelStaticHostOffset > 0) {
        // labels overlap host boundary on the left side
        leftValueLabel.style.transform = `translateX(${leftValueLabelStaticHostOffset + labelOffset}px)`;
        rightValueLabel.style.transform = `translateX(${labelTransformedOverlap + rightValueLabelStaticHostOffset}px)`;
        rightValueLabelTransformed.style.transform = `translateX(${labelTransformedOverlap + rightValueLabelStaticHostOffset}px)`;
      }
      else if (leftValueLabelStaticHostOffset < 0 || rightValueLabelStaticHostOffset < 0) {
        // labels overlap host boundary on the right side
        let leftValueLabelTranslate = Math.abs(leftValueLabelStaticHostOffset) + labelTransformedOverlap - labelOffset;
        leftValueLabelTranslate =
          Math.sign(leftValueLabelTranslate) === -1
            ? Math.abs(leftValueLabelTranslate)
            : -leftValueLabelTranslate;
        leftValueLabel.style.transform = `translateX(${leftValueLabelTranslate}px)`;
        leftValueLabelTransformed.style.transform = `translateX(${leftValueLabelTranslate - labelOffset}px)`;
      }
    }
    else {
      hyphenLabel.classList.remove("hyphen", "hyphen--wrap");
      leftValueLabel.style.transform = `translateX(${leftValueLabelStaticHostOffset}px)`;
      leftValueLabelTransformed.style.transform = `translateX(${leftValueLabelStaticHostOffset}px)`;
      rightValueLabel.style.transform = `translateX(${rightValueLabelStaticHostOffset}px)`;
      rightValueLabelTransformed.style.transform = `translateX(${rightValueLabelStaticHostOffset}px)`;
    }
  }
  /**
   * Hides bounding tick labels that are obscured by either handle.
   */
  hideObscuredBoundingTickLabels() {
    const valueIsRange = isRange(this.value);
    if (!this.hasHistogram && !valueIsRange && !this.labelHandles && !this.precise) {
      return;
    }
    if (!this.hasHistogram && !valueIsRange && this.labelHandles && !this.precise) {
      return;
    }
    if (!this.hasHistogram && !valueIsRange && !this.labelHandles && this.precise) {
      return;
    }
    if (!this.hasHistogram && !valueIsRange && this.labelHandles && this.precise) {
      return;
    }
    if (!this.hasHistogram && valueIsRange && !this.precise) {
      return;
    }
    if (this.hasHistogram && !this.precise && !this.labelHandles) {
      return;
    }
    const minHandle = this.el.shadowRoot.querySelector(".thumb--minValue");
    const maxHandle = this.el.shadowRoot.querySelector(".thumb--value");
    const minTickLabel = this.el.shadowRoot.querySelector(".tick__label--min");
    const maxTickLabel = this.el.shadowRoot.querySelector(".tick__label--max");
    if (!minHandle && maxHandle && minTickLabel && maxTickLabel) {
      minTickLabel.style.opacity = this.isMinTickLabelObscured(minTickLabel, maxHandle) ? "0" : "1";
      maxTickLabel.style.opacity = this.isMaxTickLabelObscured(maxTickLabel, maxHandle) ? "0" : "1";
    }
    if (minHandle && maxHandle && minTickLabel && maxTickLabel) {
      minTickLabel.style.opacity =
        this.isMinTickLabelObscured(minTickLabel, minHandle) ||
          this.isMinTickLabelObscured(minTickLabel, maxHandle)
          ? "0"
          : "1";
      maxTickLabel.style.opacity =
        this.isMaxTickLabelObscured(maxTickLabel, minHandle) ||
          (this.isMaxTickLabelObscured(maxTickLabel, maxHandle) && this.hasHistogram)
          ? "0"
          : "1";
    }
  }
  /**
   * Returns an integer representing the number of pixels to offset on the left or right side based on desired position behavior.
   *
   * @param leftBounds
   * @param rightBounds
   * @internal
   */
  getHostOffset(leftBounds, rightBounds) {
    const hostBounds = this.el.getBoundingClientRect();
    const buffer = 7;
    if (leftBounds + buffer < hostBounds.left) {
      return hostBounds.left - leftBounds - buffer;
    }
    if (rightBounds - buffer > hostBounds.right) {
      return -(rightBounds - hostBounds.right) + buffer;
    }
    return 0;
  }
  /**
   * Returns an integer representing the number of pixels that the two given span elements are overlapping, taking into account
   * a space in between the two spans equal to the font-size set on them to account for the space needed to render a hyphen.
   *
   * @param leftLabel
   * @param rightLabel
   */
  getRangeLabelOverlap(leftLabel, rightLabel) {
    const leftLabelBounds = leftLabel.getBoundingClientRect();
    const rightLabelBounds = rightLabel.getBoundingClientRect();
    const leftLabelFontSize = this.getFontSizeForElement(leftLabel);
    const rangeLabelOverlap = leftLabelBounds.right + leftLabelFontSize - rightLabelBounds.left;
    return Math.max(rangeLabelOverlap, 0);
  }
  /**
   * Returns a boolean value representing if the minLabel span element is obscured (being overlapped) by the given handle div element.
   *
   * @param minLabel
   * @param handle
   */
  isMinTickLabelObscured(minLabel, handle) {
    const minLabelBounds = minLabel.getBoundingClientRect();
    const handleBounds = handle.getBoundingClientRect();
    return (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.l)(minLabelBounds, handleBounds);
  }
  /**
   * Returns a boolean value representing if the maxLabel span element is obscured (being overlapped) by the given handle div element.
   *
   * @param maxLabel
   * @param handle
   */
  isMaxTickLabelObscured(maxLabel, handle) {
    const maxLabelBounds = maxLabel.getBoundingClientRect();
    const handleBounds = handle.getBoundingClientRect();
    return (0,_dom_js__WEBPACK_IMPORTED_MODULE_1__.l)(maxLabelBounds, handleBounds);
  }
  static get delegatesFocus() { return true; }
  get el() { return this; }
  static get watchers() { return {
    "histogram": ["histogramWatcher"],
    "ticks": ["ticksWatcher"],
    "value": ["valueHandler"],
    "minValue": ["minMaxValueHandler"],
    "maxValue": ["minMaxValueHandler"]
  }; }
  static get style() { return sliderCss; }
}, [17, "calcite-slider", {
    "disabled": [516],
    "form": [513],
    "groupSeparator": [516, "group-separator"],
    "hasHistogram": [1540, "has-histogram"],
    "histogram": [16],
    "histogramStops": [16],
    "labelHandles": [516, "label-handles"],
    "labelTicks": [516, "label-ticks"],
    "max": [514],
    "maxLabel": [1, "max-label"],
    "maxValue": [1026, "max-value"],
    "min": [514],
    "minLabel": [1, "min-label"],
    "minValue": [1026, "min-value"],
    "mirrored": [516],
    "name": [513],
    "numberingSystem": [1, "numbering-system"],
    "pageStep": [514, "page-step"],
    "precise": [516],
    "required": [516],
    "snap": [516],
    "step": [514],
    "ticks": [514],
    "value": [1538],
    "scale": [513],
    "effectiveLocale": [32],
    "minMaxValueRange": [32],
    "minValueDragRange": [32],
    "maxValueDragRange": [32],
    "tickValues": [32],
    "setFocus": [64]
  }, [[0, "keydown", "keyDownHandler"], [1, "pointerdown", "pointerDownHandler"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-slider", "calcite-graph"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-slider":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Slider);
      }
      break;
    case "calcite-graph":
      if (!customElements.get(tagName)) {
        (0,_graph_js__WEBPACK_IMPORTED_MODULE_9__.d)();
      }
      break;
  } });
}
defineCustomElement$1();

const CalciteSlider = Slider;
const defineCustomElement = defineCustomElement$1;




/***/ }),

/***/ "./node_modules/@esri/calcite-components/dist/components/graph.js":
/*!************************************************************************!*\
  !*** ./node_modules/@esri/calcite-components/dist/components/graph.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ Graph),
/* harmony export */   d: () => (/* binding */ defineCustomElement)
/* harmony export */ });
/* harmony import */ var _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @stencil/core/internal/client/index.js */ "./node_modules/@stencil/core/internal/client/index.js");
/* harmony import */ var _guid_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./guid.js */ "./node_modules/@esri/calcite-components/dist/components/guid.js");
/* harmony import */ var _observers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observers.js */ "./node_modules/@esri/calcite-components/dist/components/observers.js");
/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.
 * v1.7.0
 */




/**
 * Calculate slope of the tangents
 * uses Steffen interpolation as it's monotonic
 * http://jrwalsh1.github.io/posts/interpolations/
 *
 * @param p0
 * @param p1
 * @param p2
 */
function slope(p0, p1, p2) {
  const dx = p1[0] - p0[0];
  const dx1 = p2[0] - p1[0];
  const dy = p1[1] - p0[1];
  const dy1 = p2[1] - p1[1];
  const m = dy / (dx || (dx1 < 0 && 0));
  const m1 = dy1 / (dx1 || (dx < 0 && 0));
  const p = (m * dx1 + m1 * dx) / (dx + dx1);
  return (Math.sign(m) + Math.sign(m1)) * Math.min(Math.abs(m), Math.abs(m1), 0.5 * Math.abs(p)) || 0;
}
/**
 * Calculate slope for just one tangent (single-sided)
 *
 * @param p0
 * @param p1
 * @param m
 */
function slopeSingle(p0, p1, m) {
  const dx = p1[0] - p0[0];
  const dy = p1[1] - p0[1];
  return dx ? ((3 * dy) / dx - m) / 2 : m;
}
/**
 * Given two points and their tangent slopes,
 * calculate the bezier handle coordinates and return draw command.
 *
 * Translates Hermite Spline to BÃ©zier curve:
 * https://stackoverflow.com/questions/42574940/
 *
 * @param p0
 * @param p1
 * @param m0
 * @param m1
 * @param t
 */
function bezier(p0, p1, m0, m1, t) {
  const [x0, y0] = p0;
  const [x1, y1] = p1;
  const dx = (x1 - x0) / 3;
  const h1 = t([x0 + dx, y0 + dx * m0]).join(",");
  const h2 = t([x1 - dx, y1 - dx * m1]).join(",");
  const p = t([x1, y1]).join(",");
  return `C ${h1} ${h2} ${p}`;
}
/**
 * Generate a function which will translate a point
 * from the data coordinate space to svg viewbox oriented pixels
 *
 * @param root0
 * @param root0.width
 * @param root0.height
 * @param root0.min
 * @param root0.max
 */
function translate({ width, height, min, max }) {
  const rangeX = max[0] - min[0];
  const rangeY = max[1] - min[1];
  return (point) => {
    const x = ((point[0] - min[0]) / rangeX) * width;
    const y = height - (point[1] / rangeY) * height;
    return [x, y];
  };
}
/**
 * Get the min and max values from the dataset
 *
 * @param data
 */
function range(data) {
  const [startX, startY] = data[0];
  const min = [startX, startY];
  const max = [startX, startY];
  return data.reduce(({ min, max }, [x, y]) => ({
    min: [Math.min(min[0], x), Math.min(min[1], y)],
    max: [Math.max(max[0], x), Math.max(max[1], y)],
  }), { min, max });
}
/**
 * Generate drawing commands for an area graph
 * returns a string can can be passed directly to a path element's `d` attribute
 *
 * @param root0
 * @param root0.data
 * @param root0.min
 * @param root0.max
 * @param root0.t
 */
function area({ data, min, max, t }) {
  if (data.length === 0) {
    return "";
  }
  // important points for beginning and ending the path
  const [startX, startY] = t(data[0]);
  const [minX, minY] = t(min);
  const [maxX] = t(max);
  // keep track of previous slope/points
  let m;
  let p0;
  let p1;
  // iterate over data points, calculating command for each
  const commands = data.reduce((acc, point, i) => {
    p0 = data[i - 2];
    p1 = data[i - 1];
    if (i > 1) {
      const m1 = slope(p0, p1, point);
      const m0 = m === undefined ? slopeSingle(p0, p1, m1) : m;
      const command = bezier(p0, p1, m0, m1, t);
      m = m1;
      return `${acc} ${command}`;
    }
    return acc;
  }, `M ${minX},${minY} L ${minX},${startY} L ${startX},${startY}`);
  // close the path
  const last = data[data.length - 1];
  const end = bezier(p1, last, m, slopeSingle(p1, last, m), t);
  return `${commands} ${end} L ${maxX},${minY} Z`;
}

const graphCss = ":host{display:block;block-size:100%}.svg{fill:currentColor;stroke:transparent;margin:0px;display:block;block-size:100%;inline-size:100%;padding:0px}.svg .graph-path--highlight{fill:var(--calcite-ui-brand);opacity:0.5}:host([hidden]){display:none}[hidden]{display:none}";

const Graph = /*@__PURE__*/ (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.proxyCustomElement)(class extends _stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.graphId = `calcite-graph-${(0,_guid_js__WEBPACK_IMPORTED_MODULE_0__.g)()}`;
    this.resizeObserver = (0,_observers_js__WEBPACK_IMPORTED_MODULE_1__.c)("resize", () => (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.forceUpdate)(this));
    this.data = [];
    this.colorStops = undefined;
    this.highlightMin = undefined;
    this.highlightMax = undefined;
    this.min = undefined;
    this.max = undefined;
  }
  //--------------------------------------------------------------------------
  //
  //  Lifecycle
  //
  //--------------------------------------------------------------------------
  connectedCallback() {
    this.resizeObserver?.observe(this.el);
  }
  disconnectedCallback() {
    this.resizeObserver?.disconnect();
  }
  render() {
    const { data, colorStops, el, highlightMax, highlightMin, min, max } = this;
    const id = this.graphId;
    const { clientHeight: height, clientWidth: width } = el;
    // if we have no data, return empty svg
    if (!data || data.length === 0) {
      return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("svg", { "aria-hidden": "true", class: "svg", height: height, preserveAspectRatio: "none", viewBox: `0 0 ${width} ${height}`, width: width }));
    }
    const { min: rangeMin, max: rangeMax } = range(data);
    let currentMin = rangeMin;
    let currentMax = rangeMax;
    if (min < rangeMin[0] || min > rangeMin[0]) {
      currentMin = [min, 0];
    }
    if (max > rangeMax[0] || max < rangeMax[0]) {
      currentMax = [max, rangeMax[1]];
    }
    const t = translate({ min: currentMin, max: currentMax, width, height });
    const [hMinX] = t([highlightMin, currentMax[1]]);
    const [hMaxX] = t([highlightMax, currentMax[1]]);
    const areaPath = area({ data, min: rangeMin, max: rangeMax, t });
    const fill = colorStops ? `url(#linear-gradient-${id})` : undefined;
    return ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("svg", { "aria-hidden": "true", class: "svg", height: height, preserveAspectRatio: "none", viewBox: `0 0 ${width} ${height}`, width: width }, colorStops ? ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("defs", null, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("linearGradient", { id: `linear-gradient-${id}`, x1: "0", x2: "1", y1: "0", y2: "0" }, colorStops.map(({ offset, color, opacity }) => ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("stop", { offset: `${offset * 100}%`, "stop-color": color, "stop-opacity": opacity })))))) : null, highlightMin !== undefined ? ([
      (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("mask", { height: "100%", id: `${id}1`, width: "100%", x: "0%", y: "0%" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("path", { d: `
            M 0,0
            L ${hMinX - 1},0
            L ${hMinX - 1},${height}
            L 0,${height}
            Z
          `, fill: "white" })),
      (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("mask", { height: "100%", id: `${id}2`, width: "100%", x: "0%", y: "0%" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("path", { d: `
            M ${hMinX + 1},0
            L ${hMaxX - 1},0
            L ${hMaxX - 1},${height}
            L ${hMinX + 1}, ${height}
            Z
          `, fill: "white" })),
      (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("mask", { height: "100%", id: `${id}3`, width: "100%", x: "0%", y: "0%" }, (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("path", { d: `
                M ${hMaxX + 1},0
                L ${width},0
                L ${width},${height}
                L ${hMaxX + 1}, ${height}
                Z
              `, fill: "white" })),
      (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("path", { class: "graph-path", d: areaPath, fill: fill, mask: `url(#${id}1)` }),
      (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("path", { class: "graph-path--highlight", d: areaPath, fill: fill, mask: `url(#${id}2)` }),
      (0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("path", { class: "graph-path", d: areaPath, fill: fill, mask: `url(#${id}3)` }),
    ]) : ((0,_stencil_core_internal_client_index_js__WEBPACK_IMPORTED_MODULE_2__.h)("path", { class: "graph-path", d: areaPath, fill: fill }))));
  }
  get el() { return this; }
  static get style() { return graphCss; }
}, [1, "calcite-graph", {
    "data": [16],
    "colorStops": [16],
    "highlightMin": [2, "highlight-min"],
    "highlightMax": [2, "highlight-max"],
    "min": [514],
    "max": [514]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["calcite-graph"];
  components.forEach(tagName => { switch (tagName) {
    case "calcite-graph":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, Graph);
      }
      break;
  } });
}
defineCustomElement();




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfZXNyaV9jYWxjaXRlLWNvbXBvbmVudHNfZGlzdF9jb21wb25lbnRzX2NhbGNpdGUtc2xpZGVyX2pzLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMrRztBQUN6RTtBQUNrQztBQUNzRDtBQUNYO0FBQ25FO0FBQ3lDO0FBQ3FCO0FBQ0o7QUFDL0M7QUFDSDs7QUFFeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0Msa0JBQWtCLGVBQWUseUJBQXlCLGlCQUFpQiwyQ0FBMkMsbURBQW1ELG9CQUFvQixVQUFVLHNDQUFzQyxnREFBZ0QsaUVBQWlFLGdEQUFnRCxtQkFBbUIsVUFBVSxzQ0FBc0MsZ0RBQWdELGlFQUFpRSxnREFBZ0QsaUJBQWlCLFVBQVUsa0NBQWtDLGlEQUFpRCxpRUFBaUUsZ0RBQWdELGlCQUFpQiw0QkFBNEIsOENBQThDLCtCQUErQixvREFBb0QsTUFBTSxjQUFjLFdBQVcsa0JBQWtCLGNBQWMscUJBQXFCLGtCQUFrQiw2REFBNkQsNERBQTRELDJEQUEyRCxnQkFBZ0Isc0lBQXNJLGtCQUFrQixnRUFBZ0UsMENBQTBDLHlHQUF5RyxVQUFVLHNDQUFzQywwQ0FBMEMsc0NBQXNDLHdDQUF3QyxzQ0FBc0MseUNBQXlDLCtEQUErRCxvRkFBb0YsaUJBQWlCLGtCQUFrQixxQkFBcUIsT0FBTyw4RUFBOEUsa0JBQWtCLFdBQVcsYUFBYSxlQUFlLHNCQUFzQixtQkFBbUIsa0JBQWtCLDZCQUE2QixZQUFZLG9CQUFvQiw4QkFBOEIsbUJBQW1CLGdHQUFnRywrREFBK0Qsa0JBQWtCLGdCQUFnQixVQUFVLG9DQUFvQyxjQUFjLHFCQUFxQixnQkFBZ0IsbUNBQW1DLGFBQWEsZUFBZSxzQkFBc0IscUJBQXFCLGdEQUFnRCwwQkFBMEIsNkNBQTZDLDhDQUE4QyxvREFBb0QsK0xBQStMLHlCQUF5Qixx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O0FBRWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3ludmlldy8uL25vZGVfbW9kdWxlcy9AZXNyaS9jYWxjaXRlLWNvbXBvbmVudHMvZGlzdC9jb21wb25lbnRzL2NhbGNpdGUtc2xpZGVyLmpzIiwid2VicGFjazovL3N5bnZpZXcvLi9ub2RlX21vZHVsZXMvQGVzcmkvY2FsY2l0ZS1jb21wb25lbnRzL2Rpc3QvY29tcG9uZW50cy9ncmFwaC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjEuNy4wXG4gKi9cbmltcG9ydCB7IHByb3h5Q3VzdG9tRWxlbWVudCwgSFRNTEVsZW1lbnQsIGNyZWF0ZUV2ZW50LCBoLCBIb3N0IH0gZnJvbSAnQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9jbGllbnQvaW5kZXguanMnO1xuaW1wb3J0IHsgZyBhcyBndWlkIH0gZnJvbSAnLi9ndWlkLmpzJztcbmltcG9ydCB7IGogYXMgaXNQcmltYXJ5UG9pbnRlckJ1dHRvbiwgbCBhcyBpbnRlcnNlY3RzIH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHsgYyBhcyBjb25uZWN0Rm9ybSwgZCBhcyBkaXNjb25uZWN0Rm9ybSwgYSBhcyBhZnRlckNvbm5lY3REZWZhdWx0VmFsdWVTZXQsIEggYXMgSGlkZGVuRm9ybUlucHV0U2xvdCB9IGZyb20gJy4vZm9ybS5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbm5lY3RJbnRlcmFjdGl2ZSwgZCBhcyBkaXNjb25uZWN0SW50ZXJhY3RpdmUsIHUgYXMgdXBkYXRlSG9zdEludGVyYWN0aW9uIH0gZnJvbSAnLi9pbnRlcmFjdGl2ZS5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzQWN0aXZhdGlvbktleSB9IGZyb20gJy4va2V5LmpzJztcbmltcG9ydCB7IGMgYXMgY29ubmVjdExhYmVsLCBkIGFzIGRpc2Nvbm5lY3RMYWJlbCwgZyBhcyBnZXRMYWJlbFRleHQgfSBmcm9tICcuL2xhYmVsMi5qcyc7XG5pbXBvcnQgeyBhIGFzIHNldFVwTG9hZGFibGVDb21wb25lbnQsIHMgYXMgc2V0Q29tcG9uZW50TG9hZGVkLCBjIGFzIGNvbXBvbmVudEZvY3VzYWJsZSB9IGZyb20gJy4vbG9hZGFibGUuanMnO1xuaW1wb3J0IHsgbiBhcyBudW1iZXJTdHJpbmdGb3JtYXR0ZXIsIGMgYXMgY29ubmVjdExvY2FsaXplZCwgZCBhcyBkaXNjb25uZWN0TG9jYWxpemVkIH0gZnJvbSAnLi9sb2NhbGUuanMnO1xuaW1wb3J0IHsgZCBhcyBkZWNpbWFsUGxhY2VzLCBjIGFzIGNsYW1wIH0gZnJvbSAnLi9tYXRoLmpzJztcbmltcG9ydCB7IGQgYXMgZGVmaW5lQ3VzdG9tRWxlbWVudCQyIH0gZnJvbSAnLi9ncmFwaC5qcyc7XG5cbmNvbnN0IENTUyA9IHtcbiAgaGFuZGxlTGFiZWw6IFwiaGFuZGxlX19sYWJlbFwiLFxuICBoYW5kbGVMYWJlbE1pblZhbHVlOiBcImhhbmRsZV9fbGFiZWwtLW1pblZhbHVlXCIsXG4gIGhhbmRsZUxhYmVsVmFsdWU6IFwiaGFuZGxlX19sYWJlbC0tdmFsdWVcIixcbiAgdGlja01pbjogXCJ0aWNrX19sYWJlbC0tbWluXCIsXG4gIHRpY2tNYXg6IFwidGlja19fbGFiZWwtLW1heFwiLFxufTtcbmNvbnN0IG1heFRpY2tFbGVtZW50VGhyZXNob2xkID0gMjUwO1xuXG5jb25zdCBzbGlkZXJDc3MgPSBcIkBjaGFyc2V0IFxcXCJVVEYtOFxcXCI7Omhvc3QoW2Rpc2FibGVkXSl7Y3Vyc29yOmRlZmF1bHQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7b3BhY2l0eTp2YXIoLS1jYWxjaXRlLXVpLW9wYWNpdHktZGlzYWJsZWQpfTpob3N0KFtkaXNhYmxlZF0pICosOmhvc3QoW2Rpc2FibGVkXSkgOjpzbG90dGVkKCope3BvaW50ZXItZXZlbnRzOm5vbmV9LnNjYWxlLS1zey0tY2FsY2l0ZS1zbGlkZXItaGFuZGxlLXNpemU6MC42MjVyZW07LS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtZXh0ZW5zaW9uLWhlaWdodDowLjRyZW07LS1jYWxjaXRlLXNsaWRlci1jb250YWluZXItZm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0zKX0uc2NhbGUtLXMgLmhhbmRsZV9fbGFiZWwsLnNjYWxlLS1zIC50aWNrX19sYWJlbHtsaW5lLWhlaWdodDouNzVyZW19LnNjYWxlLS1tey0tY2FsY2l0ZS1zbGlkZXItaGFuZGxlLXNpemU6MC44NzVyZW07LS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtZXh0ZW5zaW9uLWhlaWdodDowLjVyZW07LS1jYWxjaXRlLXNsaWRlci1jb250YWluZXItZm9udC1zaXplOnZhcigtLWNhbGNpdGUtZm9udC1zaXplLS0yKX0uc2NhbGUtLW0gLmhhbmRsZV9fbGFiZWwsLnNjYWxlLS1tIC50aWNrX19sYWJlbHtsaW5lLWhlaWdodDoxcmVtfS5zY2FsZS0tbHstLWNhbGNpdGUtc2xpZGVyLWhhbmRsZS1zaXplOjFyZW07LS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtZXh0ZW5zaW9uLWhlaWdodDowLjY1cmVtOy0tY2FsY2l0ZS1zbGlkZXItY29udGFpbmVyLWZvbnQtc2l6ZTp2YXIoLS1jYWxjaXRlLWZvbnQtc2l6ZS0tMSl9LnNjYWxlLS1sIC5oYW5kbGVfX2xhYmVsLC5zY2FsZS0tbCAudGlja19fbGFiZWx7bGluZS1oZWlnaHQ6MXJlbX0uaGFuZGxlX19sYWJlbCwudGlja19fbGFiZWx7Zm9udC13ZWlnaHQ6dmFyKC0tY2FsY2l0ZS1mb250LXdlaWdodC1tZWRpdW0pO2NvbG9yOnZhcigtLWNhbGNpdGUtdWktdGV4dC0yKTtmb250LXNpemU6dmFyKC0tY2FsY2l0ZS1zbGlkZXItY29udGFpbmVyLWZvbnQtc2l6ZSl9Omhvc3R7ZGlzcGxheTpibG9ja30uY29udGFpbmVye3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7b3ZlcmZsb3ctd3JhcDpub3JtYWw7d29yZC1icmVhazpub3JtYWw7cGFkZGluZy1pbmxpbmU6Y2FsYyh2YXIoLS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtc2l6ZSkgKiAwLjUpO3BhZGRpbmctYmxvY2s6Y2FsYyh2YXIoLS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtc2l6ZSkgKiAwLjUpO21hcmdpbi1ibG9jazpjYWxjKHZhcigtLWNhbGNpdGUtc2xpZGVyLWhhbmRsZS1zaXplKSAqIDAuNSk7bWFyZ2luLWlubGluZTowOy0tY2FsY2l0ZS1zbGlkZXItZnVsbC1oYW5kbGUtaGVpZ2h0OmNhbGMoXFxuICAgIHZhcigtLWNhbGNpdGUtc2xpZGVyLWhhbmRsZS1zaXplKSArIHZhcigtLWNhbGNpdGUtc2xpZGVyLWhhbmRsZS1leHRlbnNpb24taGVpZ2h0KVxcbiAgKTt0b3VjaC1hY3Rpb246bm9uZX06aG9zdChbZGlzYWJsZWRdKSAudHJhY2tfX3JhbmdlLDpob3N0KFtkaXNhYmxlZF0pIC50aWNrLS1hY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLXRleHQtMyl9Omhvc3QoW2Rpc2FibGVkXSkgOjpzbG90dGVkKFtjYWxjaXRlLWh5ZHJhdGVkXVtkaXNhYmxlZF0pLDpob3N0KFtkaXNhYmxlZF0pIFtjYWxjaXRlLWh5ZHJhdGVkXVtkaXNhYmxlZF17b3BhY2l0eToxfS5zY2FsZS0tcyAudGh1bWI6bm90KC50aHVtYi0tcHJlY2lzZSl7LS1jYWxjaXRlLXNsaWRlci10aHVtYi15LW9mZnNldDotMC4zNzVyZW19LnNjYWxlLS1tIC50aHVtYjpub3QoLnRodW1iLS1wcmVjaXNlKXstLWNhbGNpdGUtc2xpZGVyLXRodW1iLXktb2Zmc2V0Oi0wLjVyZW19LnNjYWxlLS1sIC50aHVtYjpub3QoLnRodW1iLS1wcmVjaXNlKXstLWNhbGNpdGUtc2xpZGVyLXRodW1iLXktb2Zmc2V0Oi0wLjU1cmVtfTpob3N0KFtwcmVjaXNlXTpub3QoW2hhcy1oaXN0b2dyYW1dKSkgLmNvbnRhaW5lciAudGh1bWItLXZhbHVley0tY2FsY2l0ZS1zbGlkZXItdGh1bWIteS1vZmZzZXQ6Y2FsYyh2YXIoLS1jYWxjaXRlLXNsaWRlci1mdWxsLWhhbmRsZS1oZWlnaHQpICogLTEpfS50aHVtYi1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7bWF4LWlubGluZS1zaXplOjEwMCV9LnRodW1iey0tY2FsY2l0ZS1zbGlkZXItdGh1bWIteC1vZmZzZXQ6Y2FsYyh2YXIoLS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtc2l6ZSkgKiAwLjUpO3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbjowcHg7ZGlzcGxheTpmbGV4O2N1cnNvcjpwb2ludGVyO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7Ym9yZGVyLXN0eWxlOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtwYWRkaW5nOjBweDtmb250LWZhbWlseTppbmhlcml0O291dGxpbmU6MnB4IHNvbGlkIHRyYW5zcGFyZW50O291dGxpbmUtb2Zmc2V0OjJweDt0cmFuc2Zvcm06dHJhbnNsYXRlKHZhcigtLWNhbGNpdGUtc2xpZGVyLXRodW1iLXgtb2Zmc2V0KSwgdmFyKC0tY2FsY2l0ZS1zbGlkZXItdGh1bWIteS1vZmZzZXQpKX0udGh1bWIgLmhhbmRsZV9fbGFiZWwuc3RhdGljLC50aHVtYiAuaGFuZGxlX19sYWJlbC50cmFuc2Zvcm1lZHtwb3NpdGlvbjphYnNvbHV0ZTtpbnNldC1ibG9jazowcHg7b3BhY2l0eTowfS50aHVtYiAuaGFuZGxlX19sYWJlbC5oeXBoZW46OmFmdGVye2NvbnRlbnQ6XFxcIuKAlFxcXCI7ZGlzcGxheTppbmxpbmUtYmxvY2s7aW5saW5lLXNpemU6MWVtfS50aHVtYiAuaGFuZGxlX19sYWJlbC5oeXBoZW4tLXdyYXB7ZGlzcGxheTpmbGV4fS50aHVtYiAuaGFuZGxle2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3JkZXItcmFkaXVzOjk5OTlweDtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNhbGNpdGUtdWktZm9yZWdyb3VuZC0xKTtvdXRsaW5lLWNvbG9yOnRyYW5zcGFyZW50O2Jsb2NrLXNpemU6dmFyKC0tY2FsY2l0ZS1zbGlkZXItaGFuZGxlLXNpemUpO2lubGluZS1zaXplOnZhcigtLWNhbGNpdGUtc2xpZGVyLWhhbmRsZS1zaXplKTtib3gtc2hhZG93OjAgMCAwIDJweCB2YXIoLS1jYWxjaXRlLXVpLXRleHQtMykgaW5zZXQ7dHJhbnNpdGlvbjpib3JkZXIgdmFyKC0tY2FsY2l0ZS1pbnRlcm5hbC1hbmltYXRpb24tdGltaW5nLW1lZGl1bSkgZWFzZSwgYmFja2dyb3VuZC1jb2xvciB2YXIoLS1jYWxjaXRlLWludGVybmFsLWFuaW1hdGlvbi10aW1pbmctbWVkaXVtKSBlYXNlLCBib3gtc2hhZG93IHZhcigtLWNhbGNpdGUtYW5pbWF0aW9uLXRpbWluZykgZWFzZX0udGh1bWIgLmhhbmRsZS1leHRlbnNpb257aW5saW5lLXNpemU6MC4xMjVyZW07YmxvY2stc2l6ZTp2YXIoLS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtZXh0ZW5zaW9uLWhlaWdodCk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLXRleHQtMyl9LnRodW1iOmhvdmVyIC5oYW5kbGV7Ym94LXNoYWRvdzowIDAgMCAzcHggdmFyKC0tY2FsY2l0ZS11aS1icmFuZCkgaW5zZXR9LnRodW1iOmhvdmVyIC5oYW5kbGUtZXh0ZW5zaW9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS11aS1icmFuZCl9LnRodW1iOmZvY3VzIC5oYW5kbGV7b3V0bGluZToycHggc29saWQgdmFyKC0tY2FsY2l0ZS11aS1mb2N1cy1jb2xvciwgdmFyKC0tY2FsY2l0ZS11aS1icmFuZCkpO291dGxpbmUtb2Zmc2V0OmNhbGMoXFxuICAgICAgICAgICAgMnB4ICpcXG4gICAgICAgICAgICBjYWxjKFxcbiAgICAgICAgICAgICAgMSAtXFxuICAgICAgICAgICAgICAyICogY2xhbXAoXFxuICAgICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAgIHZhcigtLWNhbGNpdGUtdWktZm9jdXMtb2Zmc2V0LWludmVydCksXFxuICAgICAgICAgICAgICAgIDFcXG4gICAgICAgICAgICAgIClcXG4gICAgICAgICAgICApXFxuICAgICAgICAgICl9LnRodW1iOmZvY3VzIC5oYW5kbGUtZXh0ZW5zaW9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS11aS1icmFuZCl9LnRodW1iLnRodW1iLS1taW5WYWx1ZXt0cmFuc2Zvcm06dHJhbnNsYXRlKGNhbGModmFyKC0tY2FsY2l0ZS1zbGlkZXItdGh1bWIteC1vZmZzZXQpICogLTEpLCB2YXIoLS1jYWxjaXRlLXNsaWRlci10aHVtYi15LW9mZnNldCkpfS50aHVtYi50aHVtYi0tcHJlY2lzZXstLWNhbGNpdGUtc2xpZGVyLXRodW1iLXktb2Zmc2V0Oi0wLjEyNXJlbX06aG9zdChbbGFiZWwtaGFuZGxlc10pIC50aHVtYnstLWNhbGNpdGUtc2xpZGVyLXRodW1iLXgtb2Zmc2V0OjUwJX06aG9zdChbbGFiZWwtaGFuZGxlc10pOmhvc3QoOm5vdChbaGFzLWhpc3RvZ3JhbV0pKSAuc2NhbGUtLXMgLnRodW1iOm5vdCgudGh1bWItLXByZWNpc2Upey0tY2FsY2l0ZS1zbGlkZXItdGh1bWIteS1vZmZzZXQ6LTEuNDM3NXJlbX06aG9zdChbbGFiZWwtaGFuZGxlc10pOmhvc3QoOm5vdChbaGFzLWhpc3RvZ3JhbV0pKSAuc2NhbGUtLW0gLnRodW1iOm5vdCgudGh1bWItLXByZWNpc2Upey0tY2FsY2l0ZS1zbGlkZXItdGh1bWIteS1vZmZzZXQ6LTEuODc1cmVtfTpob3N0KFtsYWJlbC1oYW5kbGVzXSk6aG9zdCg6bm90KFtoYXMtaGlzdG9ncmFtXSkpIC5zY2FsZS0tbCAudGh1bWI6bm90KC50aHVtYi0tcHJlY2lzZSl7LS1jYWxjaXRlLXNsaWRlci10aHVtYi15LW9mZnNldDotMnJlbX06aG9zdChbaGFzLWhpc3RvZ3JhbV1bbGFiZWwtaGFuZGxlc10pIC5oYW5kbGVfX2xhYmVsLDpob3N0KFtsYWJlbC1oYW5kbGVzXTpub3QoW2hhcy1oaXN0b2dyYW1dKSkgLnRodW1iLS1taW5WYWx1ZS50aHVtYi0tcHJlY2lzZSAuaGFuZGxlX19sYWJlbHttYXJnaW4tYmxvY2stc3RhcnQ6MC41ZW19Omhvc3QoOm5vdChbaGFzLWhpc3RvZ3JhbV0pOm5vdChbcHJlY2lzZV0pKSAuaGFuZGxlX19sYWJlbCw6aG9zdChbbGFiZWwtaGFuZGxlc106bm90KFtoYXMtaGlzdG9ncmFtXSkpIC50aHVtYi0tdmFsdWUgLmhhbmRsZV9fbGFiZWx7bWFyZ2luLWJsb2NrLWVuZDowLjVlbX06aG9zdChbbGFiZWwtaGFuZGxlc11bcHJlY2lzZV0pOmhvc3QoOm5vdChbaGFzLWhpc3RvZ3JhbV0pKSAuc2NhbGUtLXMgLnRodW1iLS12YWx1ZXstLWNhbGNpdGUtc2xpZGVyLXRodW1iLXktb2Zmc2V0Oi0yLjA3NXJlbX06aG9zdChbbGFiZWwtaGFuZGxlc11bcHJlY2lzZV0pOmhvc3QoOm5vdChbaGFzLWhpc3RvZ3JhbV0pKSAuc2NhbGUtLW0gLnRodW1iLS12YWx1ZXstLWNhbGNpdGUtc2xpZGVyLXRodW1iLXktb2Zmc2V0Oi0yLjc1cmVtfTpob3N0KFtsYWJlbC1oYW5kbGVzXVtwcmVjaXNlXSk6aG9zdCg6bm90KFtoYXMtaGlzdG9ncmFtXSkpIC5zY2FsZS0tbCAudGh1bWItLXZhbHVley0tY2FsY2l0ZS1zbGlkZXItdGh1bWIteS1vZmZzZXQ6LTMuMDYyNXJlbX0udGh1bWI6Zm9jdXMgLmhhbmRsZSwudGh1bWItLWFjdGl2ZSAuaGFuZGxle2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS11aS1icmFuZCk7Ym94LXNoYWRvdzowIDAgOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjE2KX0udGh1bWI6aG92ZXIudGh1bWItLXByZWNpc2U6YWZ0ZXIsLnRodW1iOmZvY3VzLnRodW1iLS1wcmVjaXNlOmFmdGVyLC50aHVtYi0tYWN0aXZlLnRodW1iLS1wcmVjaXNlOmFmdGVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2FsY2l0ZS11aS1icmFuZCl9LnRyYWNre3Bvc2l0aW9uOnJlbGF0aXZlO2Jsb2NrLXNpemU6MC4xMjVyZW07Ym9yZGVyLXJhZGl1czowcHg7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci0yKTt0cmFuc2l0aW9uOmFsbCB2YXIoLS1jYWxjaXRlLWludGVybmFsLWFuaW1hdGlvbi10aW1pbmctbWVkaXVtKSBlYXNlLWlufS50cmFja19fcmFuZ2V7cG9zaXRpb246YWJzb2x1dGU7aW5zZXQtYmxvY2stc3RhcnQ6MHB4O2Jsb2NrLXNpemU6MC4xMjVyZW07YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJyYW5kKX0uY29udGFpbmVyLS1yYW5nZSAudHJhY2tfX3JhbmdlOmhvdmVye2N1cnNvcjpldy1yZXNpemV9LmNvbnRhaW5lci0tcmFuZ2UgLnRyYWNrX19yYW5nZTphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTtpbmxpbmUtc2l6ZToxMDAlO2NvbnRlbnQ6XFxcIlxcXCI7aW5zZXQtYmxvY2stc3RhcnQ6Y2FsYyh2YXIoLS1jYWxjaXRlLXNsaWRlci1mdWxsLWhhbmRsZS1oZWlnaHQpICogMC41ICogLTEpO2Jsb2NrLXNpemU6Y2FsYyh2YXIoLS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtc2l6ZSkgKyB2YXIoLS1jYWxjaXRlLXNsaWRlci1oYW5kbGUtZXh0ZW5zaW9uLWhlaWdodCkpfUBtZWRpYSAoZm9yY2VkLWNvbG9yczogYWN0aXZlKXsudGh1bWJ7b3V0bGluZS13aWR0aDowO291dGxpbmUtb2Zmc2V0OjB9LmhhbmRsZXtvdXRsaW5lOjJweCBzb2xpZCB0cmFuc3BhcmVudDtvdXRsaW5lLW9mZnNldDoycHh9LnRodW1iOmZvY3VzIC5oYW5kbGUsLnRodW1iIC5oYW5kbGUtZXh0ZW5zaW9uLC50aHVtYjpob3ZlciAuaGFuZGxlLWV4dGVuc2lvbiwudGh1bWI6Zm9jdXMgLmhhbmRsZS1leHRlbnNpb24sLnRodW1iOmFjdGl2ZSAuaGFuZGxlLWV4dGVuc2lvbntiYWNrZ3JvdW5kLWNvbG9yOmNhbnZhc1RleHR9LnRyYWNre2JhY2tncm91bmQtY29sb3I6Y2FudmFzVGV4dH0udHJhY2tfX3Jhbmdle2JhY2tncm91bmQtY29sb3I6aGlnaGxpZ2h0fX0udGlja3twb3NpdGlvbjphYnNvbHV0ZTtibG9jay1zaXplOjAuMjVyZW07aW5saW5lLXNpemU6MC4xMjVyZW07Ym9yZGVyLXdpZHRoOjFweDtib3JkZXItc3R5bGU6c29saWQ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJvcmRlci1pbnB1dCk7Ym9yZGVyLWNvbG9yOnZhcigtLWNhbGNpdGUtdWktZm9yZWdyb3VuZC0xKTtpbnNldC1ibG9jay1zdGFydDotMnB4O3BvaW50ZXItZXZlbnRzOm5vbmU7bWFyZ2luLWlubGluZS1zdGFydDpjYWxjKC0xICogMC4xMjVyZW0pfS50aWNrLS1hY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jYWxjaXRlLXVpLWJyYW5kKX0udGlja19fbGFiZWx7cG9pbnRlci1ldmVudHM6bm9uZTttYXJnaW4tYmxvY2stc3RhcnQ6MC44NzVyZW07ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnRpY2tfX2xhYmVsLS1taW57dHJhbnNpdGlvbjpvcGFjaXR5IHZhcigtLWNhbGNpdGUtYW5pbWF0aW9uLXRpbWluZyl9LnRpY2tfX2xhYmVsLS1tYXh7dHJhbnNpdGlvbjpvcGFjaXR5IHZhcigtLWNhbGNpdGUtaW50ZXJuYWwtYW5pbWF0aW9uLXRpbWluZy1mYXN0KX06aG9zdChbaGFzLWhpc3RvZ3JhbV1bbGFiZWwtaGFuZGxlc10pIC50aWNrX19sYWJlbC0tbWluLDpob3N0KFtoYXMtaGlzdG9ncmFtXVtsYWJlbC1oYW5kbGVzXSkgLnRpY2tfX2xhYmVsLS1tYXgsOmhvc3QoW2hhcy1oaXN0b2dyYW1dW3ByZWNpc2VdKSAudGlja19fbGFiZWwtLW1pbiw6aG9zdChbaGFzLWhpc3RvZ3JhbV1bcHJlY2lzZV0pIC50aWNrX19sYWJlbC0tbWF4e2ZvbnQtd2VpZ2h0OnZhcigtLWNhbGNpdGUtZm9udC13ZWlnaHQtbm9ybWFsKTtjb2xvcjp2YXIoLS1jYWxjaXRlLXVpLXRleHQtMyl9LmdyYXBoe2NvbG9yOnZhcigtLWNhbGNpdGUtdWktZm9yZWdyb3VuZC0zKTtibG9jay1zaXplOjQ4cHh9Omhvc3QoW2xhYmVsLXRpY2tzXVt0aWNrc10pIC5jb250YWluZXJ7cGFkZGluZy1ibG9jay1lbmQ6Y2FsYygwLjg3NXJlbSArIHZhcigtLWNhbGNpdGUtc2xpZGVyLWNvbnRhaW5lci1mb250LXNpemUpKX06aG9zdChbaGFzLWhpc3RvZ3JhbV0pOmhvc3QoW3ByZWNpc2VdW2xhYmVsLWhhbmRsZXNdKSAuY29udGFpbmVye3BhZGRpbmctYmxvY2stZW5kOmNhbGModmFyKC0tY2FsY2l0ZS1zbGlkZXItZnVsbC1oYW5kbGUtaGVpZ2h0KSArIDFlbSl9Omhvc3QoW2hhcy1oaXN0b2dyYW1dKTpob3N0KFtsYWJlbC1oYW5kbGVzXTpub3QoW3ByZWNpc2VdKSkgLmNvbnRhaW5lcntwYWRkaW5nLWJsb2NrLWVuZDpjYWxjKHZhcigtLWNhbGNpdGUtc2xpZGVyLWhhbmRsZS1zaXplKSAqIDAuNSArIDFlbSl9Omhvc3QoW2hhcy1oaXN0b2dyYW1dKTpob3N0KFtwcmVjaXNlXTpub3QoW2xhYmVsLWhhbmRsZXNdKSkgLmNvbnRhaW5lcntwYWRkaW5nLWJsb2NrLWVuZDp2YXIoLS1jYWxjaXRlLXNsaWRlci1mdWxsLWhhbmRsZS1oZWlnaHQpfTpob3N0KDpub3QoW2hhcy1oaXN0b2dyYW1dKSk6aG9zdChbcHJlY2lzZV06bm90KFtsYWJlbC1oYW5kbGVzXSkpIC5jb250YWluZXJ7cGFkZGluZy1ibG9jay1zdGFydDp2YXIoLS1jYWxjaXRlLXNsaWRlci1mdWxsLWhhbmRsZS1oZWlnaHQpfTpob3N0KDpub3QoW2hhcy1oaXN0b2dyYW1dKSk6aG9zdChbcHJlY2lzZV06bm90KFtsYWJlbC1oYW5kbGVzXSkpIC5jb250YWluZXItLXJhbmdle3BhZGRpbmctYmxvY2stZW5kOnZhcigtLWNhbGNpdGUtc2xpZGVyLWZ1bGwtaGFuZGxlLWhlaWdodCl9Omhvc3QoOm5vdChbaGFzLWhpc3RvZ3JhbV0pKTpob3N0KFtsYWJlbC1oYW5kbGVzXTpub3QoW3ByZWNpc2VdKSkgLmNvbnRhaW5lcntwYWRkaW5nLWJsb2NrLXN0YXJ0OmNhbGModmFyKC0tY2FsY2l0ZS1zbGlkZXItZnVsbC1oYW5kbGUtaGVpZ2h0KSArIDRweCl9Omhvc3QoOm5vdChbaGFzLWhpc3RvZ3JhbV0pKTpob3N0KFtsYWJlbC1oYW5kbGVzXVtwcmVjaXNlXSkgLmNvbnRhaW5lcntwYWRkaW5nLWJsb2NrLXN0YXJ0OmNhbGModmFyKC0tY2FsY2l0ZS1zbGlkZXItZnVsbC1oYW5kbGUtaGVpZ2h0KSArIHZhcigtLWNhbGNpdGUtc2xpZGVyLWNvbnRhaW5lci1mb250LXNpemUpICsgNHB4KX06aG9zdCg6bm90KFtoYXMtaGlzdG9ncmFtXSkpOmhvc3QoW2xhYmVsLWhhbmRsZXNdW3ByZWNpc2VdKSAuY29udGFpbmVyLS1yYW5nZXtwYWRkaW5nLWJsb2NrLWVuZDpjYWxjKHZhcigtLWNhbGNpdGUtc2xpZGVyLWZ1bGwtaGFuZGxlLWhlaWdodCkgKyB2YXIoLS1jYWxjaXRlLXNsaWRlci1jb250YWluZXItZm9udC1zaXplKSArIDRweCl9OjpzbG90dGVkKGlucHV0W3Nsb3Q9aGlkZGVuLWZvcm0taW5wdXRdKXttYXJnaW46MCAhaW1wb3J0YW50O29wYWNpdHk6MCAhaW1wb3J0YW50O291dGxpbmU6bm9uZSAhaW1wb3J0YW50O3BhZGRpbmc6MCAhaW1wb3J0YW50O3Bvc2l0aW9uOmFic29sdXRlICFpbXBvcnRhbnQ7aW5zZXQ6MCAhaW1wb3J0YW50O3RyYW5zZm9ybTpub25lICFpbXBvcnRhbnQ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmUgIWltcG9ydGFudDt6LWluZGV4Oi0xICFpbXBvcnRhbnR9Omhvc3QoW2hpZGRlbl0pe2Rpc3BsYXk6bm9uZX1baGlkZGVuXXtkaXNwbGF5Om5vbmV9XCI7XG5cbmZ1bmN0aW9uIGlzUmFuZ2UodmFsdWUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufVxuY29uc3QgU2xpZGVyID0gLypAX19QVVJFX18qLyBwcm94eUN1c3RvbUVsZW1lbnQoY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fX3JlZ2lzdGVySG9zdCgpO1xuICAgIHRoaXMuX19hdHRhY2hTaGFkb3coKTtcbiAgICB0aGlzLmNhbGNpdGVTbGlkZXJJbnB1dCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZVNsaWRlcklucHV0XCIsIDYpO1xuICAgIHRoaXMuY2FsY2l0ZVNsaWRlckNoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiY2FsY2l0ZVNsaWRlckNoYW5nZVwiLCA2KTtcbiAgICB0aGlzLmFjdGl2ZVByb3AgPSBcInZhbHVlXCI7XG4gICAgdGhpcy5ndWlkID0gYGNhbGNpdGUtc2xpZGVyLSR7Z3VpZCgpfWA7XG4gICAgdGhpcy5kcmFnVXBkYXRlID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHRoaXMuZHJhZ1Byb3ApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnRyYW5zbGF0ZShldmVudC5jbGllbnRYIHx8IGV2ZW50LnBhZ2VYKTtcbiAgICAgICAgaWYgKGlzUmFuZ2UodGhpcy52YWx1ZSkgJiYgdGhpcy5kcmFnUHJvcCA9PT0gXCJtaW5NYXhWYWx1ZVwiKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWluVmFsdWVEcmFnUmFuZ2UgJiYgdGhpcy5tYXhWYWx1ZURyYWdSYW5nZSAmJiB0aGlzLm1pbk1heFZhbHVlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld01pblZhbHVlID0gdmFsdWUgLSB0aGlzLm1pblZhbHVlRHJhZ1JhbmdlO1xuICAgICAgICAgICAgY29uc3QgbmV3TWF4VmFsdWUgPSB2YWx1ZSArIHRoaXMubWF4VmFsdWVEcmFnUmFuZ2U7XG4gICAgICAgICAgICBpZiAobmV3TWF4VmFsdWUgPD0gdGhpcy5tYXggJiZcbiAgICAgICAgICAgICAgbmV3TWluVmFsdWUgPj0gdGhpcy5taW4gJiZcbiAgICAgICAgICAgICAgbmV3TWF4VmFsdWUgLSBuZXdNaW5WYWx1ZSA9PT0gdGhpcy5taW5NYXhWYWx1ZVJhbmdlKSB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoe1xuICAgICAgICAgICAgICAgIG1pblZhbHVlOiB0aGlzLmNsYW1wKG5ld01pblZhbHVlLCBcIm1pblZhbHVlXCIpLFxuICAgICAgICAgICAgICAgIG1heFZhbHVlOiB0aGlzLmNsYW1wKG5ld01heFZhbHVlLCBcIm1heFZhbHVlXCIpLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1pblZhbHVlRHJhZ1JhbmdlID0gdmFsdWUgLSB0aGlzLm1pblZhbHVlO1xuICAgICAgICAgICAgdGhpcy5tYXhWYWx1ZURyYWdSYW5nZSA9IHRoaXMubWF4VmFsdWUgLSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMubWluTWF4VmFsdWVSYW5nZSA9IHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFZhbHVlKHsgW3RoaXMuZHJhZ1Byb3BdOiB0aGlzLmNsYW1wKHZhbHVlLCB0aGlzLmRyYWdQcm9wKSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5wb2ludGVyVXBEcmFnRW5kID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCAhaXNQcmltYXJ5UG9pbnRlckJ1dHRvbihldmVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5kcmFnRW5kKGV2ZW50KTtcbiAgICB9O1xuICAgIHRoaXMuZHJhZ0VuZCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5yZW1vdmVEcmFnTGlzdGVuZXJzKCk7XG4gICAgICB0aGlzLmZvY3VzQWN0aXZlSGFuZGxlKGV2ZW50LmNsaWVudFgpO1xuICAgICAgaWYgKHRoaXMubGFzdERyYWdQcm9wVmFsdWUgIT0gdGhpc1t0aGlzLmRyYWdQcm9wXSkge1xuICAgICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZHJhZ1Byb3AgPSBudWxsO1xuICAgICAgdGhpcy5sYXN0RHJhZ1Byb3BWYWx1ZSA9IG51bGw7XG4gICAgICB0aGlzLm1pblZhbHVlRHJhZ1JhbmdlID0gbnVsbDtcbiAgICAgIHRoaXMubWF4VmFsdWVEcmFnUmFuZ2UgPSBudWxsO1xuICAgICAgdGhpcy5taW5NYXhWYWx1ZVJhbmdlID0gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgcmVmZXJlbmNlIG9mIHRoZSB0cmFjayBFbGVtZW50XG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqL1xuICAgIHRoaXMuc3RvcmVUcmFja1JlZiA9IChub2RlKSA9PiB7XG4gICAgICB0aGlzLnRyYWNrRWwgPSBub2RlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGxvY2FsaXplZCBsYWJlbCB2YWx1ZSBiYXNlZCBpZiB0aGUgZ3JvdXBTZXBhcmF0b3IgcHJvcCBpcyBwYXJzZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLmRldGVybWluZUdyb3VwU2VwYXJhdG9yID0gKHZhbHVlKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIG51bWJlclN0cmluZ0Zvcm1hdHRlci5udW1iZXJGb3JtYXRPcHRpb25zID0ge1xuICAgICAgICAgIGxvY2FsZTogdGhpcy5lZmZlY3RpdmVMb2NhbGUsXG4gICAgICAgICAgbnVtYmVyaW5nU3lzdGVtOiB0aGlzLm51bWJlcmluZ1N5c3RlbSxcbiAgICAgICAgICB1c2VHcm91cGluZzogdGhpcy5ncm91cFNlcGFyYXRvcixcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG51bWJlclN0cmluZ0Zvcm1hdHRlci5sb2NhbGl6ZSh2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZvcm0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ncm91cFNlcGFyYXRvciA9IGZhbHNlO1xuICAgIHRoaXMuaGFzSGlzdG9ncmFtID0gZmFsc2U7XG4gICAgdGhpcy5oaXN0b2dyYW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oaXN0b2dyYW1TdG9wcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxhYmVsSGFuZGxlcyA9IGZhbHNlO1xuICAgIHRoaXMubGFiZWxUaWNrcyA9IGZhbHNlO1xuICAgIHRoaXMubWF4ID0gMTAwO1xuICAgIHRoaXMubWF4TGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXhWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1pbiA9IDA7XG4gICAgdGhpcy5taW5MYWJlbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1pblZhbHVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMubWlycm9yZWQgPSBmYWxzZTtcbiAgICB0aGlzLm5hbWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5wYWdlU3RlcCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnByZWNpc2UgPSBmYWxzZTtcbiAgICB0aGlzLnJlcXVpcmVkID0gZmFsc2U7XG4gICAgdGhpcy5zbmFwID0gZmFsc2U7XG4gICAgdGhpcy5zdGVwID0gMTtcbiAgICB0aGlzLnRpY2tzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudmFsdWUgPSAwO1xuICAgIHRoaXMuc2NhbGUgPSBcIm1cIjtcbiAgICB0aGlzLmVmZmVjdGl2ZUxvY2FsZSA9IFwiXCI7XG4gICAgdGhpcy5taW5NYXhWYWx1ZVJhbmdlID0gbnVsbDtcbiAgICB0aGlzLm1pblZhbHVlRHJhZ1JhbmdlID0gbnVsbDtcbiAgICB0aGlzLm1heFZhbHVlRHJhZ1JhbmdlID0gbnVsbDtcbiAgICB0aGlzLnRpY2tWYWx1ZXMgPSBbXTtcbiAgfVxuICBoaXN0b2dyYW1XYXRjaGVyKG5ld0hpc3RvZ3JhbSkge1xuICAgIHRoaXMuaGFzSGlzdG9ncmFtID0gISFuZXdIaXN0b2dyYW07XG4gIH1cbiAgdGlja3NXYXRjaGVyKCkge1xuICAgIHRoaXMudGlja1ZhbHVlcyA9IHRoaXMuZ2VuZXJhdGVUaWNrVmFsdWVzKCk7XG4gIH1cbiAgdmFsdWVIYW5kbGVyKCkge1xuICAgIHRoaXMuc2V0TWluTWF4RnJvbVZhbHVlKCk7XG4gIH1cbiAgbWluTWF4VmFsdWVIYW5kbGVyKCkge1xuICAgIHRoaXMuc2V0VmFsdWVGcm9tTWluTWF4KCk7XG4gIH1cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgTGlmZWN5Y2xlXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgY29ubmVjdEludGVyYWN0aXZlKHRoaXMpO1xuICAgIGNvbm5lY3RMb2NhbGl6ZWQodGhpcyk7XG4gICAgdGhpcy5zZXRNaW5NYXhGcm9tVmFsdWUoKTtcbiAgICB0aGlzLnNldFZhbHVlRnJvbU1pbk1heCgpO1xuICAgIGNvbm5lY3RMYWJlbCh0aGlzKTtcbiAgICBjb25uZWN0Rm9ybSh0aGlzKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBkaXNjb25uZWN0SW50ZXJhY3RpdmUodGhpcyk7XG4gICAgZGlzY29ubmVjdExhYmVsKHRoaXMpO1xuICAgIGRpc2Nvbm5lY3RGb3JtKHRoaXMpO1xuICAgIGRpc2Nvbm5lY3RMb2NhbGl6ZWQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVEcmFnTGlzdGVuZXJzKCk7XG4gIH1cbiAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgc2V0VXBMb2FkYWJsZUNvbXBvbmVudCh0aGlzKTtcbiAgICBpZiAoIWlzUmFuZ2UodGhpcy52YWx1ZSkpIHtcbiAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnNuYXAgPyB0aGlzLmdldENsb3Nlc3RTdGVwKHRoaXMudmFsdWUpIDogdGhpcy5jbGFtcCh0aGlzLnZhbHVlKTtcbiAgICB9XG4gICAgdGhpcy50aWNrc1dhdGNoZXIoKTtcbiAgICB0aGlzLmhpc3RvZ3JhbVdhdGNoZXIodGhpcy5oaXN0b2dyYW0pO1xuICAgIGFmdGVyQ29ubmVjdERlZmF1bHRWYWx1ZVNldCh0aGlzLCB0aGlzLnZhbHVlKTtcbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHNldENvbXBvbmVudExvYWRlZCh0aGlzKTtcbiAgfVxuICBjb21wb25lbnREaWRSZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMubGFiZWxIYW5kbGVzKSB7XG4gICAgICB0aGlzLmFkanVzdEhvc3RPYnNjdXJlZEhhbmRsZUxhYmVsKFwidmFsdWVcIik7XG4gICAgICBpZiAoaXNSYW5nZSh0aGlzLnZhbHVlKSkge1xuICAgICAgICB0aGlzLmFkanVzdEhvc3RPYnNjdXJlZEhhbmRsZUxhYmVsKFwibWluVmFsdWVcIik7XG4gICAgICAgIGlmICghKHRoaXMucHJlY2lzZSAmJiAhdGhpcy5oYXNIaXN0b2dyYW0pKSB7XG4gICAgICAgICAgdGhpcy5oeXBoZW5hdGVDb2xsaWRpbmdSYW5nZUhhbmRsZUxhYmVscygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuaGlkZU9ic2N1cmVkQm91bmRpbmdUaWNrTGFiZWxzKCk7XG4gICAgdXBkYXRlSG9zdEludGVyYWN0aW9uKHRoaXMpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpZCA9IHRoaXMuZWwuaWQgfHwgdGhpcy5ndWlkO1xuICAgIGNvbnN0IG1heFByb3AgPSBpc1JhbmdlKHRoaXMudmFsdWUpID8gXCJtYXhWYWx1ZVwiIDogXCJ2YWx1ZVwiO1xuICAgIGNvbnN0IHZhbHVlID0gaXNSYW5nZSh0aGlzLnZhbHVlKSA/IHRoaXMubWF4VmFsdWUgOiB0aGlzLnZhbHVlO1xuICAgIGNvbnN0IGRpc3BsYXllZFZhbHVlID0gdGhpcy5kZXRlcm1pbmVHcm91cFNlcGFyYXRvcih2YWx1ZSk7XG4gICAgY29uc3QgZGlzcGxheWVkTWluVmFsdWUgPSB0aGlzLmRldGVybWluZUdyb3VwU2VwYXJhdG9yKHRoaXMubWluVmFsdWUpO1xuICAgIGNvbnN0IG1pbiA9IHRoaXMubWluVmFsdWUgfHwgdGhpcy5taW47XG4gICAgY29uc3QgdXNlTWluVmFsdWUgPSB0aGlzLnNob3VsZFVzZU1pblZhbHVlKCk7XG4gICAgY29uc3QgbWluSW50ZXJ2YWwgPSB0aGlzLmdldFVuaXRJbnRlcnZhbCh1c2VNaW5WYWx1ZSA/IHRoaXMubWluVmFsdWUgOiBtaW4pICogMTAwO1xuICAgIGNvbnN0IG1heEludGVydmFsID0gdGhpcy5nZXRVbml0SW50ZXJ2YWwodmFsdWUpICogMTAwO1xuICAgIGNvbnN0IG1pcnJvciA9IHRoaXMuc2hvdWxkTWlycm9yKCk7XG4gICAgY29uc3QgbGVmdFRodW1iT2Zmc2V0ID0gYCR7bWlycm9yID8gMTAwIC0gbWluSW50ZXJ2YWwgOiBtaW5JbnRlcnZhbH0lYDtcbiAgICBjb25zdCByaWdodFRodW1iT2Zmc2V0ID0gYCR7bWlycm9yID8gbWF4SW50ZXJ2YWwgOiAxMDAgLSBtYXhJbnRlcnZhbH0lYDtcbiAgICBjb25zdCB2YWx1ZUlzUmFuZ2UgPSBpc1JhbmdlKHRoaXMudmFsdWUpO1xuICAgIGNvbnN0IGhhbmRsZUxhYmVsTWluVmFsdWVDbGFzc2VzID0gYCR7Q1NTLmhhbmRsZUxhYmVsfSAke0NTUy5oYW5kbGVMYWJlbE1pblZhbHVlfWA7XG4gICAgY29uc3QgaGFuZGxlTGFiZWxWYWx1ZUNsYXNzZXMgPSBgJHtDU1MuaGFuZGxlTGFiZWx9ICR7Q1NTLmhhbmRsZUxhYmVsVmFsdWV9YDtcbiAgICBjb25zdCBoYW5kbGUgPSAoaChcImRpdlwiLCB7IFwiYXJpYS1kaXNhYmxlZFwiOiB0aGlzLmRpc2FibGVkLCBcImFyaWEtbGFiZWxcIjogdmFsdWVJc1JhbmdlID8gdGhpcy5tYXhMYWJlbCA6IHRoaXMubWluTGFiZWwsIFwiYXJpYS1vcmllbnRhdGlvblwiOiBcImhvcml6b250YWxcIiwgXCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMubWF4LCBcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW4sIFwiYXJpYS12YWx1ZW5vd1wiOiB2YWx1ZSwgY2xhc3M6IHtcbiAgICAgICAgdGh1bWI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLXZhbHVlXCI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLWFjdGl2ZVwiOiB0aGlzLmxhc3REcmFnUHJvcCAhPT0gXCJtaW5NYXhWYWx1ZVwiICYmIHRoaXMuZHJhZ1Byb3AgPT09IG1heFByb3AsXG4gICAgICB9LCBvbkJsdXI6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBudWxsKSwgb25Gb2N1czogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IG1heFByb3ApLCBvblBvaW50ZXJEb3duOiAoZXZlbnQpID0+IHRoaXMucG9pbnRlckRvd25EcmFnU3RhcnQoZXZlbnQsIG1heFByb3ApLCByb2xlOiBcInNsaWRlclwiLCBzdHlsZTogeyByaWdodDogcmlnaHRUaHVtYk9mZnNldCB9LCB0YWJJbmRleDogMCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IChlbCkgPT4gKHRoaXMubWF4SGFuZGxlID0gZWwpIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJoYW5kbGVcIiB9KSkpO1xuICAgIGNvbnN0IGxhYmVsZWRIYW5kbGUgPSAoaChcImRpdlwiLCB7IFwiYXJpYS1kaXNhYmxlZFwiOiB0aGlzLmRpc2FibGVkLCBcImFyaWEtbGFiZWxcIjogdmFsdWVJc1JhbmdlID8gdGhpcy5tYXhMYWJlbCA6IHRoaXMubWluTGFiZWwsIFwiYXJpYS1vcmllbnRhdGlvblwiOiBcImhvcml6b250YWxcIiwgXCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMubWF4LCBcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW4sIFwiYXJpYS12YWx1ZW5vd1wiOiB2YWx1ZSwgY2xhc3M6IHtcbiAgICAgICAgdGh1bWI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLXZhbHVlXCI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLWFjdGl2ZVwiOiB0aGlzLmxhc3REcmFnUHJvcCAhPT0gXCJtaW5NYXhWYWx1ZVwiICYmIHRoaXMuZHJhZ1Byb3AgPT09IG1heFByb3AsXG4gICAgICB9LCBvbkJsdXI6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBudWxsKSwgb25Gb2N1czogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IG1heFByb3ApLCBvblBvaW50ZXJEb3duOiAoZXZlbnQpID0+IHRoaXMucG9pbnRlckRvd25EcmFnU3RhcnQoZXZlbnQsIG1heFByb3ApLCByb2xlOiBcInNsaWRlclwiLCBzdHlsZTogeyByaWdodDogcmlnaHRUaHVtYk9mZnNldCB9LCB0YWJJbmRleDogMCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IChlbCkgPT4gKHRoaXMubWF4SGFuZGxlID0gZWwpIH0sIGgoXCJzcGFuXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IGhhbmRsZUxhYmVsVmFsdWVDbGFzc2VzIH0sIGRpc3BsYXllZFZhbHVlKSwgaChcInNwYW5cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogYCR7aGFuZGxlTGFiZWxWYWx1ZUNsYXNzZXN9IHN0YXRpY2AgfSwgZGlzcGxheWVkVmFsdWUpLCBoKFwic3BhblwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBgJHtoYW5kbGVMYWJlbFZhbHVlQ2xhc3Nlc30gdHJhbnNmb3JtZWRgIH0sIGRpc3BsYXllZFZhbHVlKSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZVwiIH0pKSk7XG4gICAgY29uc3QgaGlzdG9ncmFtTGFiZWxlZEhhbmRsZSA9IChoKFwiZGl2XCIsIHsgXCJhcmlhLWRpc2FibGVkXCI6IHRoaXMuZGlzYWJsZWQsIFwiYXJpYS1sYWJlbFwiOiB2YWx1ZUlzUmFuZ2UgPyB0aGlzLm1heExhYmVsIDogdGhpcy5taW5MYWJlbCwgXCJhcmlhLW9yaWVudGF0aW9uXCI6IFwiaG9yaXpvbnRhbFwiLCBcImFyaWEtdmFsdWVtYXhcIjogdGhpcy5tYXgsIFwiYXJpYS12YWx1ZW1pblwiOiB0aGlzLm1pbiwgXCJhcmlhLXZhbHVlbm93XCI6IHZhbHVlLCBjbGFzczoge1xuICAgICAgICB0aHVtYjogdHJ1ZSxcbiAgICAgICAgXCJ0aHVtYi0tdmFsdWVcIjogdHJ1ZSxcbiAgICAgICAgXCJ0aHVtYi0tYWN0aXZlXCI6IHRoaXMubGFzdERyYWdQcm9wICE9PSBcIm1pbk1heFZhbHVlXCIgJiYgdGhpcy5kcmFnUHJvcCA9PT0gbWF4UHJvcCxcbiAgICAgIH0sIG9uQmx1cjogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IG51bGwpLCBvbkZvY3VzOiAoKSA9PiAodGhpcy5hY3RpdmVQcm9wID0gbWF4UHJvcCksIG9uUG9pbnRlckRvd246IChldmVudCkgPT4gdGhpcy5wb2ludGVyRG93bkRyYWdTdGFydChldmVudCwgbWF4UHJvcCksIHJvbGU6IFwic2xpZGVyXCIsIHN0eWxlOiB7IHJpZ2h0OiByaWdodFRodW1iT2Zmc2V0IH0sIHRhYkluZGV4OiAwLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogKGVsKSA9PiAodGhpcy5tYXhIYW5kbGUgPSBlbCkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZVwiIH0pLCBoKFwic3BhblwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBoYW5kbGVMYWJlbFZhbHVlQ2xhc3NlcyB9LCBkaXNwbGF5ZWRWYWx1ZSksIGgoXCJzcGFuXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IGAke2hhbmRsZUxhYmVsVmFsdWVDbGFzc2VzfSBzdGF0aWNgIH0sIGRpc3BsYXllZFZhbHVlKSwgaChcInNwYW5cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogYCR7aGFuZGxlTGFiZWxWYWx1ZUNsYXNzZXN9IHRyYW5zZm9ybWVkYCB9LCBkaXNwbGF5ZWRWYWx1ZSkpKTtcbiAgICBjb25zdCBwcmVjaXNlSGFuZGxlID0gKGgoXCJkaXZcIiwgeyBcImFyaWEtZGlzYWJsZWRcIjogdGhpcy5kaXNhYmxlZCwgXCJhcmlhLWxhYmVsXCI6IHZhbHVlSXNSYW5nZSA/IHRoaXMubWF4TGFiZWwgOiB0aGlzLm1pbkxhYmVsLCBcImFyaWEtb3JpZW50YXRpb25cIjogXCJob3Jpem9udGFsXCIsIFwiYXJpYS12YWx1ZW1heFwiOiB0aGlzLm1heCwgXCJhcmlhLXZhbHVlbWluXCI6IHRoaXMubWluLCBcImFyaWEtdmFsdWVub3dcIjogdmFsdWUsIGNsYXNzOiB7XG4gICAgICAgIHRodW1iOiB0cnVlLFxuICAgICAgICBcInRodW1iLS12YWx1ZVwiOiB0cnVlLFxuICAgICAgICBcInRodW1iLS1hY3RpdmVcIjogdGhpcy5sYXN0RHJhZ1Byb3AgIT09IFwibWluTWF4VmFsdWVcIiAmJiB0aGlzLmRyYWdQcm9wID09PSBtYXhQcm9wLFxuICAgICAgICBcInRodW1iLS1wcmVjaXNlXCI6IHRydWUsXG4gICAgICB9LCBvbkJsdXI6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBudWxsKSwgb25Gb2N1czogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IG1heFByb3ApLCBvblBvaW50ZXJEb3duOiAoZXZlbnQpID0+IHRoaXMucG9pbnRlckRvd25EcmFnU3RhcnQoZXZlbnQsIG1heFByb3ApLCByb2xlOiBcInNsaWRlclwiLCBzdHlsZTogeyByaWdodDogcmlnaHRUaHVtYk9mZnNldCB9LCB0YWJJbmRleDogMCxcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9qc3gtc29ydC1wcm9wcyAtLSByZWYgc2hvdWxkIGJlIGxhc3Qgc28gbm9kZSBhdHRycy9wcm9wcyBhcmUgaW4gc3luYyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Fc3JpL2NhbGNpdGUtZGVzaWduLXN5c3RlbS9wdWxsLzY1MzApXG4gICAgICByZWY6IChlbCkgPT4gKHRoaXMubWF4SGFuZGxlID0gZWwpIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJoYW5kbGVcIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZS1leHRlbnNpb25cIiB9KSkpO1xuICAgIGNvbnN0IGhpc3RvZ3JhbVByZWNpc2VIYW5kbGUgPSAoaChcImRpdlwiLCB7IFwiYXJpYS1kaXNhYmxlZFwiOiB0aGlzLmRpc2FibGVkLCBcImFyaWEtbGFiZWxcIjogdmFsdWVJc1JhbmdlID8gdGhpcy5tYXhMYWJlbCA6IHRoaXMubWluTGFiZWwsIFwiYXJpYS1vcmllbnRhdGlvblwiOiBcImhvcml6b250YWxcIiwgXCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMubWF4LCBcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW4sIFwiYXJpYS12YWx1ZW5vd1wiOiB2YWx1ZSwgY2xhc3M6IHtcbiAgICAgICAgdGh1bWI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLXZhbHVlXCI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLWFjdGl2ZVwiOiB0aGlzLmxhc3REcmFnUHJvcCAhPT0gXCJtaW5NYXhWYWx1ZVwiICYmIHRoaXMuZHJhZ1Byb3AgPT09IG1heFByb3AsXG4gICAgICAgIFwidGh1bWItLXByZWNpc2VcIjogdHJ1ZSxcbiAgICAgIH0sIG9uQmx1cjogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IG51bGwpLCBvbkZvY3VzOiAoKSA9PiAodGhpcy5hY3RpdmVQcm9wID0gbWF4UHJvcCksIG9uUG9pbnRlckRvd246IChldmVudCkgPT4gdGhpcy5wb2ludGVyRG93bkRyYWdTdGFydChldmVudCwgbWF4UHJvcCksIHJvbGU6IFwic2xpZGVyXCIsIHN0eWxlOiB7IHJpZ2h0OiByaWdodFRodW1iT2Zmc2V0IH0sIHRhYkluZGV4OiAwLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogKGVsKSA9PiAodGhpcy5tYXhIYW5kbGUgPSBlbCkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZS1leHRlbnNpb25cIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZVwiIH0pKSk7XG4gICAgY29uc3QgbGFiZWxlZFByZWNpc2VIYW5kbGUgPSAoaChcImRpdlwiLCB7IFwiYXJpYS1kaXNhYmxlZFwiOiB0aGlzLmRpc2FibGVkLCBcImFyaWEtbGFiZWxcIjogdmFsdWVJc1JhbmdlID8gdGhpcy5tYXhMYWJlbCA6IHRoaXMubWluTGFiZWwsIFwiYXJpYS1vcmllbnRhdGlvblwiOiBcImhvcml6b250YWxcIiwgXCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMubWF4LCBcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW4sIFwiYXJpYS12YWx1ZW5vd1wiOiB2YWx1ZSwgY2xhc3M6IHtcbiAgICAgICAgdGh1bWI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLXZhbHVlXCI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLWFjdGl2ZVwiOiB0aGlzLmxhc3REcmFnUHJvcCAhPT0gXCJtaW5NYXhWYWx1ZVwiICYmIHRoaXMuZHJhZ1Byb3AgPT09IG1heFByb3AsXG4gICAgICAgIFwidGh1bWItLXByZWNpc2VcIjogdHJ1ZSxcbiAgICAgIH0sIG9uQmx1cjogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IG51bGwpLCBvbkZvY3VzOiAoKSA9PiAodGhpcy5hY3RpdmVQcm9wID0gbWF4UHJvcCksIG9uUG9pbnRlckRvd246IChldmVudCkgPT4gdGhpcy5wb2ludGVyRG93bkRyYWdTdGFydChldmVudCwgbWF4UHJvcCksIHJvbGU6IFwic2xpZGVyXCIsIHN0eWxlOiB7IHJpZ2h0OiByaWdodFRodW1iT2Zmc2V0IH0sIHRhYkluZGV4OiAwLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogKGVsKSA9PiAodGhpcy5tYXhIYW5kbGUgPSBlbCkgfSwgaChcInNwYW5cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogaGFuZGxlTGFiZWxWYWx1ZUNsYXNzZXMgfSwgZGlzcGxheWVkVmFsdWUpLCBoKFwic3BhblwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBgJHtoYW5kbGVMYWJlbFZhbHVlQ2xhc3Nlc30gc3RhdGljYCB9LCBkaXNwbGF5ZWRWYWx1ZSksIGgoXCJzcGFuXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IGAke2hhbmRsZUxhYmVsVmFsdWVDbGFzc2VzfSB0cmFuc2Zvcm1lZGAgfSwgZGlzcGxheWVkVmFsdWUpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaGFuZGxlXCIgfSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJoYW5kbGUtZXh0ZW5zaW9uXCIgfSkpKTtcbiAgICBjb25zdCBoaXN0b2dyYW1MYWJlbGVkUHJlY2lzZUhhbmRsZSA9IChoKFwiZGl2XCIsIHsgXCJhcmlhLWRpc2FibGVkXCI6IHRoaXMuZGlzYWJsZWQsIFwiYXJpYS1sYWJlbFwiOiB2YWx1ZUlzUmFuZ2UgPyB0aGlzLm1heExhYmVsIDogdGhpcy5taW5MYWJlbCwgXCJhcmlhLW9yaWVudGF0aW9uXCI6IFwiaG9yaXpvbnRhbFwiLCBcImFyaWEtdmFsdWVtYXhcIjogdGhpcy5tYXgsIFwiYXJpYS12YWx1ZW1pblwiOiB0aGlzLm1pbiwgXCJhcmlhLXZhbHVlbm93XCI6IHZhbHVlLCBjbGFzczoge1xuICAgICAgICB0aHVtYjogdHJ1ZSxcbiAgICAgICAgXCJ0aHVtYi0tdmFsdWVcIjogdHJ1ZSxcbiAgICAgICAgXCJ0aHVtYi0tYWN0aXZlXCI6IHRoaXMubGFzdERyYWdQcm9wICE9PSBcIm1pbk1heFZhbHVlXCIgJiYgdGhpcy5kcmFnUHJvcCA9PT0gbWF4UHJvcCxcbiAgICAgICAgXCJ0aHVtYi0tcHJlY2lzZVwiOiB0cnVlLFxuICAgICAgfSwgb25CbHVyOiAoKSA9PiAodGhpcy5hY3RpdmVQcm9wID0gbnVsbCksIG9uRm9jdXM6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBtYXhQcm9wKSwgb25Qb2ludGVyRG93bjogKGV2ZW50KSA9PiB0aGlzLnBvaW50ZXJEb3duRHJhZ1N0YXJ0KGV2ZW50LCBtYXhQcm9wKSwgcm9sZTogXCJzbGlkZXJcIiwgc3R5bGU6IHsgcmlnaHQ6IHJpZ2h0VGh1bWJPZmZzZXQgfSwgdGFiSW5kZXg6IDAsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LXNvcnQtcHJvcHMgLS0gcmVmIHNob3VsZCBiZSBsYXN0IHNvIG5vZGUgYXR0cnMvcHJvcHMgYXJlIGluIHN5bmMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWRlc2lnbi1zeXN0ZW0vcHVsbC82NTMwKVxuICAgICAgcmVmOiAoZWwpID0+ICh0aGlzLm1heEhhbmRsZSA9IGVsKSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaGFuZGxlLWV4dGVuc2lvblwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaGFuZGxlXCIgfSksIGgoXCJzcGFuXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IGhhbmRsZUxhYmVsVmFsdWVDbGFzc2VzIH0sIGRpc3BsYXllZFZhbHVlKSwgaChcInNwYW5cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogYCR7aGFuZGxlTGFiZWxWYWx1ZUNsYXNzZXN9IHN0YXRpY2AgfSwgZGlzcGxheWVkVmFsdWUpLCBoKFwic3BhblwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBgJHtoYW5kbGVMYWJlbFZhbHVlQ2xhc3Nlc30gdHJhbnNmb3JtZWRgIH0sIGRpc3BsYXllZFZhbHVlKSkpO1xuICAgIGNvbnN0IG1pbkhhbmRsZSA9IChoKFwiZGl2XCIsIHsgXCJhcmlhLWRpc2FibGVkXCI6IHRoaXMuZGlzYWJsZWQsIFwiYXJpYS1sYWJlbFwiOiB0aGlzLm1pbkxhYmVsLCBcImFyaWEtb3JpZW50YXRpb25cIjogXCJob3Jpem9udGFsXCIsIFwiYXJpYS12YWx1ZW1heFwiOiB0aGlzLm1heCwgXCJhcmlhLXZhbHVlbWluXCI6IHRoaXMubWluLCBcImFyaWEtdmFsdWVub3dcIjogdGhpcy5taW5WYWx1ZSwgY2xhc3M6IHtcbiAgICAgICAgdGh1bWI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLW1pblZhbHVlXCI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLWFjdGl2ZVwiOiB0aGlzLmRyYWdQcm9wID09PSBcIm1pblZhbHVlXCIsXG4gICAgICB9LCBvbkJsdXI6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBudWxsKSwgb25Gb2N1czogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IFwibWluVmFsdWVcIiksIG9uUG9pbnRlckRvd246IChldmVudCkgPT4gdGhpcy5wb2ludGVyRG93bkRyYWdTdGFydChldmVudCwgXCJtaW5WYWx1ZVwiKSwgcm9sZTogXCJzbGlkZXJcIiwgc3R5bGU6IHsgbGVmdDogbGVmdFRodW1iT2Zmc2V0IH0sIHRhYkluZGV4OiAwLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogKGVsKSA9PiAodGhpcy5taW5IYW5kbGUgPSBlbCkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZVwiIH0pKSk7XG4gICAgY29uc3QgbWluTGFiZWxlZEhhbmRsZSA9IChoKFwiZGl2XCIsIHsgXCJhcmlhLWRpc2FibGVkXCI6IHRoaXMuZGlzYWJsZWQsIFwiYXJpYS1sYWJlbFwiOiB0aGlzLm1pbkxhYmVsLCBcImFyaWEtb3JpZW50YXRpb25cIjogXCJob3Jpem9udGFsXCIsIFwiYXJpYS12YWx1ZW1heFwiOiB0aGlzLm1heCwgXCJhcmlhLXZhbHVlbWluXCI6IHRoaXMubWluLCBcImFyaWEtdmFsdWVub3dcIjogdGhpcy5taW5WYWx1ZSwgY2xhc3M6IHtcbiAgICAgICAgdGh1bWI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLW1pblZhbHVlXCI6IHRydWUsXG4gICAgICAgIFwidGh1bWItLWFjdGl2ZVwiOiB0aGlzLmRyYWdQcm9wID09PSBcIm1pblZhbHVlXCIsXG4gICAgICB9LCBvbkJsdXI6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBudWxsKSwgb25Gb2N1czogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IFwibWluVmFsdWVcIiksIG9uUG9pbnRlckRvd246IChldmVudCkgPT4gdGhpcy5wb2ludGVyRG93bkRyYWdTdGFydChldmVudCwgXCJtaW5WYWx1ZVwiKSwgcm9sZTogXCJzbGlkZXJcIiwgc3R5bGU6IHsgbGVmdDogbGVmdFRodW1iT2Zmc2V0IH0sIHRhYkluZGV4OiAwLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogKGVsKSA9PiAodGhpcy5taW5IYW5kbGUgPSBlbCkgfSwgaChcInNwYW5cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogaGFuZGxlTGFiZWxNaW5WYWx1ZUNsYXNzZXMgfSwgZGlzcGxheWVkTWluVmFsdWUpLCBoKFwic3BhblwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBgJHtoYW5kbGVMYWJlbE1pblZhbHVlQ2xhc3Nlc30gc3RhdGljYCB9LCBkaXNwbGF5ZWRNaW5WYWx1ZSksIGgoXCJzcGFuXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IGAke2hhbmRsZUxhYmVsTWluVmFsdWVDbGFzc2VzfSB0cmFuc2Zvcm1lZGAgfSwgZGlzcGxheWVkTWluVmFsdWUpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaGFuZGxlXCIgfSkpKTtcbiAgICBjb25zdCBtaW5IaXN0b2dyYW1MYWJlbGVkSGFuZGxlID0gKGgoXCJkaXZcIiwgeyBcImFyaWEtZGlzYWJsZWRcIjogdGhpcy5kaXNhYmxlZCwgXCJhcmlhLWxhYmVsXCI6IHRoaXMubWluTGFiZWwsIFwiYXJpYS1vcmllbnRhdGlvblwiOiBcImhvcml6b250YWxcIiwgXCJhcmlhLXZhbHVlbWF4XCI6IHRoaXMubWF4LCBcImFyaWEtdmFsdWVtaW5cIjogdGhpcy5taW4sIFwiYXJpYS12YWx1ZW5vd1wiOiB0aGlzLm1pblZhbHVlLCBjbGFzczoge1xuICAgICAgICB0aHVtYjogdHJ1ZSxcbiAgICAgICAgXCJ0aHVtYi0tbWluVmFsdWVcIjogdHJ1ZSxcbiAgICAgICAgXCJ0aHVtYi0tYWN0aXZlXCI6IHRoaXMuZHJhZ1Byb3AgPT09IFwibWluVmFsdWVcIixcbiAgICAgIH0sIG9uQmx1cjogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IG51bGwpLCBvbkZvY3VzOiAoKSA9PiAodGhpcy5hY3RpdmVQcm9wID0gXCJtaW5WYWx1ZVwiKSwgb25Qb2ludGVyRG93bjogKGV2ZW50KSA9PiB0aGlzLnBvaW50ZXJEb3duRHJhZ1N0YXJ0KGV2ZW50LCBcIm1pblZhbHVlXCIpLCByb2xlOiBcInNsaWRlclwiLCBzdHlsZTogeyBsZWZ0OiBsZWZ0VGh1bWJPZmZzZXQgfSwgdGFiSW5kZXg6IDAsXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvanN4LXNvcnQtcHJvcHMgLS0gcmVmIHNob3VsZCBiZSBsYXN0IHNvIG5vZGUgYXR0cnMvcHJvcHMgYXJlIGluIHN5bmMgKHNlZSBodHRwczovL2dpdGh1Yi5jb20vRXNyaS9jYWxjaXRlLWRlc2lnbi1zeXN0ZW0vcHVsbC82NTMwKVxuICAgICAgcmVmOiAoZWwpID0+ICh0aGlzLm1pbkhhbmRsZSA9IGVsKSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwiaGFuZGxlXCIgfSksIGgoXCJzcGFuXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IGhhbmRsZUxhYmVsTWluVmFsdWVDbGFzc2VzIH0sIGRpc3BsYXllZE1pblZhbHVlKSwgaChcInNwYW5cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogYCR7aGFuZGxlTGFiZWxNaW5WYWx1ZUNsYXNzZXN9IHN0YXRpY2AgfSwgZGlzcGxheWVkTWluVmFsdWUpLCBoKFwic3BhblwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBgJHtoYW5kbGVMYWJlbE1pblZhbHVlQ2xhc3Nlc30gdHJhbnNmb3JtZWRgIH0sIGRpc3BsYXllZE1pblZhbHVlKSkpO1xuICAgIGNvbnN0IG1pblByZWNpc2VIYW5kbGUgPSAoaChcImRpdlwiLCB7IFwiYXJpYS1kaXNhYmxlZFwiOiB0aGlzLmRpc2FibGVkLCBcImFyaWEtbGFiZWxcIjogdGhpcy5taW5MYWJlbCwgXCJhcmlhLW9yaWVudGF0aW9uXCI6IFwiaG9yaXpvbnRhbFwiLCBcImFyaWEtdmFsdWVtYXhcIjogdGhpcy5tYXgsIFwiYXJpYS12YWx1ZW1pblwiOiB0aGlzLm1pbiwgXCJhcmlhLXZhbHVlbm93XCI6IHRoaXMubWluVmFsdWUsIGNsYXNzOiB7XG4gICAgICAgIHRodW1iOiB0cnVlLFxuICAgICAgICBcInRodW1iLS1taW5WYWx1ZVwiOiB0cnVlLFxuICAgICAgICBcInRodW1iLS1hY3RpdmVcIjogdGhpcy5kcmFnUHJvcCA9PT0gXCJtaW5WYWx1ZVwiLFxuICAgICAgICBcInRodW1iLS1wcmVjaXNlXCI6IHRydWUsXG4gICAgICB9LCBvbkJsdXI6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBudWxsKSwgb25Gb2N1czogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IFwibWluVmFsdWVcIiksIG9uUG9pbnRlckRvd246IChldmVudCkgPT4gdGhpcy5wb2ludGVyRG93bkRyYWdTdGFydChldmVudCwgXCJtaW5WYWx1ZVwiKSwgcm9sZTogXCJzbGlkZXJcIiwgc3R5bGU6IHsgbGVmdDogbGVmdFRodW1iT2Zmc2V0IH0sIHRhYkluZGV4OiAwLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogKGVsKSA9PiAodGhpcy5taW5IYW5kbGUgPSBlbCkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZS1leHRlbnNpb25cIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZVwiIH0pKSk7XG4gICAgY29uc3QgbWluTGFiZWxlZFByZWNpc2VIYW5kbGUgPSAoaChcImRpdlwiLCB7IFwiYXJpYS1kaXNhYmxlZFwiOiB0aGlzLmRpc2FibGVkLCBcImFyaWEtbGFiZWxcIjogdGhpcy5taW5MYWJlbCwgXCJhcmlhLW9yaWVudGF0aW9uXCI6IFwiaG9yaXpvbnRhbFwiLCBcImFyaWEtdmFsdWVtYXhcIjogdGhpcy5tYXgsIFwiYXJpYS12YWx1ZW1pblwiOiB0aGlzLm1pbiwgXCJhcmlhLXZhbHVlbm93XCI6IHRoaXMubWluVmFsdWUsIGNsYXNzOiB7XG4gICAgICAgIHRodW1iOiB0cnVlLFxuICAgICAgICBcInRodW1iLS1taW5WYWx1ZVwiOiB0cnVlLFxuICAgICAgICBcInRodW1iLS1hY3RpdmVcIjogdGhpcy5kcmFnUHJvcCA9PT0gXCJtaW5WYWx1ZVwiLFxuICAgICAgICBcInRodW1iLS1wcmVjaXNlXCI6IHRydWUsXG4gICAgICB9LCBvbkJsdXI6ICgpID0+ICh0aGlzLmFjdGl2ZVByb3AgPSBudWxsKSwgb25Gb2N1czogKCkgPT4gKHRoaXMuYWN0aXZlUHJvcCA9IFwibWluVmFsdWVcIiksIG9uUG9pbnRlckRvd246IChldmVudCkgPT4gdGhpcy5wb2ludGVyRG93bkRyYWdTdGFydChldmVudCwgXCJtaW5WYWx1ZVwiKSwgcm9sZTogXCJzbGlkZXJcIiwgc3R5bGU6IHsgbGVmdDogbGVmdFRodW1iT2Zmc2V0IH0sIHRhYkluZGV4OiAwLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogKGVsKSA9PiAodGhpcy5taW5IYW5kbGUgPSBlbCkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZS1leHRlbnNpb25cIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcImhhbmRsZVwiIH0pLCBoKFwic3BhblwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBoYW5kbGVMYWJlbE1pblZhbHVlQ2xhc3NlcyB9LCBkaXNwbGF5ZWRNaW5WYWx1ZSksIGgoXCJzcGFuXCIsIHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgY2xhc3M6IGAke2hhbmRsZUxhYmVsTWluVmFsdWVDbGFzc2VzfSBzdGF0aWNgIH0sIGRpc3BsYXllZE1pblZhbHVlKSwgaChcInNwYW5cIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogYCR7aGFuZGxlTGFiZWxNaW5WYWx1ZUNsYXNzZXN9IHRyYW5zZm9ybWVkYCB9LCBkaXNwbGF5ZWRNaW5WYWx1ZSkpKTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBpZDogaWQsIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0IH0sIGgoXCJkaXZcIiwgeyBcImFyaWEtbGFiZWxcIjogZ2V0TGFiZWxUZXh0KHRoaXMpLCBjbGFzczoge1xuICAgICAgICBbXCJjb250YWluZXJcIl06IHRydWUsXG4gICAgICAgIFtcImNvbnRhaW5lci0tcmFuZ2VcIl06IHZhbHVlSXNSYW5nZSxcbiAgICAgICAgW2BzY2FsZS0tJHt0aGlzLnNjYWxlfWBdOiB0cnVlLFxuICAgICAgfSB9LCB0aGlzLnJlbmRlckdyYXBoKCksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ0cmFja1wiLFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2pzeC1zb3J0LXByb3BzIC0tIHJlZiBzaG91bGQgYmUgbGFzdCBzbyBub2RlIGF0dHJzL3Byb3BzIGFyZSBpbiBzeW5jIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL3B1bGwvNjUzMClcbiAgICAgIHJlZjogdGhpcy5zdG9yZVRyYWNrUmVmIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ0cmFja19fcmFuZ2VcIiwgb25Qb2ludGVyRG93bjogKGV2ZW50KSA9PiB0aGlzLnBvaW50ZXJEb3duRHJhZ1N0YXJ0KGV2ZW50LCBcIm1pbk1heFZhbHVlXCIpLCBzdHlsZToge1xuICAgICAgICBsZWZ0OiBgJHttaXJyb3IgPyAxMDAgLSBtYXhJbnRlcnZhbCA6IG1pbkludGVydmFsfSVgLFxuICAgICAgICByaWdodDogYCR7bWlycm9yID8gbWluSW50ZXJ2YWwgOiAxMDAgLSBtYXhJbnRlcnZhbH0lYCxcbiAgICAgIH0gfSksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ0aWNrc1wiIH0sIHRoaXMudGlja1ZhbHVlcy5tYXAoKHRpY2spID0+IHtcbiAgICAgIGNvbnN0IHRpY2tPZmZzZXQgPSBgJHt0aGlzLmdldFVuaXRJbnRlcnZhbCh0aWNrKSAqIDEwMH0lYDtcbiAgICAgIGxldCBhY3RpdmVUaWNrcyA9IHRpY2sgPj0gbWluICYmIHRpY2sgPD0gdmFsdWU7XG4gICAgICBpZiAodXNlTWluVmFsdWUpIHtcbiAgICAgICAgYWN0aXZlVGlja3MgPSB0aWNrID49IHRoaXMubWluVmFsdWUgJiYgdGljayA8PSB0aGlzLm1heFZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChoKFwic3BhblwiLCB7IGNsYXNzOiB7XG4gICAgICAgICAgdGljazogdHJ1ZSxcbiAgICAgICAgICBcInRpY2stLWFjdGl2ZVwiOiBhY3RpdmVUaWNrcyxcbiAgICAgICAgfSwgc3R5bGU6IHtcbiAgICAgICAgICBsZWZ0OiBtaXJyb3IgPyBcIlwiIDogdGlja09mZnNldCxcbiAgICAgICAgICByaWdodDogbWlycm9yID8gdGlja09mZnNldCA6IFwiXCIsXG4gICAgICAgIH0gfSwgdGhpcy5yZW5kZXJUaWNrTGFiZWwodGljaykpKTtcbiAgICB9KSkpLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidGh1bWItY29udGFpbmVyXCIgfSwgIXRoaXMucHJlY2lzZSAmJiAhdGhpcy5sYWJlbEhhbmRsZXMgJiYgdmFsdWVJc1JhbmdlICYmIG1pbkhhbmRsZSwgIXRoaXMuaGFzSGlzdG9ncmFtICYmXG4gICAgICAhdGhpcy5wcmVjaXNlICYmXG4gICAgICB0aGlzLmxhYmVsSGFuZGxlcyAmJlxuICAgICAgdmFsdWVJc1JhbmdlICYmXG4gICAgICBtaW5MYWJlbGVkSGFuZGxlLCB0aGlzLnByZWNpc2UgJiYgIXRoaXMubGFiZWxIYW5kbGVzICYmIHZhbHVlSXNSYW5nZSAmJiBtaW5QcmVjaXNlSGFuZGxlLCB0aGlzLnByZWNpc2UgJiYgdGhpcy5sYWJlbEhhbmRsZXMgJiYgdmFsdWVJc1JhbmdlICYmIG1pbkxhYmVsZWRQcmVjaXNlSGFuZGxlLCB0aGlzLmhhc0hpc3RvZ3JhbSAmJlxuICAgICAgIXRoaXMucHJlY2lzZSAmJlxuICAgICAgdGhpcy5sYWJlbEhhbmRsZXMgJiZcbiAgICAgIHZhbHVlSXNSYW5nZSAmJlxuICAgICAgbWluSGlzdG9ncmFtTGFiZWxlZEhhbmRsZSwgIXRoaXMucHJlY2lzZSAmJiAhdGhpcy5sYWJlbEhhbmRsZXMgJiYgaGFuZGxlLCAhdGhpcy5oYXNIaXN0b2dyYW0gJiYgIXRoaXMucHJlY2lzZSAmJiB0aGlzLmxhYmVsSGFuZGxlcyAmJiBsYWJlbGVkSGFuZGxlLCAhdGhpcy5oYXNIaXN0b2dyYW0gJiYgdGhpcy5wcmVjaXNlICYmICF0aGlzLmxhYmVsSGFuZGxlcyAmJiBwcmVjaXNlSGFuZGxlLCB0aGlzLmhhc0hpc3RvZ3JhbSAmJiB0aGlzLnByZWNpc2UgJiYgIXRoaXMubGFiZWxIYW5kbGVzICYmIGhpc3RvZ3JhbVByZWNpc2VIYW5kbGUsICF0aGlzLmhhc0hpc3RvZ3JhbSAmJiB0aGlzLnByZWNpc2UgJiYgdGhpcy5sYWJlbEhhbmRsZXMgJiYgbGFiZWxlZFByZWNpc2VIYW5kbGUsIHRoaXMuaGFzSGlzdG9ncmFtICYmICF0aGlzLnByZWNpc2UgJiYgdGhpcy5sYWJlbEhhbmRsZXMgJiYgaGlzdG9ncmFtTGFiZWxlZEhhbmRsZSwgdGhpcy5oYXNIaXN0b2dyYW0gJiZcbiAgICAgIHRoaXMucHJlY2lzZSAmJlxuICAgICAgdGhpcy5sYWJlbEhhbmRsZXMgJiZcbiAgICAgIGhpc3RvZ3JhbUxhYmVsZWRQcmVjaXNlSGFuZGxlLCBoKEhpZGRlbkZvcm1JbnB1dFNsb3QsIHsgY29tcG9uZW50OiB0aGlzIH0pKSkpKTtcbiAgfVxuICByZW5kZXJHcmFwaCgpIHtcbiAgICByZXR1cm4gdGhpcy5oaXN0b2dyYW0gPyAoaChcImNhbGNpdGUtZ3JhcGhcIiwgeyBjbGFzczogXCJncmFwaFwiLCBjb2xvclN0b3BzOiB0aGlzLmhpc3RvZ3JhbVN0b3BzLCBkYXRhOiB0aGlzLmhpc3RvZ3JhbSwgaGlnaGxpZ2h0TWF4OiBpc1JhbmdlKHRoaXMudmFsdWUpID8gdGhpcy5tYXhWYWx1ZSA6IHRoaXMudmFsdWUsIGhpZ2hsaWdodE1pbjogaXNSYW5nZSh0aGlzLnZhbHVlKSA/IHRoaXMubWluVmFsdWUgOiB0aGlzLm1pbiwgbWF4OiB0aGlzLm1heCwgbWluOiB0aGlzLm1pbiB9KSkgOiBudWxsO1xuICB9XG4gIHJlbmRlclRpY2tMYWJlbCh0aWNrKSB7XG4gICAgY29uc3QgdmFsdWVJc1JhbmdlID0gaXNSYW5nZSh0aGlzLnZhbHVlKTtcbiAgICBjb25zdCBpc01pblRpY2tMYWJlbCA9IHRpY2sgPT09IHRoaXMubWluO1xuICAgIGNvbnN0IGlzTWF4VGlja0xhYmVsID0gdGljayA9PT0gdGhpcy5tYXg7XG4gICAgY29uc3QgZGlzcGxheWVkVGlja1ZhbHVlID0gdGhpcy5kZXRlcm1pbmVHcm91cFNlcGFyYXRvcih0aWNrKTtcbiAgICBjb25zdCB0aWNrTGFiZWwgPSAoaChcInNwYW5cIiwgeyBjbGFzczoge1xuICAgICAgICB0aWNrX19sYWJlbDogdHJ1ZSxcbiAgICAgICAgW0NTUy50aWNrTWluXTogaXNNaW5UaWNrTGFiZWwsXG4gICAgICAgIFtDU1MudGlja01heF06IGlzTWF4VGlja0xhYmVsLFxuICAgICAgfSB9LCBkaXNwbGF5ZWRUaWNrVmFsdWUpKTtcbiAgICBpZiAodGhpcy5sYWJlbFRpY2tzICYmICF0aGlzLmhhc0hpc3RvZ3JhbSAmJiAhdmFsdWVJc1JhbmdlKSB7XG4gICAgICByZXR1cm4gdGlja0xhYmVsO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYWJlbFRpY2tzICYmXG4gICAgICAhdGhpcy5oYXNIaXN0b2dyYW0gJiZcbiAgICAgIHZhbHVlSXNSYW5nZSAmJlxuICAgICAgIXRoaXMucHJlY2lzZSAmJlxuICAgICAgIXRoaXMubGFiZWxIYW5kbGVzKSB7XG4gICAgICByZXR1cm4gdGlja0xhYmVsO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYWJlbFRpY2tzICYmXG4gICAgICAhdGhpcy5oYXNIaXN0b2dyYW0gJiZcbiAgICAgIHZhbHVlSXNSYW5nZSAmJlxuICAgICAgIXRoaXMucHJlY2lzZSAmJlxuICAgICAgdGhpcy5sYWJlbEhhbmRsZXMpIHtcbiAgICAgIHJldHVybiB0aWNrTGFiZWw7XG4gICAgfVxuICAgIGlmICh0aGlzLmxhYmVsVGlja3MgJiZcbiAgICAgICF0aGlzLmhhc0hpc3RvZ3JhbSAmJlxuICAgICAgdmFsdWVJc1JhbmdlICYmXG4gICAgICB0aGlzLnByZWNpc2UgJiZcbiAgICAgIChpc01pblRpY2tMYWJlbCB8fCBpc01heFRpY2tMYWJlbCkpIHtcbiAgICAgIHJldHVybiB0aWNrTGFiZWw7XG4gICAgfVxuICAgIGlmICh0aGlzLmxhYmVsVGlja3MgJiYgdGhpcy5oYXNIaXN0b2dyYW0gJiYgIXRoaXMucHJlY2lzZSAmJiAhdGhpcy5sYWJlbEhhbmRsZXMpIHtcbiAgICAgIHJldHVybiB0aWNrTGFiZWw7XG4gICAgfVxuICAgIGlmICh0aGlzLmxhYmVsVGlja3MgJiZcbiAgICAgIHRoaXMuaGFzSGlzdG9ncmFtICYmXG4gICAgICB0aGlzLnByZWNpc2UgJiZcbiAgICAgICF0aGlzLmxhYmVsSGFuZGxlcyAmJlxuICAgICAgKGlzTWluVGlja0xhYmVsIHx8IGlzTWF4VGlja0xhYmVsKSkge1xuICAgICAgcmV0dXJuIHRpY2tMYWJlbDtcbiAgICB9XG4gICAgaWYgKHRoaXMubGFiZWxUaWNrcyAmJlxuICAgICAgdGhpcy5oYXNIaXN0b2dyYW0gJiZcbiAgICAgICF0aGlzLnByZWNpc2UgJiZcbiAgICAgIHRoaXMubGFiZWxIYW5kbGVzICYmXG4gICAgICAoaXNNaW5UaWNrTGFiZWwgfHwgaXNNYXhUaWNrTGFiZWwpKSB7XG4gICAgICByZXR1cm4gdGlja0xhYmVsO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYWJlbFRpY2tzICYmXG4gICAgICB0aGlzLmhhc0hpc3RvZ3JhbSAmJlxuICAgICAgdGhpcy5wcmVjaXNlICYmXG4gICAgICB0aGlzLmxhYmVsSGFuZGxlcyAmJlxuICAgICAgKGlzTWluVGlja0xhYmVsIHx8IGlzTWF4VGlja0xhYmVsKSkge1xuICAgICAgcmV0dXJuIHRpY2tMYWJlbDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgRXZlbnQgTGlzdGVuZXJzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAga2V5RG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICBjb25zdCBtaXJyb3IgPSB0aGlzLnNob3VsZE1pcnJvcigpO1xuICAgIGNvbnN0IHsgYWN0aXZlUHJvcCwgbWF4LCBtaW4sIHBhZ2VTdGVwLCBzdGVwIH0gPSB0aGlzO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpc1thY3RpdmVQcm9wXTtcbiAgICBjb25zdCB7IGtleSB9ID0gZXZlbnQ7XG4gICAgaWYgKGlzQWN0aXZhdGlvbktleShrZXkpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgYWRqdXN0bWVudDtcbiAgICBpZiAoa2V5ID09PSBcIkFycm93VXBcIiB8fCBrZXkgPT09IFwiQXJyb3dSaWdodFwiKSB7XG4gICAgICBjb25zdCBkaXJlY3Rpb25GYWN0b3IgPSBtaXJyb3IgJiYga2V5ID09PSBcIkFycm93UmlnaHRcIiA/IC0xIDogMTtcbiAgICAgIGFkanVzdG1lbnQgPSB2YWx1ZSArIHN0ZXAgKiBkaXJlY3Rpb25GYWN0b3I7XG4gICAgfVxuICAgIGVsc2UgaWYgKGtleSA9PT0gXCJBcnJvd0Rvd25cIiB8fCBrZXkgPT09IFwiQXJyb3dMZWZ0XCIpIHtcbiAgICAgIGNvbnN0IGRpcmVjdGlvbkZhY3RvciA9IG1pcnJvciAmJiBrZXkgPT09IFwiQXJyb3dMZWZ0XCIgPyAtMSA6IDE7XG4gICAgICBhZGp1c3RtZW50ID0gdmFsdWUgLSBzdGVwICogZGlyZWN0aW9uRmFjdG9yO1xuICAgIH1cbiAgICBlbHNlIGlmIChrZXkgPT09IFwiUGFnZVVwXCIpIHtcbiAgICAgIGlmIChwYWdlU3RlcCkge1xuICAgICAgICBhZGp1c3RtZW50ID0gdmFsdWUgKyBwYWdlU3RlcDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5ID09PSBcIlBhZ2VEb3duXCIpIHtcbiAgICAgIGlmIChwYWdlU3RlcCkge1xuICAgICAgICBhZGp1c3RtZW50ID0gdmFsdWUgLSBwYWdlU3RlcDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5ID09PSBcIkhvbWVcIikge1xuICAgICAgYWRqdXN0bWVudCA9IG1pbjtcbiAgICB9XG4gICAgZWxzZSBpZiAoa2V5ID09PSBcIkVuZFwiKSB7XG4gICAgICBhZGp1c3RtZW50ID0gbWF4O1xuICAgIH1cbiAgICBpZiAoaXNOYU4oYWRqdXN0bWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBmaXhlZERlY2ltYWxBZGp1c3RtZW50ID0gTnVtYmVyKGFkanVzdG1lbnQudG9GaXhlZChkZWNpbWFsUGxhY2VzKHN0ZXApKSk7XG4gICAgdGhpcy5zZXRWYWx1ZSh7XG4gICAgICBbYWN0aXZlUHJvcF06IHRoaXMuY2xhbXAoZml4ZWREZWNpbWFsQWRqdXN0bWVudCwgYWN0aXZlUHJvcCksXG4gICAgfSk7XG4gIH1cbiAgcG9pbnRlckRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgIWlzUHJpbWFyeVBvaW50ZXJCdXR0b24oZXZlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIHx8IGV2ZW50LnBhZ2VYO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy50cmFuc2xhdGUoeCk7XG4gICAgbGV0IHByb3AgPSBcInZhbHVlXCI7XG4gICAgaWYgKGlzUmFuZ2UodGhpcy52YWx1ZSkpIHtcbiAgICAgIGNvbnN0IGluUmFuZ2UgPSBwb3NpdGlvbiA+PSB0aGlzLm1pblZhbHVlICYmIHBvc2l0aW9uIDw9IHRoaXMubWF4VmFsdWU7XG4gICAgICBpZiAoaW5SYW5nZSAmJiB0aGlzLmxhc3REcmFnUHJvcCA9PT0gXCJtaW5NYXhWYWx1ZVwiKSB7XG4gICAgICAgIHByb3AgPSBcIm1pbk1heFZhbHVlXCI7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgY2xvc2VyVG9NYXggPSBNYXRoLmFicyh0aGlzLm1heFZhbHVlIC0gcG9zaXRpb24pIDwgTWF0aC5hYnModGhpcy5taW5WYWx1ZSAtIHBvc2l0aW9uKTtcbiAgICAgICAgcHJvcCA9IGNsb3NlclRvTWF4IHx8IHBvc2l0aW9uID4gdGhpcy5tYXhWYWx1ZSA/IFwibWF4VmFsdWVcIiA6IFwibWluVmFsdWVcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sYXN0RHJhZ1Byb3BWYWx1ZSA9IHRoaXNbcHJvcF07XG4gICAgdGhpcy5kcmFnU3RhcnQocHJvcCk7XG4gICAgY29uc3QgaXNUaHVtYkFjdGl2ZSA9IHRoaXMuZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiLnRodW1iOmFjdGl2ZVwiKTtcbiAgICBpZiAoIWlzVGh1bWJBY3RpdmUpIHtcbiAgICAgIHRoaXMuc2V0VmFsdWUoeyBbcHJvcF06IHRoaXMuY2xhbXAocG9zaXRpb24sIHByb3ApIH0pO1xuICAgIH1cbiAgICB0aGlzLmZvY3VzQWN0aXZlSGFuZGxlKHgpO1xuICB9XG4gIGhhbmRsZVRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgICAvLyBuZWVkZWQgdG8gcHJldmVudCBleHRyYSBjbGljayBhdCB0aGUgZW5kIG9mIGEgaGFuZGxlIGRyYWdcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy9cbiAgLy8gIFB1YmxpYyBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLyoqIFNldHMgZm9jdXMgb24gdGhlIGNvbXBvbmVudC4gKi9cbiAgYXN5bmMgc2V0Rm9jdXMoKSB7XG4gICAgYXdhaXQgY29tcG9uZW50Rm9jdXNhYmxlKHRoaXMpO1xuICAgIGNvbnN0IGhhbmRsZSA9IHRoaXMubWluSGFuZGxlID8gdGhpcy5taW5IYW5kbGUgOiB0aGlzLm1heEhhbmRsZTtcbiAgICBoYW5kbGU/LmZvY3VzKCk7XG4gIH1cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvL1xuICAvLyAgUHJpdmF0ZSBNZXRob2RzXG4gIC8vXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgc2V0VmFsdWVGcm9tTWluTWF4KCkge1xuICAgIGNvbnN0IHsgbWluVmFsdWUsIG1heFZhbHVlIH0gPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgbWluVmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIG1heFZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICB0aGlzLnZhbHVlID0gW21pblZhbHVlLCBtYXhWYWx1ZV07XG4gICAgfVxuICB9XG4gIHNldE1pbk1heEZyb21WYWx1ZSgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzO1xuICAgIGlmIChpc1JhbmdlKHZhbHVlKSkge1xuICAgICAgdGhpcy5taW5WYWx1ZSA9IHZhbHVlWzBdO1xuICAgICAgdGhpcy5tYXhWYWx1ZSA9IHZhbHVlWzFdO1xuICAgIH1cbiAgfVxuICBvbkxhYmVsQ2xpY2soKSB7XG4gICAgdGhpcy5zZXRGb2N1cygpO1xuICB9XG4gIHNob3VsZE1pcnJvcigpIHtcbiAgICByZXR1cm4gdGhpcy5taXJyb3JlZCAmJiAhdGhpcy5oYXNIaXN0b2dyYW07XG4gIH1cbiAgc2hvdWxkVXNlTWluVmFsdWUoKSB7XG4gICAgaWYgKCFpc1JhbmdlKHRoaXMudmFsdWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoKHRoaXMuaGFzSGlzdG9ncmFtICYmIHRoaXMubWF4VmFsdWUgPT09IDApIHx8ICghdGhpcy5oYXNIaXN0b2dyYW0gJiYgdGhpcy5taW5WYWx1ZSA9PT0gMCkpO1xuICB9XG4gIGdldFRpY2tEZW5zaXR5KCkge1xuICAgIGNvbnN0IGRlbnNpdHkgPSAodGhpcy5tYXggLSB0aGlzLm1pbikgLyB0aGlzLnRpY2tzIC8gbWF4VGlja0VsZW1lbnRUaHJlc2hvbGQ7XG4gICAgcmV0dXJuIGRlbnNpdHkgPCAxID8gMSA6IGRlbnNpdHk7XG4gIH1cbiAgZ2VuZXJhdGVUaWNrVmFsdWVzKCkge1xuICAgIGNvbnN0IHRpY2tJbnRlcnZhbCA9IHRoaXMudGlja3MgPz8gMDtcbiAgICBpZiAodGlja0ludGVydmFsIDw9IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgdGlja3MgPSBbdGhpcy5taW5dO1xuICAgIGNvbnN0IGRlbnNpdHkgPSB0aGlzLmdldFRpY2tEZW5zaXR5KCk7XG4gICAgY29uc3QgdGlja09mZnNldCA9IHRpY2tJbnRlcnZhbCAqIGRlbnNpdHk7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLm1pbjtcbiAgICB3aGlsZSAoY3VycmVudCA8IHRoaXMubWF4KSB7XG4gICAgICBjdXJyZW50ICs9IHRpY2tPZmZzZXQ7XG4gICAgICB0aWNrcy5wdXNoKE1hdGgubWluKGN1cnJlbnQsIHRoaXMubWF4KSk7XG4gICAgfVxuICAgIGlmICghdGlja3MuaW5jbHVkZXModGhpcy5tYXgpKSB7XG4gICAgICB0aWNrcy5wdXNoKHRoaXMubWF4KTtcbiAgICB9XG4gICAgcmV0dXJuIHRpY2tzO1xuICB9XG4gIHBvaW50ZXJEb3duRHJhZ1N0YXJ0KGV2ZW50LCBwcm9wKSB7XG4gICAgaWYgKCFpc1ByaW1hcnlQb2ludGVyQnV0dG9uKGV2ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmRyYWdTdGFydChwcm9wKTtcbiAgfVxuICBkcmFnU3RhcnQocHJvcCkge1xuICAgIHRoaXMuZHJhZ1Byb3AgPSBwcm9wO1xuICAgIHRoaXMubGFzdERyYWdQcm9wID0gdGhpcy5kcmFnUHJvcDtcbiAgICB0aGlzLmFjdGl2ZVByb3AgPSBwcm9wO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVybW92ZVwiLCB0aGlzLmRyYWdVcGRhdGUpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwb2ludGVydXBcIiwgdGhpcy5wb2ludGVyVXBEcmFnRW5kKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmNhbmNlbFwiLCB0aGlzLmRyYWdFbmQpO1xuICB9XG4gIGZvY3VzQWN0aXZlSGFuZGxlKHZhbHVlWCkge1xuICAgIHN3aXRjaCAodGhpcy5kcmFnUHJvcCkge1xuICAgICAgY2FzZSBcIm1pblZhbHVlXCI6XG4gICAgICAgIHRoaXMubWluSGFuZGxlLmZvY3VzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm1heFZhbHVlXCI6XG4gICAgICBjYXNlIFwidmFsdWVcIjpcbiAgICAgICAgdGhpcy5tYXhIYW5kbGUuZm9jdXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibWluTWF4VmFsdWVcIjpcbiAgICAgICAgdGhpcy5nZXRDbG9zZXN0SGFuZGxlKHZhbHVlWCkuZm9jdXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGVtaXRJbnB1dCgpIHtcbiAgICB0aGlzLmNhbGNpdGVTbGlkZXJJbnB1dC5lbWl0KCk7XG4gIH1cbiAgZW1pdENoYW5nZSgpIHtcbiAgICB0aGlzLmNhbGNpdGVTbGlkZXJDaGFuZ2UuZW1pdCgpO1xuICB9XG4gIHJlbW92ZURyYWdMaXN0ZW5lcnMoKSB7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJtb3ZlXCIsIHRoaXMuZHJhZ1VwZGF0ZSk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCB0aGlzLnBvaW50ZXJVcERyYWdFbmQpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyY2FuY2VsXCIsIHRoaXMuZHJhZ0VuZCk7XG4gIH1cbiAgLyoqXG4gICAqIFNldCBwcm9wIHZhbHVlKHMpIGlmIGNoYW5nZWQgYXQgdGhlIGNvbXBvbmVudCBsZXZlbFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIC0gYSBzZXQgb2Yga2V5L3ZhbHVlIHBhaXJzIGRlbGluZWF0aW5nIHdoYXQgcHJvcGVydGllcyBpbiB0aGUgY29tcG9uZW50IHRvIHVwZGF0ZVxuICAgKi9cbiAgc2V0VmFsdWUodmFsdWVzKSB7XG4gICAgbGV0IHZhbHVlQ2hhbmdlZDtcbiAgICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goKHByb3BOYW1lKSA9PiB7XG4gICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlc1twcm9wTmFtZV07XG4gICAgICBpZiAoIXZhbHVlQ2hhbmdlZCkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXNbcHJvcE5hbWVdO1xuICAgICAgICB2YWx1ZUNoYW5nZWQgPSBvbGRWYWx1ZSAhPT0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgICB0aGlzW3Byb3BOYW1lXSA9IG5ld1ZhbHVlO1xuICAgIH0pO1xuICAgIGlmICghdmFsdWVDaGFuZ2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGRyYWdnaW5nID0gdGhpcy5kcmFnUHJvcDtcbiAgICBpZiAoIWRyYWdnaW5nKSB7XG4gICAgICB0aGlzLmVtaXRDaGFuZ2UoKTtcbiAgICB9XG4gICAgdGhpcy5lbWl0SW5wdXQoKTtcbiAgfVxuICAvKipcbiAgICogSWYgbnVtYmVyIGlzIG91dHNpZGUgcmFuZ2UsIGNvbnN0cmFpbiB0byBtaW4gb3IgbWF4XG4gICAqXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKiBAcGFyYW0gcHJvcFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNsYW1wKHZhbHVlLCBwcm9wKSB7XG4gICAgdmFsdWUgPSBjbGFtcCh2YWx1ZSwgdGhpcy5taW4sIHRoaXMubWF4KTtcbiAgICAvLyBlbnN1cmUgdGhhdCBtYXhWYWx1ZSBhbmQgbWluVmFsdWUgZG9uJ3Qgc3dhcCBwb3NpdGlvbnNcbiAgICBpZiAocHJvcCA9PT0gXCJtYXhWYWx1ZVwiKSB7XG4gICAgICB2YWx1ZSA9IE1hdGgubWF4KHZhbHVlLCB0aGlzLm1pblZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHByb3AgPT09IFwibWluVmFsdWVcIikge1xuICAgICAgdmFsdWUgPSBNYXRoLm1pbih2YWx1ZSwgdGhpcy5tYXhWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICAvKipcbiAgICogVHJhbnNsYXRlIGEgcGl4ZWwgcG9zaXRpb24gdG8gdmFsdWUgYWxvbmcgdGhlIHJhbmdlXG4gICAqXG4gICAqIEBwYXJhbSB4XG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhbnNsYXRlKHgpIHtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMubWF4IC0gdGhpcy5taW47XG4gICAgY29uc3QgeyBsZWZ0LCB3aWR0aCB9ID0gdGhpcy50cmFja0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHBlcmNlbnQgPSAoeCAtIGxlZnQpIC8gd2lkdGg7XG4gICAgY29uc3QgbWlycm9yID0gdGhpcy5zaG91bGRNaXJyb3IoKTtcbiAgICBjb25zdCBjbGFtcGVkVmFsdWUgPSB0aGlzLmNsYW1wKHRoaXMubWluICsgcmFuZ2UgKiAobWlycm9yID8gMSAtIHBlcmNlbnQgOiBwZXJjZW50KSk7XG4gICAgbGV0IHZhbHVlID0gTnVtYmVyKGNsYW1wZWRWYWx1ZS50b0ZpeGVkKGRlY2ltYWxQbGFjZXModGhpcy5zdGVwKSkpO1xuICAgIGlmICh0aGlzLnNuYXAgJiYgdGhpcy5zdGVwKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuZ2V0Q2xvc2VzdFN0ZXAodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBjbG9zZXN0IGFsbG93ZWQgdmFsdWUgYWxvbmcgc3RlcHBlZCB2YWx1ZXNcbiAgICpcbiAgICogQHBhcmFtIG51bVxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldENsb3Nlc3RTdGVwKG51bSkge1xuICAgIG51bSA9IE51bWJlcih0aGlzLmNsYW1wKG51bSkudG9GaXhlZChkZWNpbWFsUGxhY2VzKHRoaXMuc3RlcCkpKTtcbiAgICBpZiAodGhpcy5zdGVwKSB7XG4gICAgICBjb25zdCBzdGVwID0gTWF0aC5yb3VuZChudW0gLyB0aGlzLnN0ZXApICogdGhpcy5zdGVwO1xuICAgICAgbnVtID0gTnVtYmVyKHRoaXMuY2xhbXAoc3RlcCkudG9GaXhlZChkZWNpbWFsUGxhY2VzKHRoaXMuc3RlcCkpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfVxuICBnZXRDbG9zZXN0SGFuZGxlKHZhbHVlWCkge1xuICAgIHJldHVybiB0aGlzLmdldERpc3RhbmNlWCh0aGlzLm1heEhhbmRsZSwgdmFsdWVYKSA+IHRoaXMuZ2V0RGlzdGFuY2VYKHRoaXMubWluSGFuZGxlLCB2YWx1ZVgpXG4gICAgICA/IHRoaXMubWluSGFuZGxlXG4gICAgICA6IHRoaXMubWF4SGFuZGxlO1xuICB9XG4gIGdldERpc3RhbmNlWChlbCwgdmFsdWVYKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLSB2YWx1ZVgpO1xuICB9XG4gIGdldEZvbnRTaXplRm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgcmV0dXJuIE51bWJlcih3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5nZXRQcm9wZXJ0eVZhbHVlKFwiZm9udC1zaXplXCIpLm1hdGNoKC9cXGQrLylbMF0pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgcG9zaXRpb24gb2YgdmFsdWUgYWxvbmcgcmFuZ2UgYXMgZnJhY3Rpb25hbCB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0gbnVtXG4gICAqIEByZXR1cm4ge251bWJlcn0gbnVtYmVyIGluIHRoZSB1bml0IGludGVydmFsIFswLDFdXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZ2V0VW5pdEludGVydmFsKG51bSkge1xuICAgIG51bSA9IHRoaXMuY2xhbXAobnVtKTtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMubWF4IC0gdGhpcy5taW47XG4gICAgcmV0dXJuIChudW0gLSB0aGlzLm1pbikgLyByYW5nZTtcbiAgfVxuICBhZGp1c3RIb3N0T2JzY3VyZWRIYW5kbGVMYWJlbChuYW1lKSB7XG4gICAgY29uc3QgbGFiZWwgPSB0aGlzLmVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLmhhbmRsZV9fbGFiZWwtLSR7bmFtZX1gKTtcbiAgICBjb25zdCBsYWJlbFN0YXRpYyA9IHRoaXMuZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuaGFuZGxlX19sYWJlbC0tJHtuYW1lfS5zdGF0aWNgKTtcbiAgICBjb25zdCBsYWJlbFRyYW5zZm9ybWVkID0gdGhpcy5lbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC5oYW5kbGVfX2xhYmVsLS0ke25hbWV9LnRyYW5zZm9ybWVkYCk7XG4gICAgY29uc3QgbGFiZWxTdGF0aWNCb3VuZHMgPSBsYWJlbFN0YXRpYy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBsYWJlbFN0YXRpY09mZnNldCA9IHRoaXMuZ2V0SG9zdE9mZnNldChsYWJlbFN0YXRpY0JvdW5kcy5sZWZ0LCBsYWJlbFN0YXRpY0JvdW5kcy5yaWdodCk7XG4gICAgbGFiZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsYWJlbFN0YXRpY09mZnNldH1weClgO1xuICAgIGxhYmVsVHJhbnNmb3JtZWQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsYWJlbFN0YXRpY09mZnNldH1weClgO1xuICB9XG4gIGh5cGhlbmF0ZUNvbGxpZGluZ1JhbmdlSGFuZGxlTGFiZWxzKCkge1xuICAgIGNvbnN0IHsgc2hhZG93Um9vdCB9ID0gdGhpcy5lbDtcbiAgICBjb25zdCBtaXJyb3IgPSB0aGlzLnNob3VsZE1pcnJvcigpO1xuICAgIGNvbnN0IGxlZnRNb2RpZmllciA9IG1pcnJvciA/IFwidmFsdWVcIiA6IFwibWluVmFsdWVcIjtcbiAgICBjb25zdCByaWdodE1vZGlmaWVyID0gbWlycm9yID8gXCJtaW5WYWx1ZVwiIDogXCJ2YWx1ZVwiO1xuICAgIGNvbnN0IGxlZnRWYWx1ZUxhYmVsID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuaGFuZGxlX19sYWJlbC0tJHtsZWZ0TW9kaWZpZXJ9YCk7XG4gICAgY29uc3QgbGVmdFZhbHVlTGFiZWxTdGF0aWMgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC5oYW5kbGVfX2xhYmVsLS0ke2xlZnRNb2RpZmllcn0uc3RhdGljYCk7XG4gICAgY29uc3QgbGVmdFZhbHVlTGFiZWxUcmFuc2Zvcm1lZCA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLmhhbmRsZV9fbGFiZWwtLSR7bGVmdE1vZGlmaWVyfS50cmFuc2Zvcm1lZGApO1xuICAgIGNvbnN0IGxlZnRWYWx1ZUxhYmVsU3RhdGljSG9zdE9mZnNldCA9IHRoaXMuZ2V0SG9zdE9mZnNldChsZWZ0VmFsdWVMYWJlbFN0YXRpYy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0LCBsZWZ0VmFsdWVMYWJlbFN0YXRpYy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCk7XG4gICAgY29uc3QgcmlnaHRWYWx1ZUxhYmVsID0gc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGAuaGFuZGxlX19sYWJlbC0tJHtyaWdodE1vZGlmaWVyfWApO1xuICAgIGNvbnN0IHJpZ2h0VmFsdWVMYWJlbFN0YXRpYyA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLmhhbmRsZV9fbGFiZWwtLSR7cmlnaHRNb2RpZmllcn0uc3RhdGljYCk7XG4gICAgY29uc3QgcmlnaHRWYWx1ZUxhYmVsVHJhbnNmb3JtZWQgPSBzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC5oYW5kbGVfX2xhYmVsLS0ke3JpZ2h0TW9kaWZpZXJ9LnRyYW5zZm9ybWVkYCk7XG4gICAgY29uc3QgcmlnaHRWYWx1ZUxhYmVsU3RhdGljSG9zdE9mZnNldCA9IHRoaXMuZ2V0SG9zdE9mZnNldChyaWdodFZhbHVlTGFiZWxTdGF0aWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCwgcmlnaHRWYWx1ZUxhYmVsU3RhdGljLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0KTtcbiAgICBjb25zdCBsYWJlbEZvbnRTaXplID0gdGhpcy5nZXRGb250U2l6ZUZvckVsZW1lbnQobGVmdFZhbHVlTGFiZWwpO1xuICAgIGNvbnN0IGxhYmVsVHJhbnNmb3JtZWRPdmVybGFwID0gdGhpcy5nZXRSYW5nZUxhYmVsT3ZlcmxhcChsZWZ0VmFsdWVMYWJlbFRyYW5zZm9ybWVkLCByaWdodFZhbHVlTGFiZWxUcmFuc2Zvcm1lZCk7XG4gICAgY29uc3QgaHlwaGVuTGFiZWwgPSBsZWZ0VmFsdWVMYWJlbDtcbiAgICBjb25zdCBsYWJlbE9mZnNldCA9IGxhYmVsRm9udFNpemUgLyAyO1xuICAgIGlmIChsYWJlbFRyYW5zZm9ybWVkT3ZlcmxhcCA+IDApIHtcbiAgICAgIGh5cGhlbkxhYmVsLmNsYXNzTGlzdC5hZGQoXCJoeXBoZW5cIiwgXCJoeXBoZW4tLXdyYXBcIik7XG4gICAgICBpZiAocmlnaHRWYWx1ZUxhYmVsU3RhdGljSG9zdE9mZnNldCA9PT0gMCAmJiBsZWZ0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXQgPT09IDApIHtcbiAgICAgICAgLy8gTmVpdGhlciBoYW5kbGUgb3ZlcmxhcHMgdGhlIGhvc3QgYm91bmRhcnlcbiAgICAgICAgbGV0IGxlZnRWYWx1ZUxhYmVsVHJhbnNsYXRlID0gbGFiZWxUcmFuc2Zvcm1lZE92ZXJsYXAgLyAyIC0gbGFiZWxPZmZzZXQ7XG4gICAgICAgIGxlZnRWYWx1ZUxhYmVsVHJhbnNsYXRlID1cbiAgICAgICAgICBNYXRoLnNpZ24obGVmdFZhbHVlTGFiZWxUcmFuc2xhdGUpID09PSAtMVxuICAgICAgICAgICAgPyBNYXRoLmFicyhsZWZ0VmFsdWVMYWJlbFRyYW5zbGF0ZSlcbiAgICAgICAgICAgIDogLWxlZnRWYWx1ZUxhYmVsVHJhbnNsYXRlO1xuICAgICAgICBjb25zdCBsZWZ0VmFsdWVMYWJlbFRyYW5zZm9ybWVkSG9zdE9mZnNldCA9IHRoaXMuZ2V0SG9zdE9mZnNldChsZWZ0VmFsdWVMYWJlbFRyYW5zZm9ybWVkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgK1xuICAgICAgICAgIGxlZnRWYWx1ZUxhYmVsVHJhbnNsYXRlIC1cbiAgICAgICAgICBsYWJlbE9mZnNldCwgbGVmdFZhbHVlTGFiZWxUcmFuc2Zvcm1lZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCArXG4gICAgICAgICAgbGVmdFZhbHVlTGFiZWxUcmFuc2xhdGUgLVxuICAgICAgICAgIGxhYmVsT2Zmc2V0KTtcbiAgICAgICAgbGV0IHJpZ2h0VmFsdWVMYWJlbFRyYW5zbGF0ZSA9IGxhYmVsVHJhbnNmb3JtZWRPdmVybGFwIC8gMjtcbiAgICAgICAgY29uc3QgcmlnaHRWYWx1ZUxhYmVsVHJhbnNmb3JtZWRIb3N0T2Zmc2V0ID0gdGhpcy5nZXRIb3N0T2Zmc2V0KHJpZ2h0VmFsdWVMYWJlbFRyYW5zZm9ybWVkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyByaWdodFZhbHVlTGFiZWxUcmFuc2xhdGUsIHJpZ2h0VmFsdWVMYWJlbFRyYW5zZm9ybWVkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnJpZ2h0ICsgcmlnaHRWYWx1ZUxhYmVsVHJhbnNsYXRlKTtcbiAgICAgICAgaWYgKGxlZnRWYWx1ZUxhYmVsVHJhbnNmb3JtZWRIb3N0T2Zmc2V0ICE9PSAwKSB7XG4gICAgICAgICAgbGVmdFZhbHVlTGFiZWxUcmFuc2xhdGUgKz0gbGVmdFZhbHVlTGFiZWxUcmFuc2Zvcm1lZEhvc3RPZmZzZXQ7XG4gICAgICAgICAgcmlnaHRWYWx1ZUxhYmVsVHJhbnNsYXRlICs9IGxlZnRWYWx1ZUxhYmVsVHJhbnNmb3JtZWRIb3N0T2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyaWdodFZhbHVlTGFiZWxUcmFuc2Zvcm1lZEhvc3RPZmZzZXQgIT09IDApIHtcbiAgICAgICAgICBsZWZ0VmFsdWVMYWJlbFRyYW5zbGF0ZSArPSByaWdodFZhbHVlTGFiZWxUcmFuc2Zvcm1lZEhvc3RPZmZzZXQ7XG4gICAgICAgICAgcmlnaHRWYWx1ZUxhYmVsVHJhbnNsYXRlICs9IHJpZ2h0VmFsdWVMYWJlbFRyYW5zZm9ybWVkSG9zdE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBsZWZ0VmFsdWVMYWJlbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke2xlZnRWYWx1ZUxhYmVsVHJhbnNsYXRlfXB4KWA7XG4gICAgICAgIGxlZnRWYWx1ZUxhYmVsVHJhbnNmb3JtZWQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsZWZ0VmFsdWVMYWJlbFRyYW5zbGF0ZSAtIGxhYmVsT2Zmc2V0fXB4KWA7XG4gICAgICAgIHJpZ2h0VmFsdWVMYWJlbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3JpZ2h0VmFsdWVMYWJlbFRyYW5zbGF0ZX1weClgO1xuICAgICAgICByaWdodFZhbHVlTGFiZWxUcmFuc2Zvcm1lZC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3JpZ2h0VmFsdWVMYWJlbFRyYW5zbGF0ZX1weClgO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAobGVmdFZhbHVlTGFiZWxTdGF0aWNIb3N0T2Zmc2V0ID4gMCB8fCByaWdodFZhbHVlTGFiZWxTdGF0aWNIb3N0T2Zmc2V0ID4gMCkge1xuICAgICAgICAvLyBsYWJlbHMgb3ZlcmxhcCBob3N0IGJvdW5kYXJ5IG9uIHRoZSBsZWZ0IHNpZGVcbiAgICAgICAgbGVmdFZhbHVlTGFiZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsZWZ0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXQgKyBsYWJlbE9mZnNldH1weClgO1xuICAgICAgICByaWdodFZhbHVlTGFiZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsYWJlbFRyYW5zZm9ybWVkT3ZlcmxhcCArIHJpZ2h0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXR9cHgpYDtcbiAgICAgICAgcmlnaHRWYWx1ZUxhYmVsVHJhbnNmb3JtZWQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsYWJlbFRyYW5zZm9ybWVkT3ZlcmxhcCArIHJpZ2h0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXR9cHgpYDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlZnRWYWx1ZUxhYmVsU3RhdGljSG9zdE9mZnNldCA8IDAgfHwgcmlnaHRWYWx1ZUxhYmVsU3RhdGljSG9zdE9mZnNldCA8IDApIHtcbiAgICAgICAgLy8gbGFiZWxzIG92ZXJsYXAgaG9zdCBib3VuZGFyeSBvbiB0aGUgcmlnaHQgc2lkZVxuICAgICAgICBsZXQgbGVmdFZhbHVlTGFiZWxUcmFuc2xhdGUgPSBNYXRoLmFicyhsZWZ0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXQpICsgbGFiZWxUcmFuc2Zvcm1lZE92ZXJsYXAgLSBsYWJlbE9mZnNldDtcbiAgICAgICAgbGVmdFZhbHVlTGFiZWxUcmFuc2xhdGUgPVxuICAgICAgICAgIE1hdGguc2lnbihsZWZ0VmFsdWVMYWJlbFRyYW5zbGF0ZSkgPT09IC0xXG4gICAgICAgICAgICA/IE1hdGguYWJzKGxlZnRWYWx1ZUxhYmVsVHJhbnNsYXRlKVxuICAgICAgICAgICAgOiAtbGVmdFZhbHVlTGFiZWxUcmFuc2xhdGU7XG4gICAgICAgIGxlZnRWYWx1ZUxhYmVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7bGVmdFZhbHVlTGFiZWxUcmFuc2xhdGV9cHgpYDtcbiAgICAgICAgbGVmdFZhbHVlTGFiZWxUcmFuc2Zvcm1lZC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke2xlZnRWYWx1ZUxhYmVsVHJhbnNsYXRlIC0gbGFiZWxPZmZzZXR9cHgpYDtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBoeXBoZW5MYWJlbC5jbGFzc0xpc3QucmVtb3ZlKFwiaHlwaGVuXCIsIFwiaHlwaGVuLS13cmFwXCIpO1xuICAgICAgbGVmdFZhbHVlTGFiZWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsZWZ0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXR9cHgpYDtcbiAgICAgIGxlZnRWYWx1ZUxhYmVsVHJhbnNmb3JtZWQuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoJHtsZWZ0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXR9cHgpYDtcbiAgICAgIHJpZ2h0VmFsdWVMYWJlbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3JpZ2h0VmFsdWVMYWJlbFN0YXRpY0hvc3RPZmZzZXR9cHgpYDtcbiAgICAgIHJpZ2h0VmFsdWVMYWJlbFRyYW5zZm9ybWVkLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7cmlnaHRWYWx1ZUxhYmVsU3RhdGljSG9zdE9mZnNldH1weClgO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSGlkZXMgYm91bmRpbmcgdGljayBsYWJlbHMgdGhhdCBhcmUgb2JzY3VyZWQgYnkgZWl0aGVyIGhhbmRsZS5cbiAgICovXG4gIGhpZGVPYnNjdXJlZEJvdW5kaW5nVGlja0xhYmVscygpIHtcbiAgICBjb25zdCB2YWx1ZUlzUmFuZ2UgPSBpc1JhbmdlKHRoaXMudmFsdWUpO1xuICAgIGlmICghdGhpcy5oYXNIaXN0b2dyYW0gJiYgIXZhbHVlSXNSYW5nZSAmJiAhdGhpcy5sYWJlbEhhbmRsZXMgJiYgIXRoaXMucHJlY2lzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaGFzSGlzdG9ncmFtICYmICF2YWx1ZUlzUmFuZ2UgJiYgdGhpcy5sYWJlbEhhbmRsZXMgJiYgIXRoaXMucHJlY2lzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaGFzSGlzdG9ncmFtICYmICF2YWx1ZUlzUmFuZ2UgJiYgIXRoaXMubGFiZWxIYW5kbGVzICYmIHRoaXMucHJlY2lzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaGFzSGlzdG9ncmFtICYmICF2YWx1ZUlzUmFuZ2UgJiYgdGhpcy5sYWJlbEhhbmRsZXMgJiYgdGhpcy5wcmVjaXNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghdGhpcy5oYXNIaXN0b2dyYW0gJiYgdmFsdWVJc1JhbmdlICYmICF0aGlzLnByZWNpc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuaGFzSGlzdG9ncmFtICYmICF0aGlzLnByZWNpc2UgJiYgIXRoaXMubGFiZWxIYW5kbGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1pbkhhbmRsZSA9IHRoaXMuZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKFwiLnRodW1iLS1taW5WYWx1ZVwiKTtcbiAgICBjb25zdCBtYXhIYW5kbGUgPSB0aGlzLmVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIi50aHVtYi0tdmFsdWVcIik7XG4gICAgY29uc3QgbWluVGlja0xhYmVsID0gdGhpcy5lbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoXCIudGlja19fbGFiZWwtLW1pblwiKTtcbiAgICBjb25zdCBtYXhUaWNrTGFiZWwgPSB0aGlzLmVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihcIi50aWNrX19sYWJlbC0tbWF4XCIpO1xuICAgIGlmICghbWluSGFuZGxlICYmIG1heEhhbmRsZSAmJiBtaW5UaWNrTGFiZWwgJiYgbWF4VGlja0xhYmVsKSB7XG4gICAgICBtaW5UaWNrTGFiZWwuc3R5bGUub3BhY2l0eSA9IHRoaXMuaXNNaW5UaWNrTGFiZWxPYnNjdXJlZChtaW5UaWNrTGFiZWwsIG1heEhhbmRsZSkgPyBcIjBcIiA6IFwiMVwiO1xuICAgICAgbWF4VGlja0xhYmVsLnN0eWxlLm9wYWNpdHkgPSB0aGlzLmlzTWF4VGlja0xhYmVsT2JzY3VyZWQobWF4VGlja0xhYmVsLCBtYXhIYW5kbGUpID8gXCIwXCIgOiBcIjFcIjtcbiAgICB9XG4gICAgaWYgKG1pbkhhbmRsZSAmJiBtYXhIYW5kbGUgJiYgbWluVGlja0xhYmVsICYmIG1heFRpY2tMYWJlbCkge1xuICAgICAgbWluVGlja0xhYmVsLnN0eWxlLm9wYWNpdHkgPVxuICAgICAgICB0aGlzLmlzTWluVGlja0xhYmVsT2JzY3VyZWQobWluVGlja0xhYmVsLCBtaW5IYW5kbGUpIHx8XG4gICAgICAgICAgdGhpcy5pc01pblRpY2tMYWJlbE9ic2N1cmVkKG1pblRpY2tMYWJlbCwgbWF4SGFuZGxlKVxuICAgICAgICAgID8gXCIwXCJcbiAgICAgICAgICA6IFwiMVwiO1xuICAgICAgbWF4VGlja0xhYmVsLnN0eWxlLm9wYWNpdHkgPVxuICAgICAgICB0aGlzLmlzTWF4VGlja0xhYmVsT2JzY3VyZWQobWF4VGlja0xhYmVsLCBtaW5IYW5kbGUpIHx8XG4gICAgICAgICAgKHRoaXMuaXNNYXhUaWNrTGFiZWxPYnNjdXJlZChtYXhUaWNrTGFiZWwsIG1heEhhbmRsZSkgJiYgdGhpcy5oYXNIaXN0b2dyYW0pXG4gICAgICAgICAgPyBcIjBcIlxuICAgICAgICAgIDogXCIxXCI7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGludGVnZXIgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRvIG9mZnNldCBvbiB0aGUgbGVmdCBvciByaWdodCBzaWRlIGJhc2VkIG9uIGRlc2lyZWQgcG9zaXRpb24gYmVoYXZpb3IuXG4gICAqXG4gICAqIEBwYXJhbSBsZWZ0Qm91bmRzXG4gICAqIEBwYXJhbSByaWdodEJvdW5kc1xuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldEhvc3RPZmZzZXQobGVmdEJvdW5kcywgcmlnaHRCb3VuZHMpIHtcbiAgICBjb25zdCBob3N0Qm91bmRzID0gdGhpcy5lbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBidWZmZXIgPSA3O1xuICAgIGlmIChsZWZ0Qm91bmRzICsgYnVmZmVyIDwgaG9zdEJvdW5kcy5sZWZ0KSB7XG4gICAgICByZXR1cm4gaG9zdEJvdW5kcy5sZWZ0IC0gbGVmdEJvdW5kcyAtIGJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHJpZ2h0Qm91bmRzIC0gYnVmZmVyID4gaG9zdEJvdW5kcy5yaWdodCkge1xuICAgICAgcmV0dXJuIC0ocmlnaHRCb3VuZHMgLSBob3N0Qm91bmRzLnJpZ2h0KSArIGJ1ZmZlcjtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaW50ZWdlciByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCB0aGUgdHdvIGdpdmVuIHNwYW4gZWxlbWVudHMgYXJlIG92ZXJsYXBwaW5nLCB0YWtpbmcgaW50byBhY2NvdW50XG4gICAqIGEgc3BhY2UgaW4gYmV0d2VlbiB0aGUgdHdvIHNwYW5zIGVxdWFsIHRvIHRoZSBmb250LXNpemUgc2V0IG9uIHRoZW0gdG8gYWNjb3VudCBmb3IgdGhlIHNwYWNlIG5lZWRlZCB0byByZW5kZXIgYSBoeXBoZW4uXG4gICAqXG4gICAqIEBwYXJhbSBsZWZ0TGFiZWxcbiAgICogQHBhcmFtIHJpZ2h0TGFiZWxcbiAgICovXG4gIGdldFJhbmdlTGFiZWxPdmVybGFwKGxlZnRMYWJlbCwgcmlnaHRMYWJlbCkge1xuICAgIGNvbnN0IGxlZnRMYWJlbEJvdW5kcyA9IGxlZnRMYWJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCByaWdodExhYmVsQm91bmRzID0gcmlnaHRMYWJlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBsZWZ0TGFiZWxGb250U2l6ZSA9IHRoaXMuZ2V0Rm9udFNpemVGb3JFbGVtZW50KGxlZnRMYWJlbCk7XG4gICAgY29uc3QgcmFuZ2VMYWJlbE92ZXJsYXAgPSBsZWZ0TGFiZWxCb3VuZHMucmlnaHQgKyBsZWZ0TGFiZWxGb250U2l6ZSAtIHJpZ2h0TGFiZWxCb3VuZHMubGVmdDtcbiAgICByZXR1cm4gTWF0aC5tYXgocmFuZ2VMYWJlbE92ZXJsYXAsIDApO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiB2YWx1ZSByZXByZXNlbnRpbmcgaWYgdGhlIG1pbkxhYmVsIHNwYW4gZWxlbWVudCBpcyBvYnNjdXJlZCAoYmVpbmcgb3ZlcmxhcHBlZCkgYnkgdGhlIGdpdmVuIGhhbmRsZSBkaXYgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIG1pbkxhYmVsXG4gICAqIEBwYXJhbSBoYW5kbGVcbiAgICovXG4gIGlzTWluVGlja0xhYmVsT2JzY3VyZWQobWluTGFiZWwsIGhhbmRsZSkge1xuICAgIGNvbnN0IG1pbkxhYmVsQm91bmRzID0gbWluTGFiZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgaGFuZGxlQm91bmRzID0gaGFuZGxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBpbnRlcnNlY3RzKG1pbkxhYmVsQm91bmRzLCBoYW5kbGVCb3VuZHMpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYm9vbGVhbiB2YWx1ZSByZXByZXNlbnRpbmcgaWYgdGhlIG1heExhYmVsIHNwYW4gZWxlbWVudCBpcyBvYnNjdXJlZCAoYmVpbmcgb3ZlcmxhcHBlZCkgYnkgdGhlIGdpdmVuIGhhbmRsZSBkaXYgZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIG1heExhYmVsXG4gICAqIEBwYXJhbSBoYW5kbGVcbiAgICovXG4gIGlzTWF4VGlja0xhYmVsT2JzY3VyZWQobWF4TGFiZWwsIGhhbmRsZSkge1xuICAgIGNvbnN0IG1heExhYmVsQm91bmRzID0gbWF4TGFiZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgY29uc3QgaGFuZGxlQm91bmRzID0gaGFuZGxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBpbnRlcnNlY3RzKG1heExhYmVsQm91bmRzLCBoYW5kbGVCb3VuZHMpO1xuICB9XG4gIHN0YXRpYyBnZXQgZGVsZWdhdGVzRm9jdXMoKSB7IHJldHVybiB0cnVlOyB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcImhpc3RvZ3JhbVwiOiBbXCJoaXN0b2dyYW1XYXRjaGVyXCJdLFxuICAgIFwidGlja3NcIjogW1widGlja3NXYXRjaGVyXCJdLFxuICAgIFwidmFsdWVcIjogW1widmFsdWVIYW5kbGVyXCJdLFxuICAgIFwibWluVmFsdWVcIjogW1wibWluTWF4VmFsdWVIYW5kbGVyXCJdLFxuICAgIFwibWF4VmFsdWVcIjogW1wibWluTWF4VmFsdWVIYW5kbGVyXCJdXG4gIH07IH1cbiAgc3RhdGljIGdldCBzdHlsZSgpIHsgcmV0dXJuIHNsaWRlckNzczsgfVxufSwgWzE3LCBcImNhbGNpdGUtc2xpZGVyXCIsIHtcbiAgICBcImRpc2FibGVkXCI6IFs1MTZdLFxuICAgIFwiZm9ybVwiOiBbNTEzXSxcbiAgICBcImdyb3VwU2VwYXJhdG9yXCI6IFs1MTYsIFwiZ3JvdXAtc2VwYXJhdG9yXCJdLFxuICAgIFwiaGFzSGlzdG9ncmFtXCI6IFsxNTQwLCBcImhhcy1oaXN0b2dyYW1cIl0sXG4gICAgXCJoaXN0b2dyYW1cIjogWzE2XSxcbiAgICBcImhpc3RvZ3JhbVN0b3BzXCI6IFsxNl0sXG4gICAgXCJsYWJlbEhhbmRsZXNcIjogWzUxNiwgXCJsYWJlbC1oYW5kbGVzXCJdLFxuICAgIFwibGFiZWxUaWNrc1wiOiBbNTE2LCBcImxhYmVsLXRpY2tzXCJdLFxuICAgIFwibWF4XCI6IFs1MTRdLFxuICAgIFwibWF4TGFiZWxcIjogWzEsIFwibWF4LWxhYmVsXCJdLFxuICAgIFwibWF4VmFsdWVcIjogWzEwMjYsIFwibWF4LXZhbHVlXCJdLFxuICAgIFwibWluXCI6IFs1MTRdLFxuICAgIFwibWluTGFiZWxcIjogWzEsIFwibWluLWxhYmVsXCJdLFxuICAgIFwibWluVmFsdWVcIjogWzEwMjYsIFwibWluLXZhbHVlXCJdLFxuICAgIFwibWlycm9yZWRcIjogWzUxNl0sXG4gICAgXCJuYW1lXCI6IFs1MTNdLFxuICAgIFwibnVtYmVyaW5nU3lzdGVtXCI6IFsxLCBcIm51bWJlcmluZy1zeXN0ZW1cIl0sXG4gICAgXCJwYWdlU3RlcFwiOiBbNTE0LCBcInBhZ2Utc3RlcFwiXSxcbiAgICBcInByZWNpc2VcIjogWzUxNl0sXG4gICAgXCJyZXF1aXJlZFwiOiBbNTE2XSxcbiAgICBcInNuYXBcIjogWzUxNl0sXG4gICAgXCJzdGVwXCI6IFs1MTRdLFxuICAgIFwidGlja3NcIjogWzUxNF0sXG4gICAgXCJ2YWx1ZVwiOiBbMTUzOF0sXG4gICAgXCJzY2FsZVwiOiBbNTEzXSxcbiAgICBcImVmZmVjdGl2ZUxvY2FsZVwiOiBbMzJdLFxuICAgIFwibWluTWF4VmFsdWVSYW5nZVwiOiBbMzJdLFxuICAgIFwibWluVmFsdWVEcmFnUmFuZ2VcIjogWzMyXSxcbiAgICBcIm1heFZhbHVlRHJhZ1JhbmdlXCI6IFszMl0sXG4gICAgXCJ0aWNrVmFsdWVzXCI6IFszMl0sXG4gICAgXCJzZXRGb2N1c1wiOiBbNjRdXG4gIH0sIFtbMCwgXCJrZXlkb3duXCIsIFwia2V5RG93bkhhbmRsZXJcIl0sIFsxLCBcInBvaW50ZXJkb3duXCIsIFwicG9pbnRlckRvd25IYW5kbGVyXCJdXV0pO1xuZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRWxlbWVudCQxKCkge1xuICBpZiAodHlwZW9mIGN1c3RvbUVsZW1lbnRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudHMgPSBbXCJjYWxjaXRlLXNsaWRlclwiLCBcImNhbGNpdGUtZ3JhcGhcIl07XG4gIGNvbXBvbmVudHMuZm9yRWFjaCh0YWdOYW1lID0+IHsgc3dpdGNoICh0YWdOYW1lKSB7XG4gICAgY2FzZSBcImNhbGNpdGUtc2xpZGVyXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgU2xpZGVyKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjYWxjaXRlLWdyYXBoXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBkZWZpbmVDdXN0b21FbGVtZW50JDIoKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICB9IH0pO1xufVxuZGVmaW5lQ3VzdG9tRWxlbWVudCQxKCk7XG5cbmNvbnN0IENhbGNpdGVTbGlkZXIgPSBTbGlkZXI7XG5jb25zdCBkZWZpbmVDdXN0b21FbGVtZW50ID0gZGVmaW5lQ3VzdG9tRWxlbWVudCQxO1xuXG5leHBvcnQgeyBDYWxjaXRlU2xpZGVyLCBkZWZpbmVDdXN0b21FbGVtZW50IH07XG4iLCIvKiFcbiAqIEFsbCBtYXRlcmlhbCBjb3B5cmlnaHQgRVNSSSwgQWxsIFJpZ2h0cyBSZXNlcnZlZCwgdW5sZXNzIG90aGVyd2lzZSBzcGVjaWZpZWQuXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0VzcmkvY2FsY2l0ZS1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9MSUNFTlNFLm1kIGZvciBkZXRhaWxzLlxuICogdjEuNy4wXG4gKi9cbmltcG9ydCB7IHByb3h5Q3VzdG9tRWxlbWVudCwgSFRNTEVsZW1lbnQsIGZvcmNlVXBkYXRlLCBoIH0gZnJvbSAnQHN0ZW5jaWwvY29yZS9pbnRlcm5hbC9jbGllbnQvaW5kZXguanMnO1xuaW1wb3J0IHsgZyBhcyBndWlkIH0gZnJvbSAnLi9ndWlkLmpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlT2JzZXJ2ZXIgfSBmcm9tICcuL29ic2VydmVycy5qcyc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIHNsb3BlIG9mIHRoZSB0YW5nZW50c1xuICogdXNlcyBTdGVmZmVuIGludGVycG9sYXRpb24gYXMgaXQncyBtb25vdG9uaWNcbiAqIGh0dHA6Ly9qcndhbHNoMS5naXRodWIuaW8vcG9zdHMvaW50ZXJwb2xhdGlvbnMvXG4gKlxuICogQHBhcmFtIHAwXG4gKiBAcGFyYW0gcDFcbiAqIEBwYXJhbSBwMlxuICovXG5mdW5jdGlvbiBzbG9wZShwMCwgcDEsIHAyKSB7XG4gIGNvbnN0IGR4ID0gcDFbMF0gLSBwMFswXTtcbiAgY29uc3QgZHgxID0gcDJbMF0gLSBwMVswXTtcbiAgY29uc3QgZHkgPSBwMVsxXSAtIHAwWzFdO1xuICBjb25zdCBkeTEgPSBwMlsxXSAtIHAxWzFdO1xuICBjb25zdCBtID0gZHkgLyAoZHggfHwgKGR4MSA8IDAgJiYgMCkpO1xuICBjb25zdCBtMSA9IGR5MSAvIChkeDEgfHwgKGR4IDwgMCAmJiAwKSk7XG4gIGNvbnN0IHAgPSAobSAqIGR4MSArIG0xICogZHgpIC8gKGR4ICsgZHgxKTtcbiAgcmV0dXJuIChNYXRoLnNpZ24obSkgKyBNYXRoLnNpZ24obTEpKSAqIE1hdGgubWluKE1hdGguYWJzKG0pLCBNYXRoLmFicyhtMSksIDAuNSAqIE1hdGguYWJzKHApKSB8fCAwO1xufVxuLyoqXG4gKiBDYWxjdWxhdGUgc2xvcGUgZm9yIGp1c3Qgb25lIHRhbmdlbnQgKHNpbmdsZS1zaWRlZClcbiAqXG4gKiBAcGFyYW0gcDBcbiAqIEBwYXJhbSBwMVxuICogQHBhcmFtIG1cbiAqL1xuZnVuY3Rpb24gc2xvcGVTaW5nbGUocDAsIHAxLCBtKSB7XG4gIGNvbnN0IGR4ID0gcDFbMF0gLSBwMFswXTtcbiAgY29uc3QgZHkgPSBwMVsxXSAtIHAwWzFdO1xuICByZXR1cm4gZHggPyAoKDMgKiBkeSkgLyBkeCAtIG0pIC8gMiA6IG07XG59XG4vKipcbiAqIEdpdmVuIHR3byBwb2ludHMgYW5kIHRoZWlyIHRhbmdlbnQgc2xvcGVzLFxuICogY2FsY3VsYXRlIHRoZSBiZXppZXIgaGFuZGxlIGNvb3JkaW5hdGVzIGFuZCByZXR1cm4gZHJhdyBjb21tYW5kLlxuICpcbiAqIFRyYW5zbGF0ZXMgSGVybWl0ZSBTcGxpbmUgdG8gQsOpemllciBjdXJ2ZTpcbiAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQyNTc0OTQwL1xuICpcbiAqIEBwYXJhbSBwMFxuICogQHBhcmFtIHAxXG4gKiBAcGFyYW0gbTBcbiAqIEBwYXJhbSBtMVxuICogQHBhcmFtIHRcbiAqL1xuZnVuY3Rpb24gYmV6aWVyKHAwLCBwMSwgbTAsIG0xLCB0KSB7XG4gIGNvbnN0IFt4MCwgeTBdID0gcDA7XG4gIGNvbnN0IFt4MSwgeTFdID0gcDE7XG4gIGNvbnN0IGR4ID0gKHgxIC0geDApIC8gMztcbiAgY29uc3QgaDEgPSB0KFt4MCArIGR4LCB5MCArIGR4ICogbTBdKS5qb2luKFwiLFwiKTtcbiAgY29uc3QgaDIgPSB0KFt4MSAtIGR4LCB5MSAtIGR4ICogbTFdKS5qb2luKFwiLFwiKTtcbiAgY29uc3QgcCA9IHQoW3gxLCB5MV0pLmpvaW4oXCIsXCIpO1xuICByZXR1cm4gYEMgJHtoMX0gJHtoMn0gJHtwfWA7XG59XG4vKipcbiAqIEdlbmVyYXRlIGEgZnVuY3Rpb24gd2hpY2ggd2lsbCB0cmFuc2xhdGUgYSBwb2ludFxuICogZnJvbSB0aGUgZGF0YSBjb29yZGluYXRlIHNwYWNlIHRvIHN2ZyB2aWV3Ym94IG9yaWVudGVkIHBpeGVsc1xuICpcbiAqIEBwYXJhbSByb290MFxuICogQHBhcmFtIHJvb3QwLndpZHRoXG4gKiBAcGFyYW0gcm9vdDAuaGVpZ2h0XG4gKiBAcGFyYW0gcm9vdDAubWluXG4gKiBAcGFyYW0gcm9vdDAubWF4XG4gKi9cbmZ1bmN0aW9uIHRyYW5zbGF0ZSh7IHdpZHRoLCBoZWlnaHQsIG1pbiwgbWF4IH0pIHtcbiAgY29uc3QgcmFuZ2VYID0gbWF4WzBdIC0gbWluWzBdO1xuICBjb25zdCByYW5nZVkgPSBtYXhbMV0gLSBtaW5bMV07XG4gIHJldHVybiAocG9pbnQpID0+IHtcbiAgICBjb25zdCB4ID0gKChwb2ludFswXSAtIG1pblswXSkgLyByYW5nZVgpICogd2lkdGg7XG4gICAgY29uc3QgeSA9IGhlaWdodCAtIChwb2ludFsxXSAvIHJhbmdlWSkgKiBoZWlnaHQ7XG4gICAgcmV0dXJuIFt4LCB5XTtcbiAgfTtcbn1cbi8qKlxuICogR2V0IHRoZSBtaW4gYW5kIG1heCB2YWx1ZXMgZnJvbSB0aGUgZGF0YXNldFxuICpcbiAqIEBwYXJhbSBkYXRhXG4gKi9cbmZ1bmN0aW9uIHJhbmdlKGRhdGEpIHtcbiAgY29uc3QgW3N0YXJ0WCwgc3RhcnRZXSA9IGRhdGFbMF07XG4gIGNvbnN0IG1pbiA9IFtzdGFydFgsIHN0YXJ0WV07XG4gIGNvbnN0IG1heCA9IFtzdGFydFgsIHN0YXJ0WV07XG4gIHJldHVybiBkYXRhLnJlZHVjZSgoeyBtaW4sIG1heCB9LCBbeCwgeV0pID0+ICh7XG4gICAgbWluOiBbTWF0aC5taW4obWluWzBdLCB4KSwgTWF0aC5taW4obWluWzFdLCB5KV0sXG4gICAgbWF4OiBbTWF0aC5tYXgobWF4WzBdLCB4KSwgTWF0aC5tYXgobWF4WzFdLCB5KV0sXG4gIH0pLCB7IG1pbiwgbWF4IH0pO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBkcmF3aW5nIGNvbW1hbmRzIGZvciBhbiBhcmVhIGdyYXBoXG4gKiByZXR1cm5zIGEgc3RyaW5nIGNhbiBjYW4gYmUgcGFzc2VkIGRpcmVjdGx5IHRvIGEgcGF0aCBlbGVtZW50J3MgYGRgIGF0dHJpYnV0ZVxuICpcbiAqIEBwYXJhbSByb290MFxuICogQHBhcmFtIHJvb3QwLmRhdGFcbiAqIEBwYXJhbSByb290MC5taW5cbiAqIEBwYXJhbSByb290MC5tYXhcbiAqIEBwYXJhbSByb290MC50XG4gKi9cbmZ1bmN0aW9uIGFyZWEoeyBkYXRhLCBtaW4sIG1heCwgdCB9KSB7XG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIC8vIGltcG9ydGFudCBwb2ludHMgZm9yIGJlZ2lubmluZyBhbmQgZW5kaW5nIHRoZSBwYXRoXG4gIGNvbnN0IFtzdGFydFgsIHN0YXJ0WV0gPSB0KGRhdGFbMF0pO1xuICBjb25zdCBbbWluWCwgbWluWV0gPSB0KG1pbik7XG4gIGNvbnN0IFttYXhYXSA9IHQobWF4KTtcbiAgLy8ga2VlcCB0cmFjayBvZiBwcmV2aW91cyBzbG9wZS9wb2ludHNcbiAgbGV0IG07XG4gIGxldCBwMDtcbiAgbGV0IHAxO1xuICAvLyBpdGVyYXRlIG92ZXIgZGF0YSBwb2ludHMsIGNhbGN1bGF0aW5nIGNvbW1hbmQgZm9yIGVhY2hcbiAgY29uc3QgY29tbWFuZHMgPSBkYXRhLnJlZHVjZSgoYWNjLCBwb2ludCwgaSkgPT4ge1xuICAgIHAwID0gZGF0YVtpIC0gMl07XG4gICAgcDEgPSBkYXRhW2kgLSAxXTtcbiAgICBpZiAoaSA+IDEpIHtcbiAgICAgIGNvbnN0IG0xID0gc2xvcGUocDAsIHAxLCBwb2ludCk7XG4gICAgICBjb25zdCBtMCA9IG0gPT09IHVuZGVmaW5lZCA/IHNsb3BlU2luZ2xlKHAwLCBwMSwgbTEpIDogbTtcbiAgICAgIGNvbnN0IGNvbW1hbmQgPSBiZXppZXIocDAsIHAxLCBtMCwgbTEsIHQpO1xuICAgICAgbSA9IG0xO1xuICAgICAgcmV0dXJuIGAke2FjY30gJHtjb21tYW5kfWA7XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIGBNICR7bWluWH0sJHttaW5ZfSBMICR7bWluWH0sJHtzdGFydFl9IEwgJHtzdGFydFh9LCR7c3RhcnRZfWApO1xuICAvLyBjbG9zZSB0aGUgcGF0aFxuICBjb25zdCBsYXN0ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdO1xuICBjb25zdCBlbmQgPSBiZXppZXIocDEsIGxhc3QsIG0sIHNsb3BlU2luZ2xlKHAxLCBsYXN0LCBtKSwgdCk7XG4gIHJldHVybiBgJHtjb21tYW5kc30gJHtlbmR9IEwgJHttYXhYfSwke21pbll9IFpgO1xufVxuXG5jb25zdCBncmFwaENzcyA9IFwiOmhvc3R7ZGlzcGxheTpibG9jaztibG9jay1zaXplOjEwMCV9LnN2Z3tmaWxsOmN1cnJlbnRDb2xvcjtzdHJva2U6dHJhbnNwYXJlbnQ7bWFyZ2luOjBweDtkaXNwbGF5OmJsb2NrO2Jsb2NrLXNpemU6MTAwJTtpbmxpbmUtc2l6ZToxMDAlO3BhZGRpbmc6MHB4fS5zdmcgLmdyYXBoLXBhdGgtLWhpZ2hsaWdodHtmaWxsOnZhcigtLWNhbGNpdGUtdWktYnJhbmQpO29wYWNpdHk6MC41fTpob3N0KFtoaWRkZW5dKXtkaXNwbGF5Om5vbmV9W2hpZGRlbl17ZGlzcGxheTpub25lfVwiO1xuXG5jb25zdCBHcmFwaCA9IC8qQF9fUFVSRV9fKi8gcHJveHlDdXN0b21FbGVtZW50KGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX19yZWdpc3Rlckhvc3QoKTtcbiAgICB0aGlzLl9fYXR0YWNoU2hhZG93KCk7XG4gICAgdGhpcy5ncmFwaElkID0gYGNhbGNpdGUtZ3JhcGgtJHtndWlkKCl9YDtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gY3JlYXRlT2JzZXJ2ZXIoXCJyZXNpemVcIiwgKCkgPT4gZm9yY2VVcGRhdGUodGhpcykpO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMuY29sb3JTdG9wcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhpZ2hsaWdodE1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmhpZ2hsaWdodE1heCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1heCA9IHVuZGVmaW5lZDtcbiAgfVxuICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vXG4gIC8vICBMaWZlY3ljbGVcbiAgLy9cbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyPy5vYnNlcnZlKHRoaXMuZWwpO1xuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMucmVzaXplT2JzZXJ2ZXI/LmRpc2Nvbm5lY3QoKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkYXRhLCBjb2xvclN0b3BzLCBlbCwgaGlnaGxpZ2h0TWF4LCBoaWdobGlnaHRNaW4sIG1pbiwgbWF4IH0gPSB0aGlzO1xuICAgIGNvbnN0IGlkID0gdGhpcy5ncmFwaElkO1xuICAgIGNvbnN0IHsgY2xpZW50SGVpZ2h0OiBoZWlnaHQsIGNsaWVudFdpZHRoOiB3aWR0aCB9ID0gZWw7XG4gICAgLy8gaWYgd2UgaGF2ZSBubyBkYXRhLCByZXR1cm4gZW1wdHkgc3ZnXG4gICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gKGgoXCJzdmdcIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogXCJzdmdcIiwgaGVpZ2h0OiBoZWlnaHQsIHByZXNlcnZlQXNwZWN0UmF0aW86IFwibm9uZVwiLCB2aWV3Qm94OiBgMCAwICR7d2lkdGh9ICR7aGVpZ2h0fWAsIHdpZHRoOiB3aWR0aCB9KSk7XG4gICAgfVxuICAgIGNvbnN0IHsgbWluOiByYW5nZU1pbiwgbWF4OiByYW5nZU1heCB9ID0gcmFuZ2UoZGF0YSk7XG4gICAgbGV0IGN1cnJlbnRNaW4gPSByYW5nZU1pbjtcbiAgICBsZXQgY3VycmVudE1heCA9IHJhbmdlTWF4O1xuICAgIGlmIChtaW4gPCByYW5nZU1pblswXSB8fCBtaW4gPiByYW5nZU1pblswXSkge1xuICAgICAgY3VycmVudE1pbiA9IFttaW4sIDBdO1xuICAgIH1cbiAgICBpZiAobWF4ID4gcmFuZ2VNYXhbMF0gfHwgbWF4IDwgcmFuZ2VNYXhbMF0pIHtcbiAgICAgIGN1cnJlbnRNYXggPSBbbWF4LCByYW5nZU1heFsxXV07XG4gICAgfVxuICAgIGNvbnN0IHQgPSB0cmFuc2xhdGUoeyBtaW46IGN1cnJlbnRNaW4sIG1heDogY3VycmVudE1heCwgd2lkdGgsIGhlaWdodCB9KTtcbiAgICBjb25zdCBbaE1pblhdID0gdChbaGlnaGxpZ2h0TWluLCBjdXJyZW50TWF4WzFdXSk7XG4gICAgY29uc3QgW2hNYXhYXSA9IHQoW2hpZ2hsaWdodE1heCwgY3VycmVudE1heFsxXV0pO1xuICAgIGNvbnN0IGFyZWFQYXRoID0gYXJlYSh7IGRhdGEsIG1pbjogcmFuZ2VNaW4sIG1heDogcmFuZ2VNYXgsIHQgfSk7XG4gICAgY29uc3QgZmlsbCA9IGNvbG9yU3RvcHMgPyBgdXJsKCNsaW5lYXItZ3JhZGllbnQtJHtpZH0pYCA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gKGgoXCJzdmdcIiwgeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLCBjbGFzczogXCJzdmdcIiwgaGVpZ2h0OiBoZWlnaHQsIHByZXNlcnZlQXNwZWN0UmF0aW86IFwibm9uZVwiLCB2aWV3Qm94OiBgMCAwICR7d2lkdGh9ICR7aGVpZ2h0fWAsIHdpZHRoOiB3aWR0aCB9LCBjb2xvclN0b3BzID8gKGgoXCJkZWZzXCIsIG51bGwsIGgoXCJsaW5lYXJHcmFkaWVudFwiLCB7IGlkOiBgbGluZWFyLWdyYWRpZW50LSR7aWR9YCwgeDE6IFwiMFwiLCB4MjogXCIxXCIsIHkxOiBcIjBcIiwgeTI6IFwiMFwiIH0sIGNvbG9yU3RvcHMubWFwKCh7IG9mZnNldCwgY29sb3IsIG9wYWNpdHkgfSkgPT4gKGgoXCJzdG9wXCIsIHsgb2Zmc2V0OiBgJHtvZmZzZXQgKiAxMDB9JWAsIFwic3RvcC1jb2xvclwiOiBjb2xvciwgXCJzdG9wLW9wYWNpdHlcIjogb3BhY2l0eSB9KSkpKSkpIDogbnVsbCwgaGlnaGxpZ2h0TWluICE9PSB1bmRlZmluZWQgPyAoW1xuICAgICAgaChcIm1hc2tcIiwgeyBoZWlnaHQ6IFwiMTAwJVwiLCBpZDogYCR7aWR9MWAsIHdpZHRoOiBcIjEwMCVcIiwgeDogXCIwJVwiLCB5OiBcIjAlXCIgfSwgaChcInBhdGhcIiwgeyBkOiBgXG4gICAgICAgICAgICBNIDAsMFxuICAgICAgICAgICAgTCAke2hNaW5YIC0gMX0sMFxuICAgICAgICAgICAgTCAke2hNaW5YIC0gMX0sJHtoZWlnaHR9XG4gICAgICAgICAgICBMIDAsJHtoZWlnaHR9XG4gICAgICAgICAgICBaXG4gICAgICAgICAgYCwgZmlsbDogXCJ3aGl0ZVwiIH0pKSxcbiAgICAgIGgoXCJtYXNrXCIsIHsgaGVpZ2h0OiBcIjEwMCVcIiwgaWQ6IGAke2lkfTJgLCB3aWR0aDogXCIxMDAlXCIsIHg6IFwiMCVcIiwgeTogXCIwJVwiIH0sIGgoXCJwYXRoXCIsIHsgZDogYFxuICAgICAgICAgICAgTSAke2hNaW5YICsgMX0sMFxuICAgICAgICAgICAgTCAke2hNYXhYIC0gMX0sMFxuICAgICAgICAgICAgTCAke2hNYXhYIC0gMX0sJHtoZWlnaHR9XG4gICAgICAgICAgICBMICR7aE1pblggKyAxfSwgJHtoZWlnaHR9XG4gICAgICAgICAgICBaXG4gICAgICAgICAgYCwgZmlsbDogXCJ3aGl0ZVwiIH0pKSxcbiAgICAgIGgoXCJtYXNrXCIsIHsgaGVpZ2h0OiBcIjEwMCVcIiwgaWQ6IGAke2lkfTNgLCB3aWR0aDogXCIxMDAlXCIsIHg6IFwiMCVcIiwgeTogXCIwJVwiIH0sIGgoXCJwYXRoXCIsIHsgZDogYFxuICAgICAgICAgICAgICAgIE0gJHtoTWF4WCArIDF9LDBcbiAgICAgICAgICAgICAgICBMICR7d2lkdGh9LDBcbiAgICAgICAgICAgICAgICBMICR7d2lkdGh9LCR7aGVpZ2h0fVxuICAgICAgICAgICAgICAgIEwgJHtoTWF4WCArIDF9LCAke2hlaWdodH1cbiAgICAgICAgICAgICAgICBaXG4gICAgICAgICAgICAgIGAsIGZpbGw6IFwid2hpdGVcIiB9KSksXG4gICAgICBoKFwicGF0aFwiLCB7IGNsYXNzOiBcImdyYXBoLXBhdGhcIiwgZDogYXJlYVBhdGgsIGZpbGw6IGZpbGwsIG1hc2s6IGB1cmwoIyR7aWR9MSlgIH0pLFxuICAgICAgaChcInBhdGhcIiwgeyBjbGFzczogXCJncmFwaC1wYXRoLS1oaWdobGlnaHRcIiwgZDogYXJlYVBhdGgsIGZpbGw6IGZpbGwsIG1hc2s6IGB1cmwoIyR7aWR9MilgIH0pLFxuICAgICAgaChcInBhdGhcIiwgeyBjbGFzczogXCJncmFwaC1wYXRoXCIsIGQ6IGFyZWFQYXRoLCBmaWxsOiBmaWxsLCBtYXNrOiBgdXJsKCMke2lkfTMpYCB9KSxcbiAgICBdKSA6IChoKFwicGF0aFwiLCB7IGNsYXNzOiBcImdyYXBoLXBhdGhcIiwgZDogYXJlYVBhdGgsIGZpbGw6IGZpbGwgfSkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gdGhpczsgfVxuICBzdGF0aWMgZ2V0IHN0eWxlKCkgeyByZXR1cm4gZ3JhcGhDc3M7IH1cbn0sIFsxLCBcImNhbGNpdGUtZ3JhcGhcIiwge1xuICAgIFwiZGF0YVwiOiBbMTZdLFxuICAgIFwiY29sb3JTdG9wc1wiOiBbMTZdLFxuICAgIFwiaGlnaGxpZ2h0TWluXCI6IFsyLCBcImhpZ2hsaWdodC1taW5cIl0sXG4gICAgXCJoaWdobGlnaHRNYXhcIjogWzIsIFwiaGlnaGxpZ2h0LW1heFwiXSxcbiAgICBcIm1pblwiOiBbNTE0XSxcbiAgICBcIm1heFwiOiBbNTE0XVxuICB9XSk7XG5mdW5jdGlvbiBkZWZpbmVDdXN0b21FbGVtZW50KCkge1xuICBpZiAodHlwZW9mIGN1c3RvbUVsZW1lbnRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNvbXBvbmVudHMgPSBbXCJjYWxjaXRlLWdyYXBoXCJdO1xuICBjb21wb25lbnRzLmZvckVhY2godGFnTmFtZSA9PiB7IHN3aXRjaCAodGFnTmFtZSkge1xuICAgIGNhc2UgXCJjYWxjaXRlLWdyYXBoXCI6XG4gICAgICBpZiAoIWN1c3RvbUVsZW1lbnRzLmdldCh0YWdOYW1lKSkge1xuICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgR3JhcGgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH0gfSk7XG59XG5kZWZpbmVDdXN0b21FbGVtZW50KCk7XG5cbmV4cG9ydCB7IEdyYXBoIGFzIEcsIGRlZmluZUN1c3RvbUVsZW1lbnQgYXMgZCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9